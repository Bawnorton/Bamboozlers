@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes
@inject IJSRuntime JsRuntime
@implements IDisposable

<Layout Height="Height.Is100">
    <LayoutContent>
        @Message
    </LayoutContent>
    <LayoutFooter Fixed Background="Background.Secondary" TextColor="TextColor.Light">
        <Div Display="Display.Flex" Overflow="Overflow.Hidden">
            <Div @ref="MessageInput" contenteditable="true" Width="Width.Is100" Height="Height.Is100" Padding="Padding.Is3"
                 id="message-input" class="message-input" data-placeholder="@($"Message {ChatName}")">
            </Div>
        </Div>
    </LayoutFooter>
</Layout>

@code {
    [Parameter]
    public Chat? Chat { get; set; }

    private Div MessageInput { get; set; }
        
    private string ChatName { get; set; }
    
    private string Message { get; set; }
    
    private DotNetObjectReference<CompChatView> Reference { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (Chat is GroupChat groupChat)
        {
            ChatName = groupChat.Name;
        }
        else if (Chat is not null)
        {
            var self = await AuthHelper.GetSelf();
            var other = Chat.Users.First(u => u.Id != self.Id);
            ChatName = (other.DisplayName ?? other.UserName)!;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Reference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("messageInputInterop.init", Reference, "message-input");
        }
    }
    
    [JSInvokable]
    public Task<IEnumerable<KeyReference>> GetDisallowedKeys()
    {
        return Task.FromResult<IEnumerable<KeyReference>>([
            KeyReference.Normal("Enter", "Enter")
        ]);
    }

    /// <summary>
    /// Before text is inserted into the contenteditable element
    /// </summary>
    [JSInvokable]
    public async void OnKeydown(InputEvent inputEvent)
    {
        var keyReference = inputEvent.KeyReference;
        if (keyReference is { Key: "Enter", Shift: false })
        {
            SendMessage();
            await JsRuntime.InvokeVoidAsync("messageInputInterop.clear", "message-input");
        } 
    }
    
    /// <summary>
    /// After text is inserted into the contenteditable element
    /// </summary>
    [JSInvokable]
    public async void OnKeyup(InputEvent inputEvent)
    {
        Message = inputEvent.Text;
        if (inputEvent.KeyReference is { Key: "Backspace" } && Message.Equals("\n"))
        {
            await JsRuntime.InvokeVoidAsync("messageInputInterop.clear", "message-input");
        }
    }

    private void SendMessage()
    {
        Console.WriteLine(Message);
    }
    
    public void Dispose()
    {
        Reference.Dispose();
    }

    public record InputEvent(KeyReference KeyReference, string Text, bool Passed);

    public record KeyReference(string Key, string Code, bool Ctrl, bool Shift, bool Alt, bool Meta)
    {
        public static KeyReference Normal(string key, string code) => new(key, code, false, false, false, false);
    }
}
