@inherits TabToggle

@inject ILogger<CompEditDisplayName> Logger

<Tabs @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel ElementId="view-panel" 
                  Name="view">
            <Row>
                <Column ColumnSize="ColumnSize.Is8">
                    <Div Class="form-floating mb-3">
                        <input name="change-display" 
                               type="text" 
                               value="@UserDisplayRecord.DisplayName" 
                               class="form-control" 
                               disabled/>
                        <Label class="form-label">
                            Display Name
                        </Label>
                    </Div>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button id="toggle-edit"
                            Width="Width.Is100"
                            Color="Color.Primary"
                            Clicked="Toggle">
                        Change Display Name
                    </Button>
                </Column>                
            </Row>
        </TabPanel>
        <TabPanel ElementId="edit-panel" 
                  Name="edit">
            <Container>
                <EditForm Model="Input" 
                          OnValidSubmit="OnValidSubmitAsync" 
                          method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div Class="form-floating mb-3">
                                <InputText id="displayname-field" 
                                           @bind-Value="Input!.DisplayName" 
                                           class="form-control" 
                                           autocomplete="new-username" 
                                           aria-required="true"
                                           placeholder="Please enter new display name."/>
                                <Label for="displayname-field"
                                       class="form-label">
                                    New Display Name
                                </Label>
                                <ValidationMessage For="() => Input.DisplayName" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is75">
                            <Row>
                                <Column>
                                    <Button id="toggle-view"
                                            Width="Width.Is100"
                                            Color="Color.Danger"
                                            Clicked="Toggle">
                                        Cancel
                                    </Button>
                                </Column>
                                <Column>
                                    <Button id="submit-button"
                                            Width="Width.Is100"
                                            Color="Color.Success"
                                            Type="ButtonType.Submit">
                                        Confirm changes
                                    </Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Input = new InputModel();
    }

    public override async Task OnValidSubmitAsync()
    {
        await base.OnValidSubmitAsync();
        if (DataChangeFunction is null)
        {
            await StatusChangeEvent.InvokeAsync(StatusArguments.BasicStatusArgs);
            return;
        }
        
        var result = await DataChangeFunction.Invoke(new UserDataRecord
        {
            DataType = UserDataType.Visual,
            DisplayName = Input!.DisplayName
        });

        if (result)
        {
            Logger.LogInformation("User changed their display name successfully.");
            
            await StatusChangeEvent.InvokeAsync(new StatusArguments(
                Color.Primary,
                true,
                "Success!",
                "Your display name has been changed."
            ));
            
            await Toggle();
        }
    }
    
    private sealed class InputModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "Display Name")]
        public string DisplayName { get; set; } = "";
    }
}
