@inherits TabToggle;

<Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel Name="view">
            <Row>
                <Column ColumnSize="ColumnSize.Is8">
                    <Div Class="form-floating mb-3">
                        <input type="text" value="@UserModel.U.UserName" class="form-control" disabled/>
                        <Label for="username" class="form-label">Username</Label>
                    </Div>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button Width="Width.Is100" Color="Color.Primary" Clicked="Toggle">Change Username</Button>
                </Column>  
            </Row>
        </TabPanel>
        <TabPanel Name="edit">
            <Container>
                <EditForm Model="Input" FormName="change-username" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div Class="form-floating mb-3">
                                <InputText @bind-Value="Input.Username" class="form-control" autocomplete="new-username" aria-required="true" placeholder="Please enter new username."/>
                                <Label for="username" class="form-label">New Username</Label>
                                <ValidationMessage For="() => Input.Username" class="text-danger"/>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please confirm your password."/>
                                <Label for="password" class="form-label">Password</Label>
                                <ValidationMessage For="() => Input.Password" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is75">
                            <Row>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Danger" Clicked="Toggle">Cancel</Button>
                                </Column>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Success" Type="ButtonType.Submit">Confirm changes</Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm] 
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ViewButtonText = "Change Username";
    }

    private async Task OnValidSubmitAsync()
    {
        var model = new UserModel
        {
            Type = DataChangeType.Username,
            UserName = Input.Username,
            Password = Input.Password
        };
        await DataChangeCallback.InvokeAsync(model);
    }

    private sealed class InputModel
    {
        [Required]
        [ValidUsername(ErrorMessage = "Username is invalid. It can only contain letters, numbers, and underscores. There can only be 1 underscore in a row.")]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
    }
}