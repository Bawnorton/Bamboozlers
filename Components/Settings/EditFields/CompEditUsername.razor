@inherits TabToggle;

<Tabs @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel id="view-panel" 
                  Name="view">
            <Row>
                <Column ColumnSize="ColumnSize.Is8">
                    <Div Class="form-floating mb-3">
                        <input type="text" 
                               value="@UserDisplayRecord.UserName" 
                               class="form-control" 
                               disabled/>
                        <Label class="form-label">
                            Username
                        </Label>
                    </Div>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button id="toggle-edit"
                            Width="Width.Is100"
                            Color="Color.Primary"
                            Clicked="Toggle">
                        Change Username
                    </Button>
                </Column>  
            </Row>
        </TabPanel>
        <TabPanel id="edit-panel" 
                  Name="edit">
            <Container>
                <EditForm Model="Input" FormName="change-username" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div Class="form-floating mb-3">
                                <InputText id="username-field" 
                                           @bind-Value="Input!.Username" 
                                           class="form-control" 
                                           autocomplete="new-username" 
                                           aria-required="true" 
                                           placeholder="Please enter new username."/>
                                <Label for="username-field" class="form-label">New Username</Label>
                                <ValidationMessage For="() => Input.Username" class="text-danger"/>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText id="password-field" 
                                           type="password" 
                                           @bind-Value="Input!.Password" 
                                           class="form-control" 
                                           autocomplete="current-password" 
                                           aria-required="true" 
                                           placeholder="Please confirm your password."/>
                                <Label for="password-field" class="form-label">Password</Label>
                                <ValidationMessage For="() => Input.Password" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is75">
                            <Row>
                                <Column>
                                    <Button id="toggle-view" Width="Width.Is100" Color="Color.Danger" Clicked="Toggle">Cancel</Button>
                                </Column>
                                <Column>
                                    <Button id="submit-button" Width="Width.Is100" Color="Color.Success" Type="ButtonType.Submit">Confirm changes</Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm] 
    private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Input = new InputModel();
    }
    
    public override async Task OnValidSubmitAsync()
    {
        await base.OnValidSubmitAsync();
        if (DataChangeFunction is null)
        {
            await StatusChangeEvent.InvokeAsync(StatusArguments.BasicStatusArgs);
            return;
        }
        
        await DataChangeFunction.Invoke(new UserDataRecord
        {
            DataType = UserDataType.Username,
            UserName = Input!.Username,
            CurrentPassword = Input.Password
        });
    }

    private sealed class InputModel
    {
        [Required]
        [ValidUsername(ErrorMessage = "Username is invalid. It can only contain letters, numbers, and underscores. There can only be 1 underscore in a row.")]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
    }
}