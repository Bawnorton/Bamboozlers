@inherits TabToggle

<Tabs @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel Name="view">
            <Container>
                <Container Width="Width.Is75">
                    <Div Class="form-floating mb-3">
                        <input type="text" value="*********" class="form-control" disabled/>
                        <Label for="fake-password" class="form-label">Password</Label>
                    </Div>
                </Container>
                <Container Width="Width.Is25">
                    <Button Width="Width.Is100" Color="Color.Primary" Clicked="Toggle">Change password</Button>
                </Container>
            </Container>
        </TabPanel>
        <TabPanel Name="edit">
            <Container>
                <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div Class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password."/>
                                <Label for="old-password" class="form-label">Old password</Label>
                                <ValidationMessage For="() => Input.OldPassword" class="text-danger"/>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
                                <Label for="new-password" class="form-label">New password</Label>
                                <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password."/>
                                <Label for="confirm-password" class="form-label">Confirm password</Label>
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is50">
                            <Row>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Danger" Clicked="Toggle">Cancel</Button>
                                </Column>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Success" Type="ButtonType.Submit">Confirm changes</Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ViewButtonText = "Change Password";
        await base.OnInitializedAsync();
    }
    private async Task OnValidSubmitAsync()
    {
        var model = new UserModel
        {
            Type = DataChangeType.Password,
            Password = Input.OldPassword,
            NewPassword = Input.NewPassword
        };
        await DataChangeCallback.InvokeAsync(model);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}