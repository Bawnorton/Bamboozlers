@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Data.ViewModel
@inherits EditField

@inject ILogger<CompEditAvatar> Logger;

<FigureImage ElementId="avatar-display" Source="@UserDisplayRecord.Avatar"/>
<FigureCaption>
    <FileEdit ElementId="avatar-field" 
              Changed="OnFileUpload" 
              Filter="image/png"/>  
</FigureCaption>

@code
{
    public async Task OnFileUpload(FileChangedEventArgs args)
    {
        if (DataChangeFunction is null)
        {
            await AlertEventCallback.InvokeAsync(AlertArguments.DefaultErrorAlertArgs);
            return;
        }

        IFileEntry? file;
        
        try
        {
            file = args.Files.Single();
        }
        catch (ArgumentNullException)
        {
            
            Logger.LogInformation("User unsuccessfully attempted to change their avatar. No file was uploaded.");
            await AlertEventCallback.InvokeAsync(new AlertArguments(
                Color.Danger,
                true,
                "Unable to change avatar.",
                "No file was uploaded."
            ));
            return;
        }
        catch (InvalidOperationException)
        {
            Logger.LogInformation("User unsuccessfully attempted to change their avatar. More than one file was uploaded.");
            await AlertEventCallback.InvokeAsync(new AlertArguments(
                Color.Danger,
                true,
                "Unable to change avatar.",
                "More than one file was uploaded. Exactly one file must be uploaded."
            ));
            return;
        }
        
        var image = new ArraySegment<byte>(); 
        var success = false;
        using (var stream = new MemoryStream())
        {
            try
            {
                await file.WriteToStreamAsync(stream);
                success = stream.TryGetBuffer(out image);
            }
            catch (Exception exc)
            {
                Logger.LogError(exc.ToString());
            }
        }
        if (success) 
            await ProcessFile(image.ToArray());
    }

    public async Task ProcessFile(byte[] image)
    {
        if (DataChangeFunction is null)
        {
            await AlertEventCallback.InvokeAsync(AlertArguments.DefaultErrorAlertArgs);
            return;
        }
        
        if (image.IsNullOrEmpty())
        {
            Logger.LogInformation("User unsuccessfully attempted to change their avatar. Image produced was null or empty.");
            
            await AlertEventCallback.InvokeAsync(new AlertArguments(
                Color.Danger,
                true,
                "Could not change avatar.",
                "An error was encountered while processing uploaded avatar."
            ));
            return;
        }
        
        var result = await DataChangeFunction.Invoke(new UserDataRecord
        {
            DataType = UserDataType.Visual,
            Avatar = image.ToArray()
        });

        if (result)
        {
            Logger.LogInformation("User changed their avatar successfully.");
            
            await AlertEventCallback.InvokeAsync(new AlertArguments(
                Color.Success,
                true,
                "Success!",
                "Your avatar has been changed."
            ));
        }
    }
}