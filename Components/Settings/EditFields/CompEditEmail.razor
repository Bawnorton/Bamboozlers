@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Data.ViewModel
@inherits TabToggle

<Tabs @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel ElementId="view-panel"
                  Name="view">
            <Container>
                <Container Width="Width.Is75">
                    <Div Class="form-floating mb-3">
                        <input type="text" value="@UserDisplayRecord.Email" 
                               class="form-control" 
                               disabled/>
                        <Label class="form-label">
                            Email
                        </Label>
                    </Div>
                </Container>
                <Container Width="Width.Is25">
                    <Button id="toggle-edit"
                            Width="Width.Is100"
                            Color="Color.Primary"
                            Clicked="Toggle">
                        Change Email
                    </Button>
                </Container>
            </Container>
        </TabPanel>
        <TabPanel ElementId="edit-panel" 
                  Name="edit">
            <Container>
                <EditForm Model="Input" FormName="change-email" 
                          OnValidSubmit="OnValidSubmitAsync" 
                          method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div class="form-floating mb-3">
                                <input id="email" type="text" value="@UserDisplayRecord.Email" class="form-control" disabled/>
                                <Label for="email" class="form-label">Email</Label>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText id="email-field" @bind-Value="Input!.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email."/>
                                <Label for="email-field" class="form-label">New Email</Label>
                                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is50">
                            <Row>
                                <Column>
                                    <Button id="toggle-view"
                                            Width="Width.Is100"
                                            Color="Color.Danger"
                                            Clicked="Toggle">
                                        Cancel
                                    </Button>
                                </Column>
                                <Column>
                                    <Button id="submit-button"
                                            Width="Width.Is100"
                                            Color="Color.Success"
                                            Type="ButtonType.Submit">
                                        Confirm changes
                                    </Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Input = new InputModel();
    }
    
    public override async Task OnValidSubmitAsync()
    {
        await base.OnValidSubmitAsync();
        if (DataChangeFunction is null)
        {
            await AlertEventCallback.InvokeAsync(AlertArguments.DefaultErrorAlertArgs);
            return;
        }
        
        var result = await DataChangeFunction.Invoke(new UserDataRecord 
        { 
            DataType = UserDataType.Email, 
            Email = Input!.NewEmail 
        });
        
        if (result)
            await Toggle();
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New Email")]
        public string? NewEmail { get; set; }
    }
}