@inherits TabToggle

<Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel Name="view">
            <Container>
                <Container Width="Width.Is75">
                    <Div Class="form-floating mb-3">
                        <input type="text" value="@UserDisplayRecord.Email" class="form-control" disabled/>
                        <Label for="email" class="form-label">Email</Label>
                    </Div>
                </Container>
                <Container Width="Width.Is25">
                    <Button Width="Width.Is100" Color="Color.Primary" Clicked="Toggle">Change Email</Button>
                </Container>
            </Container>
        </TabPanel>
        <TabPanel Name="edit">
            <Container>
                <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div class="form-floating mb-3">
                                <input type="text" value="@UserDisplayRecord.Email" class="form-control" disabled/>
                                <Label for="email" class="form-label">Email</Label>
                            </Div>
                            <Div Class="form-floating mb-3">
                                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email."/>
                                <Label for="new-email" class="form-label">New Email</Label>
                                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is50">
                            <Row>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Danger" Clicked="Toggle">Cancel</Button>
                                </Column>
                                <Column>
                                    <Button Width="Width.Is100" Color="Color.Success" Type="ButtonType.Submit">Confirm changes</Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        if (DataChangeFunction is null)
        {
            await StatusChangeEvent.InvokeAsync(StatusArguments.BasicStatusArgs);
            return;
        }
        
        var result = await DataChangeFunction.Invoke(new UserDataRecord 
        { 
            DataType = UserDataType.Email, 
            Email = Input.NewEmail 
        });
        if (result)
            await Toggle();
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}