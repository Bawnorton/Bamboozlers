@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Data.ViewModel
@inherits TabToggle

@inject ILogger<CompEditDisplayName> Logger

<Tabs @bind-SelectedTab="InteractionMode">
    <Content>
        <TabPanel ElementId="view-panel" 
                  Name="view">
            <Row>
                <Column ColumnSize="ColumnSize.Is8">
                    <Div Class="form-floating mb-3">
                        <textarea name="bio" 
                                  type="text" 
                                  class="form-control" 
                                  disabled>
                            @UserDisplayRecord.Bio
                        </textarea>
                        <Label class="form-label">
                            Description
                        </Label>
                    </Div>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Button id="toggle-edit" 
                            Width="Width.Is100" 
                            Color="Color.Primary" 
                            Clicked="Toggle">
                        Change Description
                    </Button>
                </Column>                
            </Row>
        </TabPanel>
        <TabPanel ElementId="edit-panel" 
                  Name="edit">
            <Container>
                <EditForm Model="Input" 
                          OnValidSubmit="OnValidSubmitAsync" 
                          method="post">
                    <DataAnnotationsValidator/>
                    <Container>
                        <Container Width="Width.Is75">
                            <Div Class="form-floating mb-3">
                                <InputTextArea id="bio-field" 
                                               @bind-Value="Input!.Bio" 
                                               class="form-control" 
                                               autocomplete="new-username" 
                                               aria-required="true" 
                                               placeholder="Please enter new display name."/>
                                <Label for="bio-field"
                                       class="form-label">
                                    New Description (@($"{Input.Bio.Length}/{MaxLength}"))
                                </Label>
                                <ValidationMessage For="() => Input.Bio" class="text-danger"/>
                            </Div>
                        </Container>
                        <Container Width="Width.Is75">
                            <Row>
                                <Column>
                                    <Button id="toggle-view"
                                            Width="Width.Is100"
                                            Color="Color.Danger"
                                            Clicked="Toggle">
                                        Cancel
                                    </Button>
                                </Column>
                                <Column>
                                    <Button id="submit-button"
                                            Width="Width.Is100"
                                            Color="Color.Success"
                                            Type="ButtonType.Submit">
                                        Confirm changes
                                    </Button>
                                </Column>
                            </Row>
                        </Container>
                    </Container>
                </EditForm>
            </Container>
        </TabPanel>
    </Content>
</Tabs>

@code {
    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    private static readonly int MaxLength = 1000;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Input = new InputModel();
    }
    
    public override async Task OnValidSubmitAsync()
    {
        await base.OnValidSubmitAsync();
        if (DataChangeFunction is null)
        {
            await AlertEventCallback.InvokeAsync(AlertArguments.DefaultErrorAlertArgs);
            return;
        }
        
        var result = await DataChangeFunction.Invoke(new UserDataRecord
        {
            DataType = UserDataType.Visual,
            Bio = Input!.Bio
        });

        if (result)
        {
            Logger.LogInformation("User changed their biography successfully.");

            await AlertEventCallback.InvokeAsync(new AlertArguments(
                Color.Primary,
                true,
                "Success!",
                "Your description has been changed."
            ));

            await Toggle();
        }
    }
    
    private sealed class InputModel
    {
        [DataType(DataType.Text)]
        [StringLength(1000, ErrorMessage = "Description must be less than 180 characters.")]
        [Display(Name = "Description")]
        public string Bio { get; set; } = "";
    }
}
