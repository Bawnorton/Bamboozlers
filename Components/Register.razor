@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components

<Tabs SelectedTab=@DetermineStage()>
    <Content>
        <TabPanel Name="validation">
            <Validations @ref="_fieldValidations"
                         Mode="ValidationMode.Manual" 
                         Model="@_userModel">
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">
                            Username
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit @bind-Text="@_userModel.Username" 
                                      Placeholder="Create a username">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">
                            Display Name (Optional)
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit @bind-Text="@_userModel.DisplayName" 
                                      Placeholder="Create a display name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">
                            Email Address
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit Role="TextRole.Email" 
                                      InputMode="TextInputMode.Email" 
                                      @bind-Text="@_userModel.EmailAddress" 
                                      Placeholder="Your email address">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            
                <Validation>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">
                            Password
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit Role="TextRole.Password" 
                                      @bind-Text="@_userModel.Password" 
                                      Placeholder="Create a password">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is3">
                        </FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit Role="TextRole.Password"
                                      @bind-Text="@_userModel.RepeatPassword" 
                                      Placeholder="Re-enter password">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                
                <Alert @bind-Visible="@AlertVisible"
                       Color = "@AlertColor">
                    <AlertMessage>@AlertMessage</AlertMessage>
                    <AlertDescription>@AlertDescription</AlertDescription>
                </Alert>
            </Validations>
            <Button Color="Color.Primary" 
                    Clicked="@ConfirmRegistration">
               Sign Up
            </Button>
            <Button Color="Color.Secondary" 
                   Clicked="@_userModel.ClearAllFields">
               Clear fields
            </Button>
        </TabPanel>
        
        <TabPanel Name="confirmation">
            <Alert Color="Color.Secondary" Visible>
                <AlertMessage>
                    Do not navigate away from this page.
                </AlertMessage>
                <AlertDescription>
                    Leaving this page will cancel registration.
                </AlertDescription>
            </Alert>
            <br/>
            <Validations @ref="_emailValidation"
                         Mode="ValidationMode.Manual">
                <Validation Validator="@ValidateEmailCode">
                    <FieldLabel>
                        Enter the 6-digit verification code sent to your email address.
                    </FieldLabel>
                    <Field>
                        <FieldBody>
                            <TextEdit MaxLength="6">
                                <Feedback>
                                    <ValidationError>
                                        Incorrect code.
                                    </ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
            <Button Color="Color.Primary"
                    Clicked="@ConfirmEmailCode">
                Confirm
            </Button>
        </TabPanel>
    </Content>
</Tabs>

@code {
    private Validations _fieldValidations;
    private Validations _emailValidation;
    private UserModel _userModel = new();

    private string AlertMessage { get; set; } = "";
    private Color AlertColor { get; set; } = Color.Secondary;
    private string AlertDescription { get; set; } = "";
    private bool AlertVisible { get; set; } = false;

    private bool _confirmingEmailCode = false;
    
    async Task ConfirmRegistration()
    {
        if (await _fieldValidations.ValidateAll()) 
        {
            /*
                 * check for email in database, if there is a match, failure
                 * check for username in database, if there is a match, failure
                 * 
                 * set AlertVariables accordingly
                 * if neither of these cases:
                 *      1) send confirmation email with 6-character randomly generated code to user
                 *      2) display entry for code instead of fields, await input
            */
        }
    }

    async Task ConfirmEmailCode()
    {
        // checks whether the code is valid
        if (await _emailValidation.ValidateAll()) 
        {
            /*
                * once successfully passed use inputted details (stored in _userModel) to create a new user in the db
                * automatically log the user in and redirect to the landing view/page
            */
        }
    }

    private void ValidateEmailCode(ValidatorEventArgs e)
    {
        /*
         * evaluate input against the code sent to the user
         */
        e.Status = ValidationStatus.Error;
    }

    private string DetermineStage()
    {
        return (_confirmingEmailCode ? "confirmation" : "validation");
    }

    public class UserModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(16, ErrorMessage = "Username is too long.")]
        [RegularExpression("^(?:_?[a-zA-Z0-9]+)*_?$", ErrorMessage = "Username contains disallowed characters.")]
        public string Username { get; set; }

        [StringLength(16, ErrorMessage = "Display name is too long.")]
        [RegularExpression("^(?:_?[a-zA-Z0-9]+)*_?$", ErrorMessage = "Display name contains disallowed characters.")]
        public string DisplayName { get; set; }

        [Required(ErrorMessage = "Email address is required.")]
        [EmailAddress(ErrorMessage = "Email is invalid.")]
        public string EmailAddress { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        [StringLength(int.MaxValue, MinimumLength = 5, ErrorMessage = "Password must be at least 5 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Re-entered password is required.")]
        [DataType(DataType.Password)]
        [StringLength(int.MaxValue, MinimumLength = 5, ErrorMessage = "Password must be at least 5 characters.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string RepeatPassword { get; set; }

        public void ClearAllFields()
        {
            Username = "";
            DisplayName = "";
            EmailAddress = "";
            Password = "";
            RepeatPassword = "";
        }
    }

}