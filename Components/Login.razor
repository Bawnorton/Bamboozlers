<Validations @ref="validations" Mode="ValidationMode.Manual">
    <Validation Validator="@ValidatePrimary">
        <Field Horizontal>
            <FieldLabel>
                Username or Email Address
            </FieldLabel>
            <FieldBody>
                <TextEdit Text="@primary"
                          TextChanged="@OnPrimaryChanged"
                          Placeholder="Enter Username or Email Address">
                    <Feedback>
                        <ValidationError/>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    
    <Validation Validator="@ValidatePassword">
        <Field Horizontal>
            <FieldLabel>
                Password
            </FieldLabel>
            <FieldBody>
                <TextEdit Text="@password"
                          TextChanged="@OnPasswordChanged"
                          Role="TextRole.Password"
                          Placeholder="Enter Password">
                    <Feedback>
                        <ValidationError/>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    
    <Button ElementId="ConfirmButton"
            Color="Color.Primary"
            Loading="@validating"
            Clicked="@ValidateLogin">
        @confirmButtonText
    </Button>
</Validations>

@code {
    private Validations validations;
    private bool validating;
    
    private string primary { get; set; }
    private string password { get; set; }
    private string confirmButtonText = " Log In";

    private Task OnPrimaryChanged(string value)
    {
        primary = value;
        return Task.CompletedTask;
    }

    private Task OnPasswordChanged(string value)
    {
        password = value;
        return Task.CompletedTask;
    }

    private void ValidatePrimary(ValidatorEventArgs e)
    {
        /*
         * if primary is empty return error,
         * if primary is an email then check for email in db,
         *      if there is no match, return error. otherwise, return success.
         * if primary is a username then check for username in db,
         *      if there is no match, return error. otherwise, return success.
         *
         * set errortext accordingly
         * e.ErrorText = "this is an error text";
         */
        e.Status = ValidationStatus.None;
    }

    private void ValidatePassword(ValidatorEventArgs e)
    {
        /*
         * if primary or password is empty return error,
         * if primary is an email then check password corresponding to email in db against input,
         *      if it does not match, return error. otherwise, return success.
         * if primary is a username then check password corresponding to username in db against input
         *      if it does not match, return error. otherwise, return success.
         *
         * set errortext accordingly
         * e.ErrorText = "this is an error text";
         */
        e.Status = ValidationStatus.None;
    }
    
    private async Task ValidateLogin()
    {
        validating = true;
        confirmButtonText = " Logging In...";
        if (await validations.ValidateAll())
        {
            // if validations pass, initiate log in and redirect to the landing view/page!
        }
        else
        {
            await Task.Delay(TimeSpan.FromSeconds(3));
            validating = false;
            confirmButtonText = " Log In";
        }
    }

}