@page "/"

@rendermode InteractiveServer

@inherits LayoutComponentBase

@using Bamboozlers.Components.Settings
@using Bamboozlers.Classes.Data
@using Bamboozlers.Components.Chat
@using Microsoft.AspNetCore.Authorization
@using Bamboozlers.Classes.AppDbContext

@attribute [Authorize]

<PageTitle>Bamboozlers</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <AuthorizeView>
            <!-- IMPORTANT: This allows child components to create Popups! 
                 Declare a [CascadingParameter] of type EventCallback<PopupCallbackArgs> in a component to use this!
                 
                 Allows for dynamic creation of popups without using Blazorise ModalProvider/Service, which isn't
                 very cooperative!
            -->
            <CascadingValue Value="_openPopupCallback">
                <CascadingValue Value="_closePopupCallback">
                    <CascadingValue Value="_openChatCallback">
                        <NetworkHub>
                            <NavLayout @ref="_navLayout"/>
                            <Modal @ref="_popupComponent" Closed="OnPopupClosed">
                                @_popupContent
                            </Modal>
                        </NetworkHub>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </AuthorizeView>
    </ChildContent>
    <ErrorContent Context="exception">
        <Layout>
            <LayoutHeader Padding="Padding.Is3"
                          TextSize="TextSize.Heading1"
                          TextColor="TextColor.Danger"
                          Background="Background.Dark">
                Bamboozlers
            </LayoutHeader>
            <LayoutContent Padding="Padding.Is3"
                           Background="Background.Primary"
                           TextColor="TextColor.White">
                <Div Class="h-100 d-flex justify-content-center align-items-center">
                    <Div Class="rounded-3 border-3 border-warning text-warning p-5 fa-2x"
                         Background="Background.Dark">
                        <p>Oops! Something went wrong.</p>
                        <p>@exception.Message</p>
                    </Div>
                </Div>
            </LayoutContent>
        </Layout>
    </ErrorContent>
</ErrorBoundary>

@code {
    private NavLayout? _navLayout;

    private EventCallback<PopupCallbackArgs> _openPopupCallback;
    private EventCallback _closePopupCallback;
    private EventCallback<Chat> _openChatCallback;

    private Modal? _popupComponent;
    private RenderFragment? _popupContent;

    protected override void OnInitialized()
    {
        _openPopupCallback = EventCallback.Factory.Create<PopupCallbackArgs>(this, OpenPopup);
        _closePopupCallback = EventCallback.Factory.Create(this, ClosePopup);
        _openChatCallback = EventCallback.Factory.Create<Chat>(this, OpenChat);
    }

    private async Task OpenPopup(PopupCallbackArgs args)
    {
        if (_popupComponent is null)
            return;

        _popupContent = args.PopupType switch
        {
            RecognizedPopupType.Settings => @<text>
                                                 <CompSettings StateChangedCallback="@(async () => await _navLayout!.Refresh())"/>
                                             </text>,
            RecognizedPopupType.Profile => @<text>
                                                <CompProfileView FocusUser="UserRecord.From(args.FocusUser!)"/>
                                            </text>,
            RecognizedPopupType.GroupChatSettings => @<text>
                                                          <CompChatSettings ChatID="@args.ChatId"/>
                                                      </text>,
            RecognizedPopupType.ChatAddMember => @<text>
                                                      <CompAddMember ChatID="@args.ChatId"/>
                                                  </text>,
            RecognizedPopupType.Pins => @<text>
                                             <CompPinsView ChatID="@args.ChatId" IsMod="@((bool)args.IsModInChat!)" OnMessageJump="@(async message => { await args.OnClose?.Invoke(message)!; await ClosePopup(); })"/>
                                         </text>,
            _ => @<text>
                      <ModalContent Size="args.Size" Centered>
                          <ModalHeader>
                              @if (args.HeaderContent is not null)
                              {
                                  @args.HeaderContent
                              }
                              <CloseButton/>
                          </ModalHeader>
                          <ModalBody>
                              @if (args.BodyContent is not null)
                              {
                                  @args.BodyContent
                              }
                          </ModalBody>
                          <ModalFooter>
                              @if (args.FooterContent is not null)
                              {
                                  @args.FooterContent
                              }
                          </ModalFooter>
                      </ModalContent>
                  </text>
        };

        await _popupComponent.Show();
    }
    
    private Task OpenChat(Chat arg)
    {
        _navLayout?.OpenChat(arg);
        return Task.CompletedTask;
    }

    private async Task ClosePopup()
    {
        if (_popupComponent is null)
            return;
        await _popupComponent.Hide();
    }

    private void OnPopupClosed()
    {
        if (_popupComponent is null)
            return;
        _popupContent = null;
    }

}