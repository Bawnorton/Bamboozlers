@page "/"

@rendermode InteractiveServer

@inherits LayoutComponentBase

@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Func
@using Bamboozlers.Components.Hubs
@using Bamboozlers.Components.Interaction
@using Bamboozlers.Components.Settings
@using Bamboozlers.Components.Group.Settings
@using Bamboozlers.Components.Group
@using Microsoft.AspNetCore.Authorization
@using Bamboozlers.Components.Chat


@attribute [Authorize]

<PageTitle>Bamboozlers</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <AuthorizeView>
            <!-- IMPORTANT: This allows child components to create Popups! 
                 Declare a [CascadingParameter] of type EventCallback<PopupCallbackArgs> in a component to use this!
                 
                 Allows for dynamic creation of popups without using Blazorise ModalProvider/Service, which isn't
                 very cooperative!
            -->
            <CascadingValue Value="OpenAlertPopup">
                <CascadingValue Value="OpenNewPopup">
                    <CascadingValue Value="OpenKnownPopup">
                        <CascadingValue Value="DismissPopup">
                            <CascadingValue Value="OpenChatCallback">
                                <KeyPressHub>
                                    <NetworkHub>
                                        <NavLayout @ref="_navLayout"/>
                                        <Modal @ref="ModalRef" Closed="@(() => CurrentPopup = null)">
                                            @CurrentPopup
                                        </Modal>
                                        <Modal @ref="AlertModalRef" Closed="@(() => AlertPopup = null)">
                                            @AlertPopup
                                        </Modal>
                                    </NetworkHub>
                                </KeyPressHub>
                                <NavLayout @ref="_navLayout"/>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </AuthorizeView>
    </ChildContent>
    <ErrorContent Context="exception">
        <Layout>
            <LayoutHeader Padding="Padding.Is3"
                          TextSize="TextSize.Heading1"
                          TextColor="TextColor.Danger"
                          Background="Background.Dark">
                Bamboozlers
            </LayoutHeader>
            <LayoutContent Padding="Padding.Is3"
                           Background="Background.Primary"
                           TextColor="TextColor.White">
                <Div Class="h-100 d-flex justify-content-center align-items-center">
                    <Div Class="rounded-3 border-3 border-warning text-warning p-5 fa-2x"
                         Background="Background.Dark">
                        <p>Oops! Something went wrong.</p>
                        <p>@exception.Message</p>
                    </Div>
                </Div>
            </LayoutContent>
        </Layout>
    </ErrorContent>
</ErrorBoundary>

@code {
    private NavLayout? _navLayout;

    private EventCallback<NewPopupArgs> OpenNewPopup { get; set; }
    private EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }
    private EventCallback<AlertPopupArgs> OpenAlertPopup { get; set; }
    private EventCallback DismissPopup { get; set; }
    private EventCallback<OpenChatArgs> OpenChatCallback { get; set; }

    protected override void OnInitialized()
    {
        OpenKnownPopup = EventCallback.Factory.Create<KnownPopupArgs>(this,
            async args => await CreateKnownPopup(args.Type, args.FocusUser, args.ChatId, args.OnClose)
        );

        OpenAlertPopup = EventCallback.Factory.Create<AlertPopupArgs>(this,
            async args => await CreateAlertPopup(args.AlertBody, args.OnConfirmCallback)
        );

        OpenNewPopup = EventCallback.Factory.Create<NewPopupArgs>(this,
            async args => await CreateNewPopup(args.Body, args.Header, args.Footer)
        );

        DismissPopup = EventCallback.Factory.Create(this, async _ => await ClosePopup());

        OpenChatCallback = EventCallback.Factory.Create<OpenChatArgs>(this, async args =>
        {
            switch (args.ChatType)
            {
                case ChatType.Dm:
                    await _navLayout!.OpenDm(-1, args.Id, true);
                    break;
                case ChatType.Group:
                    await _navLayout!.OpenGroup(args.Id, true);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        });
    }

    private Modal ModalRef { get; set; } = default!;
    private RenderFragment? CurrentPopup { get; set; }

    private Modal AlertModalRef { get; set; } = default!;
    private RenderFragment? AlertPopup { get; set; }

    private async Task CreateKnownPopup(PopupType type, User? focusUser = null, int? chatId = null, AsyncConsumer<object?>? onClose = null)
    {
        CurrentPopup = type switch
        {
            PopupType.Settings => @<text>
                                       <CompSettings/>
                                   </text>,
            PopupType.UserProfile => @<text>
                                          <CompProfileView FocusUser="@UserRecord.From(focusUser!)"/>
                                      </text>,
            PopupType.GroupChatSettings => @<text>
                                                <CompGroupSettings ChatID="@chatId"/>
                                            </text>,
            PopupType.InviteGroupMembers => @<text>
                                                 <CompAddMember ChatID="@chatId"/>
                                             </text>,
            PopupType.CreateGroup => @<text>
                                          <CompCreateGroup/>
                                      </text>,
            PopupType.FriendList => @<text>
                                         <ModalContent Centered>
                                             <Container Margin="Margin.Is2">
                                                 <CompFriendList IsPopup="@true"/>
                                             </Container>
                                         </ModalContent>
                                     </text>,
            PopupType.FindFriends => @<text>
                                          <CompAddFriend/>
                                      </text>,
            PopupType.Pins => @<text>
                                   <CompPinsView ChatID="@chatId" FocusUser="@UserRecord.From(focusUser!)" OnMessageJump="@(async message => { await onClose?.Invoke(message)!; await ClosePopup(); })"/>
                               </text>,
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, $"Cannot create popup of type {type}")
        };
        await ModalRef.Show();
    }

    private async Task CreateNewPopup(RenderFragment bodyContent, RenderFragment? headerContent = null, RenderFragment? footerContent = null)
    {
        CurrentPopup = @<text>
                            <ModalContent>
                                @if (headerContent is not null)
                                {
                                    <ModalHeader>
                                        @headerContent
                                    </ModalHeader>
                                }
                                <ModalBody>
                                    @bodyContent
                                </ModalBody>
                                @if (footerContent is not null)
                                {
                                    <ModalFooter TextAlignment="TextAlignment.Center">
                                        @footerContent
                                    </ModalFooter>
                                }
                            </ModalContent>
                        </text>;
        await ModalRef.Show();
    }

    private async Task CreateAlertPopup(RenderFragment bodyAlert, EventCallback onConfirm)
    {
        AlertPopup = @<text>
                          <ModalContent Centered>
                              <ModalHeader>
                                  <Heading>Are you sure?</Heading>
                              </ModalHeader>
                              <ModalBody>
                                  @bodyAlert
                              </ModalBody>
                              <ModalFooter TextAlignment="TextAlignment.Center">
                                  <Button Color="Color.Danger" Clicked="@(async () => { await ClosePopup(); })">
                                      <Icon Name="IconName.Ban"/>
                                      Cancel
                                  </Button>
                                  <Button Color="Color.Success" Clicked="@(async () => { await onConfirm.InvokeAsync(); await ClosePopup(); })">
                                      <Icon Name="IconName.Check"/>
                                      Confirm
                                  </Button>
                              </ModalFooter>
                          </ModalContent>
                      </text>;
        await AlertModalRef.Show();
    }
    
    private async Task ClosePopup()
    {
        if (AlertPopup is not null)
        {
            await AlertModalRef.Hide();
            return;
        }

        await ModalRef.Hide();
    }

}