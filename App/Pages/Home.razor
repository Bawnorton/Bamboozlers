@page "/"

@rendermode InteractiveServer

@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Authorization
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Components.Utility

@attribute [Authorize]

<PageTitle>Bamboozlers</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <AuthorizeView>
            <!-- IMPORTANT: This allows child components to create Popups! 
                 Declare a [CascadingParameter] of type PopupHandler in a component to use this!
                 
                 Allows for dynamic creation of popups without using Blazorise ModalProvider/Service, which isn't
                 very cooperative!
            -->
            <PopupHandler @ref="PopupHandler"/>
            <CascadingValue Value="@PopupHandler">
                <CascadingValue Value="OpenChatCallback">
                    <NavLayout @ref="_navLayout"/>
                </CascadingValue>
            </CascadingValue>
        </AuthorizeView>
    </ChildContent>
    <ErrorContent Context="exception">
        <Layout>
            <LayoutHeader Padding="Padding.Is3"
                          TextSize="TextSize.Heading1"
                          TextColor="TextColor.Danger"
                          Background="Background.Dark">
                Bamboozlers
            </LayoutHeader>
            <LayoutContent Padding="Padding.Is3"
                           Background="Background.Primary"
                           TextColor="TextColor.White">
                <Div Class="h-100 d-flex justify-content-center align-items-center">
                    <Div Class="rounded-3 border-3 border-warning text-warning p-5 fa-2x" 
                         Background="Background.Dark">
                        <p>Oops! Something went wrong.</p>
                        <p>@exception.Message</p>
                    </Div>
                </Div>
            </LayoutContent>
        </Layout>
    </ErrorContent>
</ErrorBoundary>

@code {
    private NavLayout? _navLayout;
    
    private PopupHandler PopupHandler { get; set; } = default!;
    private EventCallback<OpenChatArgs> OpenChatCallback { get; set; }
    
    protected override void OnInitialized()
    {
        OpenChatCallback = EventCallback.Factory.Create<OpenChatArgs>(this, async args =>
        {
            switch (args.ChatType)
            {
                case ChatType.Dm:
                    await _navLayout!.OpenDm(-1, args.Id, true);
                    break;
                case ChatType.Group:
                    await _navLayout!.OpenGroup(args.Id, true);
                    break;
            }
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
        }
    }

    public List<ISubscriber> Subscribers { get; } = [];

    public bool AddSubscriber(ISubscriber subscriber)
    {
        if (Subscribers.Contains(subscriber)) return false;
        Subscribers.Add(subscriber);
        return true;
    }
}
