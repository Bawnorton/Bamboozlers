@page "/"

@rendermode InteractiveServer

@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Authorization
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Interop
@using Bamboozlers.Classes.Services.Authentication
@using Bamboozlers.Components.Settings
@using IMessageService = Bamboozlers.Classes.Services.IMessageService
@using System.Runtime.CompilerServices

@inject IDbContextFactory<AppDbContext> Db
@inject IMessageService MessageService;
@inject IJSRuntime JsRuntime;

@attribute [Authorize]

<PageTitle>Bamboozlers</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <AuthorizeView>
            <!-- IMPORTANT: This allows child components to create Popups! 
                 Declare a [CascadingParameter] of type EventCallback<PopupCallbackArgs> in a component to use this!
                 
                 Allows for dynamic creation of popups without using Blazorise ModalProvider/Service, which isn't
                 very cooperative!
            -->
            <CascadingValue Value="_popupCallback">
                <NavLayout @ref="_navLayout"/>
                <Modal @ref="_popupComponent" Closed="OnPopupClosed">
                    @_popupContent
                </Modal>
            </CascadingValue>
        </AuthorizeView>
    </ChildContent>
    <ErrorContent Context="exception">
        <Layout>
            <LayoutHeader Padding="Padding.Is3"
                          TextSize="TextSize.Heading1"
                          TextColor="TextColor.Danger"
                          Background="Background.Dark">
                Bamboozlers
            </LayoutHeader>
            <LayoutContent Padding="Padding.Is3"
                           Background="Background.Primary"
                           TextColor="TextColor.White">
                <Div Class="h-100 d-flex justify-content-center align-items-center">
                    <Div Class="rounded-3 border-3 border-warning text-warning p-5 fa-2x" 
                         Background="Background.Dark">
                        <p>Oops! Something went wrong.</p>
                        <p>@exception.Message</p>
                    </Div>
                </Div>
            </LayoutContent>
        </Layout>
    </ErrorContent>
</ErrorBoundary>

@code {
    private NavLayout? _navLayout;

    private EventCallback<PopupCallbackArgs> _popupCallback;
    private Modal? _popupComponent;
    private RenderFragment? _popupContent;
    
    protected override void OnInitialized()
    {
        _popupCallback = EventCallback.Factory.Create<PopupCallbackArgs>(this, OpenPopup);
        MessageService.Init(Db);
        JsInteropHelper.Init(JsRuntime);
    }
    
    private async Task OpenPopup(PopupCallbackArgs args)
    {
        if (_popupComponent is null)
            return;

        _popupContent = args.PopupType switch
        {
            RecognizedPopupType.Settings => @<text>
                                                 <CompSettings StateChangedCallback="@(async () => await _navLayout!.Refresh())"/>
                                             </text>,
            RecognizedPopupType.Profile => @<text>
                                                <ModalContent Centered>
                                                    <ModalBody>
                                                        @args.BodyContent
                                                    </ModalBody>
                                                </ModalContent>
                                            </text>,
            _ => @<text>
                      <ModalContent Size="args.Size" Centered>
                          <ModalHeader>
                              @if (args.HeaderContent is not null)
                              {
                                  @args.HeaderContent
                              }
                              <CloseButton/>
                          </ModalHeader>
                          <ModalBody>
                              @if (args.BodyContent is not null)
                              {
                                  @args.BodyContent
                              }
                          </ModalBody>
                          <ModalFooter>
                              @if (args.FooterContent is not null)
                              {
                                  @args.FooterContent
                              }
                          </ModalFooter>
                      </ModalContent>
                  </text>,
        };

        await _popupComponent.Show();
    }

    private void OnPopupClosed()
    {
        if (_popupComponent is null)
            return;
        
        _popupComponent.Hide();
        _popupContent = null;
    }
}