@rendermode InteractiveServer

@inherits UserViewComponentBase;

@implements IGroupSubscriber
@implements IInteractionSubscriber
@implements IAsyncPacketSubscriber

@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Func
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Serverbound.Chat
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Networking.Packets.Clientbound.Messaging
@using Bamboozlers.Components.MainVisual
@using Bamboozlers.Components.Chat

@inject IDbContextFactory<AppDbContext> Db
@inject IUserGroupService UserGroupService;
@inject IUserInteractionService UserInteractionService;
@inject ILogger<NavLayout> Logger

@if (Loaded)
{
    <Layout Sider>
        <LayoutSider>
            <LayoutSiderContent>
                <Div Background="Background.Secondary"
                     Padding="Padding.Is3"
                     TextSize="TextSize.Heading5">
                    <Image Class="_32x32 fit" Source="favicon.png" alt=""/>
                    <Text>Bamboozlers</Text>
                </Div>
                <Bar Mode="BarMode.VerticalInline"
                     CollapseMode="BarCollapseMode.Hide"
                     ThemeContrast="ThemeContrast.Dark"
                     Class="scrollbar-container">
                    <BarMenu>
                        <BarItem>
                            <BarLink ElementId="home" @onclick="MoveToHome">
                                <BarIcon Class="fa-home"></BarIcon>
                                Home
                            </BarLink>
                        </BarItem>
                        <Divider Margin="Margin.Is0"/>
                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle>
                                    <BarIcon IconName="Icons.User"></BarIcon>
                                    Direct Messages
                                </BarDropdownToggle>
                                <BarDropdownMenu ElementId="dms_dropdown">
                                    <BarLink ElementId="create_dm" @onclick="@(async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.FriendList)))">
                                        <BarIcon IconName="Icons.Envelope"></BarIcon>
                                        Open Direct Message
                                    </BarLink>
                                    <Divider Margin="Margin.Is0"/>
                                    @if (DmChats.Count > 0)
                                    {
                                        foreach (var chat in DmChats)
                                        {
                                            <BarItem @key=chat.User>
                                                <BarLink Style="display: flex; flex-direction: row; align-items: center" Class="dm-entry" ElementId="@("user_" + chat.User.Id)" @onclick="async () => await OpenDm(chat.ID)">
                                                    <Image Source="@chat.User.GetAvatar()" Class="message-avatar" alt=""/>
                                                    <Div Class="clipping-text">
                                                        @chat.User.GetName()
                                                    </Div>
                                                    @GetNotificationsForChat(chat.ID)
                                                </BarLink>
                                            </BarItem>
                                        }
                                    }
                                    else
                                    {
                                        <BarItem>
                                            <BarLabel>
                                                <i>No direct messages</i>
                                            </BarLabel>
                                        </BarItem>
                                    }
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                        <Divider Margin="Margin.Is0"/>
                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle>
                                    <BarIcon IconName="Icons.Users"></BarIcon>
                                    Group Chats
                                </BarDropdownToggle>
                                <BarDropdownMenu ElementId="groups_dropdown">
                                    <BarItem>
                                        <BarLink ElementId="create_group" @onclick="@(async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.CreateGroup)))">
                                            <BarIcon IconName="Icons.UserPlus"></BarIcon>
                                            Create Group Chat
                                        </BarLink>
                                    </BarItem>
                                    <Divider Margin="Margin.Is0"/>
                                    @if (GroupChats.Count > 0)
                                    {
                                        foreach (var chat in GroupChats)
                                        {
                                            <BarItem @key=chat>
                                                <BarLink Style="display: flex; flex-direction: row; align-items: center" ElementId="@("group_" + chat.ID)" @onclick="@(async () => await OpenGroup(chat.ID))">
                                                    <Image Source="@chat.GetGroupAvatar()" Class="message-avatar" alt=""/>
                                                    <Div Class="clipping-text">
                                                        @chat.GetGroupName()
                                                    </Div>
                                                    @GetNotificationsForChat(chat.ID)
                                                </BarLink>
                                            </BarItem>
                                        }
                                    }
                                    else
                                    {
                                        <BarItem>
                                            <BarLabel>
                                                <i>No group chats</i>
                                            </BarLabel>
                                        </BarItem>
                                    }
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                    </BarMenu>
                </Bar>
                <Div Padding="Padding.Is3"
                     TextSize="TextSize.Heading5"
                     Class="sidebar-footer align-items-center d-inline-flex justify-content-between w-100"
                     id="profile-button"
                     @onclick="async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.Settings))">
                    <Div Class="clipping-text" Style="max-width: 150px">
                        @(Self is null ? UserRecord.Default.UserName : Self.GetName())
                    </Div>
                    @if (Self?.Avatar is not null)
                    {
                        <Image Source="@Self.GetAvatar()" Class="message-avatar" alt=""/>
                    }
                    else
                    {
                        <Icon Name="Icons.User" IconSize="IconSize.Large"></Icon>
                    }
                </Div>
            </LayoutSiderContent>
        </LayoutSider>
        @if (CurrentView == View.Home)
        {
            <CompMainView/>
        }
        else
        {
            <CompChatView ChatID="@CurrentChatId" GoToHome="MoveToHome" @key="CurrentChatId"/>
        }
    </Layout>
}

@code {
    [CascadingParameter] public EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }
    [CascadingParameter] public EventCallback<IPacket> SendToServer { get; set; }
    
    [CascadingParameter] public Register<IAsyncPacketSubscriber> AddPacketSubscriber { get; set; } = default!;
    [CascadingParameter(Name = "URPacketSubscribers")] public Unregister<Type[]> UnregisterPacketSubscribers { get; set; } = default!;
    [CascadingParameter(Name = "URKeyPressSubscribers")] public Unregister<Type[]> UnregisterKeyPressSubscribers { get; set; } = default!;

    private List<DmChat> DmChats { get; set; } = [];
    private List<GroupChat> GroupChats { get; set; } = [];
    private View CurrentView { get; set; } = View.Home;
    private int CurrentChatId { get; set; } = -1;
    private int FriendCount { get; set; } = 0;

    private bool Loaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        UserService.AddSubscriber(this);
        UserGroupService.AddSubscriber(this);
        UserInteractionService.AddSubscriber(this);
        AddPacketSubscriber.Invoke(this);
        await Refresh();

        Loaded = true;
    }

    public async Task Refresh()
    {
        await GetDataAsync();
        MoveToHome();
    }

    private async Task GetDataAsync()
    {
        await GetUserData();

        if (Self is null)
            return;

        GetGroupData();
        GetDmData();
        await GetFriendData();
    }

    private async Task GetUserData()
    {
        Self = await AuthService.GetUser(query =>
            query
                .Include(u => u.Chats)
                .ThenInclude(c => c.Users)
        );
    }

    public void GetGroupData()
    {
        if (Self?.Chats is null) throw new InvalidOperationException("User and/or chats were not found.");
        
        GroupChats = Self.Chats.OfType<GroupChat>().ToList();
        WatchedIDs = GroupChats.Select(s => (int?) s.ID).ToList();

        if (CurrentView != View.Group || GroupChats.FirstOrDefault(gc => gc.ID == CurrentChatId) is not null) return;

        MoveToHome();
    }

    public void GetDmData()
    {
        if (Self is null) throw new InvalidOperationException("User and/or chats were not found.");

        DmChats.Clear();
        var dms = Self.Chats.Except(Self.Chats.OfType<GroupChat>()).ToList();
        foreach (var dm in dms)
        {
            var otherUser = dm.Users.First(u => u.Id != Self.Id);
            DmChats.Add(new DmChat(dm.ID, otherUser, otherUser.Avatar));
        }

        if (CurrentView != View.Dm || DmChats.FirstOrDefault(dm => dm.ID == CurrentChatId) is not null) return;

        MoveToHome();
    }

    private void MoveToHome()
    {
        CurrentView = View.Home;
        CurrentChatId = -1;

        UnregisterPacketSubscribers.Invoke([
            typeof(CompChatView),
            typeof(CompMessageReplyView),
            typeof(CompTypingView),
            typeof(CompPinsView)
        ]);
        UnregisterKeyPressSubscribers.Invoke([
            typeof(CompChatView),
            typeof(CompMessageReplyView),
            typeof(CompTypingView)
        ]);
    }

    public async Task GetFriendData()
    {
        if (Self is null)
            throw new InvalidOperationException("User and/or chats were not found.");

        await using var db = await Db.CreateDbContextAsync();
        FriendCount = 0;
        var friendships = db.FriendShips.Include(f => f.User1).Include(f => f.User2);
        foreach (var friendship in friendships)
        {
            if (friendship.User1ID == Self.Id || friendship.User2ID == Self.Id)
            {
                FriendCount++;
            }
        }
    }

    private async Task JoinChat()
    {
        var joinChat = new JoinChatC2SPacket
        {
            SenderId = Self!.Id,
            ChatId = CurrentChatId
        };
        await SendToServer.InvokeAsync(joinChat);
    }

    private async Task LeaveChat()
    {
        UnregisterPacketSubscribers.Invoke([
            typeof(CompChatView),
            typeof(CompMessageReplyView),
            typeof(CompTypingView),
            typeof(CompPinsView)
        ]);
        UnregisterKeyPressSubscribers.Invoke([
            typeof(CompChatView),
            typeof(CompMessageReplyView),
            typeof(CompTypingView)
        ]);
        var leaveChat = new LeaveChatC2SPacket
        {
            SenderId = Self!.Id,
            ChatId = CurrentChatId
        };
        await SendToServer.InvokeAsync(leaveChat);
    }

    private RenderFragment? GetNotificationsForChat(int chatId)
    {
        if (Self is null) return null;

        using var dbContext = Db.CreateDbContext();
        var chatUser = dbContext.ChatUsers.FirstOrDefault(cu =>
            cu.ChatId == chatId && cu.UserId == Self.Id
        );

        if (chatUser is null) return null;
        var msgCount = dbContext.Messages.Where(m =>
                m.ChatID == chatId && m.SenderID != Self.Id && m.SentAt > chatUser.LastAccess)
            .ToList()
            .Count;

        return msgCount switch
        {
            <= 0 => null,
            > 9 => @<text><Badge Style="margin-left: auto" Color="Color.Danger">9+</Badge></text>,
            _ => @<text><Badge Style="margin-left: auto" Color="Color.Danger">@msgCount</Badge></text>
        };
    }

    public async Task OpenDm(int chatId = -1, int? otherId = null, bool reload = false)
    {
        if (reload)
        {
            await GetUserData();
            GetDmData();
        }

        if (chatId == -1)
        {
            if (otherId is null) return;
            
            var dm = await UserInteractionService.FindDm(otherId);
            if (dm is null)
            {
                dm = await UserInteractionService.CreateDm(otherId);
                if (dm is null) return;
            }

            chatId = dm.ID;
            await GetUserData();
            GetDmData();
        }
        if (chatId == CurrentChatId) return;
        
        if (CurrentChatId != -1)
        {
            await LeaveChat();
        }

        CurrentView = View.Dm;
        CurrentChatId = chatId;
        
        await JoinChat();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OpenGroup(int chatId, bool reload = false)
    {
        if (reload)
        {
            await GetUserData();
            GetGroupData();
        }
        if (chatId == CurrentChatId) return;
        
        if (CurrentChatId != -1)
        {
            await LeaveChat();
        }

        CurrentView = View.Group;
        CurrentChatId = chatId;

        await JoinChat();
        await InvokeAsync(StateHasChanged);
    }

    public List<int?> WatchedIDs { get; private set; } = [];

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } =
    [
        InteractionEvent.CreateDm,
        InteractionEvent.Block,
        InteractionEvent.Unblock,
        InteractionEvent.Unfriend,
        InteractionEvent.RequestAccepted,
        InteractionEvent.UserUpdated
    ];

    public List<GroupEvent> WatchedGroupEvents { get; set; } =
    [
        GroupEvent.CreateGroup,
        GroupEvent.ReceivedInviteAccepted,
        GroupEvent.RemoveMember,
        GroupEvent.SelfLeftGroup,
        GroupEvent.OtherLeftGroup,
        GroupEvent.GroupDisplayChange,
        GroupEvent.DeleteGroup
    ];
    
    public async Task OnUpdate(GroupEvent evt, int? specifiedGroup = null, int? specifiedUser = null)
    {
        await GetUserData();
        GetGroupData();

        if (CurrentView == View.Group && CurrentChatId == specifiedGroup)
        {
            if (evt is GroupEvent.DeleteGroup or GroupEvent.SelfLeftGroup) // I left or group was deleted
            {
                MoveToHome();
            }
            else if (Self!.Id == specifiedUser && evt is GroupEvent.RemoveMember) // I was kicked
            {
                MoveToHome();
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetUserData();
        GetDmData();
        if (evt == InteractionEvent.UserUpdated)
        {
            GetGroupData();
        }
        await GetFriendData();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnPacket(IPacket packet)
    {
        if (packet is not AbstractMessageS2CPacket messagePacket) return;

        switch (packet)
        {
            case MessageSentS2CPacket:
                await InvokeAsync(StateHasChanged);
                break;
        }
    }

    public override async Task OnUpdate(UserRecord? data)
    {
        await GetDataAsync();
        await base.OnUpdate(data);
    }

    private enum View
    {
        Dm,
        Group,
        Home
    }

    private record DmChat(int ID, User User, byte[]? Avatar);

}
