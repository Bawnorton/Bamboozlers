@inherits UserViewComponentBase;

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes.Interop
@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Components.Settings
@using Bamboozlers.Classes.Services
@using Bamboozlers.Components.Chat
@using Blazorise.Extensions

@rendermode InteractiveServer

@inject IDbContextFactory<AppDbContext> Db
@inject AuthenticationStateProvider AuthStateProvider;

<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Div Background="Background.Secondary"
                 Padding="Padding.Is3"
                 TextSize="TextSize.Heading5">
                <Icon Name="Icons.UserTimes"></Icon>
                <Text>Bamboozlers</Text>
            </Div>
            <Bar Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Hide"
                 ThemeContrast="ThemeContrast.Dark"
                 Class="scrollbar-container">
                <BarMenu>
                    <BarItem>
                        <BarLink ElementId="friends" @onclick="() => {CurrentView = View.Friends; CurrentChatId = -1; }">
                            <BarIcon Class="fa-user-circle"></BarIcon>
                            Friends
                        </BarLink>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.User"></BarIcon>
                                Direct Messages
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="dms_dropdown">
                                @foreach (var chat in DmChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("user_" + chat.User.Id)" @onclick="() => {CurrentView = View.Dm; CurrentChatId = chat.ID; }">
                                            <BarIcon IconName="Icons.User"></BarIcon>
                                            @chat.User.DisplayName
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.Users"></BarIcon>
                                Group Chats
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="groups_dropdown">
                                @foreach (var chat in GroupChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("group_" + chat.ID)" @onclick="() => { CurrentView = View.Group; CurrentChatId = chat.ID; }">
                                            <BarIcon IconName="Icons.Users"></BarIcon>
                                            @chat.Name
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </BarMenu>
            </Bar>
            <Div Padding="Padding.Is3"
                 TextSize="TextSize.Heading5"
                 Class="sidebar-footer"
                 id="profile-button"
                 @onclick="ProfileButtonCallback">
                <Text>
                    @(User is null ? UserRecord.Default.UserName : User.DisplayName.IsNullOrEmpty() ? User.UserName : User.DisplayName)
                </Text>
                <Icon Name="Icons.UserTie" IconSize="IconSize.Large"></Icon>
            </Div>
        </LayoutSiderContent>
    </LayoutSider>
        @if(CurrentView == View.Friends)
        {
            <CompFriendsView />
        }
        else
        {
            <CompChatView ChatID="CurrentChatId"/>
        }
</Layout>

@code {
    [Parameter] public EventCallback ProfileButtonCallback { get; set; }
    private User? User { get; set; }
    private List<DmChat> DmChats { get; set; } = [];

    private List<GroupChat> GroupChats { get; set; } = [];

    private View CurrentView { get; set; } = View.Friends;
    private int CurrentChatId { get; set; } = -1;

    private int FriendCount { get; set; } = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();     
    }

    public async Task Refresh()
    {
        await GetDataAsync();
    }

    private async Task GetDataAsync()
    {
        User = await AuthService.GetUser(query => 
            query
                .Include(u => u.Chats)
                    .ThenInclude(c => c.Users)
        );

        if (User is null)
            return;
        
        await using var db = await Db.CreateDbContextAsync();

        var chats = User.Chats;
        if (chats is not null)
        {
            GroupChats = User.Chats.OfType<GroupChat>().ToList();
            DmChats = User.Chats.Except(GroupChats).Select(chat => new DmChat(chat.ID, chat.Users.First(u => u.Id != User.Id))).ToList();
        }

        FriendCount = 0;
        var friendships = db.FriendShips.Include(f => f.User1).Include(f => f.User2);
        foreach (var friendship in friendships)
        {
            if (friendship.User1ID == User.Id || friendship.User2ID == User.Id)
            {
                FriendCount++;
            }
        }
    }
    
    private enum View
    {
        Dm,
        Group,
        Friends
    }
    
    private record DmChat(int ID, User User);

}