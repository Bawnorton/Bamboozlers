@inherits UserViewComponentBase;
@implements IAsyncGroupSubscriber
@implements IAsyncInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes.Interop
@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Components.Settings
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.Services
@using Bamboozlers.Components.Chat
@using Blazorise.Extensions

@rendermode InteractiveServer

@inject IDbContextFactory<AppDbContext> Db
@inject AuthenticationStateProvider AuthStateProvider;

<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Div Background="Background.Secondary"
                 Padding="Padding.Is3"
                 TextSize="TextSize.Heading5">
                <Icon Name="Icons.User"></Icon>
                <Text>Bamboozlers</Text>
            </Div>
            <Bar Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Hide"
                 ThemeContrast="ThemeContrast.Dark"
                 Class="scrollbar-container">
                <BarMenu>
                    <BarItem>
                        <BarLink ElementId="friends" @onclick="() => {CurrentView = View.Friends; CurrentChatId = -1; }">
                            <BarIcon Class="fa-user-circle"></BarIcon>
                            Friends
                        </BarLink>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.User"></BarIcon>
                                Direct Messages
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="dms_dropdown">
                                @foreach (var chat in DmChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("user_" + chat.User.Id)" @onclick="() => OpenDm(chat.ID)">
                                            @if (chat.Avatar is not null)
                                            {
                                                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(chat.Avatar)}") Class="message-avatar" alt=""/>
                                            }
                                            else
                                            {
                                                <BarIcon IconName="Icons.User"></BarIcon>
                                            }
                                            @(chat.User.DisplayName ?? chat.User.UserName)
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.Users"></BarIcon>
                                Group Chats
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="groups_dropdown">
                                @foreach (var chat in GroupChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("group_" + chat.ID)" @onclick="() => { CurrentView = View.Group; CurrentChatId = chat.ID; }">
                                            @if (chat.Avatar is not null)
                                            {
                                                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(chat.Avatar)}") Class="message-avatar" alt=""/>
                                            }
                                            else
                                            {
                                                <BarIcon IconName="Icons.Users"></BarIcon>
                                            }
                                            @chat.Name
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </BarMenu>
            </Bar>
            <Div Padding="Padding.Is3"
                 TextSize="TextSize.Heading5"
                 Class="sidebar-footer align-items-center d-inline-flex justify-content-between w-100"
                 id="profile-button"
                 @onclick="async () => await OpenPopupCallback.InvokeAsync(new PopupCallbackArgs(RecognizedPopupType.Settings))">
                <Text>
                    @(User is null ? UserRecord.Default.UserName : User.DisplayName.IsNullOrEmpty() ? User.UserName : User.DisplayName)
                </Text>
                @if (User?.Avatar is not null)
                {
                    <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(User.Avatar)}") Class="message-avatar" alt=""/>
                }
                else
                {
                    <Icon Name="Icons.User" IconSize="IconSize.Large"></Icon>
                }
            </Div>
        </LayoutSiderContent>
    </LayoutSider>
        @if(CurrentView == View.Friends)
        {
            <CompFriendsView />
        }
        else
        {
            <CompChatView ChatID="CurrentChatId"/>
        }
</Layout>

@code {
    [CascadingParameter] public EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }
    private User? User { get; set; }
    private List<DmChat> DmChats { get; set; } = [];

    private List<GroupChat> GroupChats { get; set; } = [];

    private View CurrentView { get; set; } = View.Friends;
    private int CurrentChatId { get; set; } = -1;
    private int FriendCount { get; set; } = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await GetDataAsync();     
    }

    public async Task Refresh()
    {
        await GetDataAsync();
    }
    
    private async Task GetDataAsync()
    {
        await GetUserDataAsync();

        if (User is null)
            return;

        GetGroupData();
        GetDmData();
        await GetFriendData();
    }

    private async Task GetUserDataAsync()
    {
        User = await AuthService.GetUser(query =>
            query
                .Include(u => u.Chats)
                .ThenInclude(c => c.Users)
        );
    }

    private void GetGroupData()
    {
        if (User?.Chats is null)
            throw new InvalidOperationException("User and/or chats were not found.");
        
        GroupChats = User.Chats.OfType<GroupChat>().ToList();

        if (CurrentView == View.Group && GroupChats.FirstOrDefault(g => g.ID == CurrentChatId) is null) 
            return;
        
        CurrentChatId = -1;
        CurrentView = View.Friends;
    }

    private void GetDmData()
    {
        if (User is null)
            throw new InvalidOperationException("User and/or chats were not found.");
        
        DmChats = User.Chats.Except(GroupChats)
            .Select(chat => new DmChat(
                chat.ID, 
                chat.Users.First(u => u.Id != User.Id), 
                chat.Users.First(u => u.Id != User.Id).Avatar)
            ).ToList();
    }
    
    private async Task GetFriendData()
    {
        if (User is null)
            throw new InvalidOperationException("User and/or chats were not found.");
        
        await using var db = await Db.CreateDbContextAsync();
        FriendCount = 0;
        var friendships = db.FriendShips.Include(f => f.User1).Include(f => f.User2);
        foreach (var friendship in friendships)
        {
            if (friendship.User1ID == User.Id || friendship.User2ID == User.Id)
            {
                FriendCount++;
            }
        }
    }

    private void OpenDm(int chatId)
    {
        if (DmChats.FirstOrDefault(d => d.ID == chatId) is null)
            return;
        
        CurrentView = View.Dm; 
        CurrentChatId = chatId; 
    }
    
    private void OpenGroup(int chatId)
    {
        if (GroupChats.FirstOrDefault(g => g.ID == chatId) is null)
            return;
        
        CurrentView = View.Group; 
        CurrentChatId = chatId; 
    }
    
    public List<int?> WatchedIDs { get; set; } = [];
    
    public async Task OnGroupUpdate()
    {
        await GetUserDataAsync();
        GetGroupData();
    }
    
    public async Task OnInteractionUpdate()
    {
        await GetUserDataAsync();
        GetDmData();
        await GetFriendData();
    }
    
    private enum View
    {
        Dm,
        Group,
        Friends
    }
    
    private record DmChat(int ID, User User, byte[]? Avatar);
}