@rendermode InteractiveServer

@inherits UserViewComponentBase;

@implements IGroupSubscriber
@implements IInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.Chat
@using Bamboozlers.Components.MainVisual
@using Bamboozlers.Components.Utility
@using Blazorise.Extensions


@inject IDbContextFactory<AppDbContext> Db
@inject IUserGroupService UserGroupService;
@inject IUserInteractionService UserInteractionService;
@inject ILogger<NavLayout> Logger

<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Div Background="Background.Secondary"
                 Padding="Padding.Is3"
                 TextSize="TextSize.Heading5">
                <Icon Name="Icons.User"></Icon>
                <Text>Bamboozlers</Text>
            </Div>
            <Bar Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Hide"
                 ThemeContrast="ThemeContrast.Dark"
                 Class="scrollbar-container">
                <BarMenu>
                    <BarItem>
                        <BarLink ElementId="home" @onclick="() => {CurrentView = View.Home; CurrentChatId = -1; }">
                            <BarIcon Class="fa-home"></BarIcon>
                            Home
                        </BarLink>
                    </BarItem>
                    <Divider Margin="Margin.Is0"/>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.User"></BarIcon>
                                Direct Messages
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="dms_dropdown">
                                <BarLink ElementId="create_dm" @onclick="@(async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.FriendList)))">
                                    <BarIcon IconName="Icons.Envelope"></BarIcon>
                                    Open Direct Message
                                </BarLink>
                                <Divider Margin="Margin.Is0"/>
                                @if (DmChats.Count > 0)
                                {
                                    foreach (var chat in DmChats)
                                    {
                                        <BarItem>
                                            <BarLink ElementId="@("user_" + chat.User.Id)" @onclick="async () => await OpenDm(chat.ID)">
                                                @if (chat.Avatar is not null)
                                                {
                                                    <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(chat.Avatar)}") Class="message-avatar" alt=""/>
                                                }
                                                else
                                                {
                                                    <BarIcon IconName="Icons.UserGroup"></BarIcon>
                                                }
                                                @chat.User.GetName()
                                            </BarLink>
                                        </BarItem>
                                    }
                                }
                                else
                                {
                                    <BarItem>
                                        <BarLabel>
                                            <i>No direct messages</i>
                                        </BarLabel>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                    <Divider Margin="Margin.Is0"/>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="Icons.Users"></BarIcon>
                                Group Chats
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="groups_dropdown">
                                <BarItem>
                                    <BarLink ElementId="create_group" @onclick="@(async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.CreateGroup)))">
                                        <BarIcon IconName="Icons.UserPlus"></BarIcon>
                                        Create Group Chat
                                    </BarLink>
                                </BarItem>
                                <Divider Margin="Margin.Is0"/>
                                @if (GroupChats.Count > 0)
                                {
                                    foreach (var chat in GroupChats)
                                    {
                                        <BarItem>
                                            <BarLink ElementId="@("group_" + chat.ID)" @onclick="@(async () => await OpenGroup(chat.ID))">
                                                @if (chat.Avatar is not null)
                                                {
                                                    <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(chat.Avatar)}") Class="message-avatar" alt=""/>
                                                }
                                                else
                                                {
                                                    <BarIcon IconName="Icons.Users"></BarIcon>
                                                }
                                                @chat.GetGroupName()
                                            </BarLink>
                                        </BarItem>
                                    }
                                }
                                else
                                {
                                    <BarItem>
                                        <BarLabel>
                                            <i>No group chats</i>
                                        </BarLabel>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </BarMenu>
            </Bar>
            <Div Padding="Padding.Is3"
                 TextSize="TextSize.Heading5"
                 Class="sidebar-footer align-items-center d-inline-flex justify-content-between w-100"
                 id="profile-button"
                 @onclick="async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.Settings))">
                <Text>
                    @(Self is null ? UserRecord.Default.UserName : Self.GetName())
                </Text>
                @if (Self?.Avatar is not null)
                {
                    <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(Self.Avatar)}") Class="message-avatar" alt=""/>
                }
                else
                {
                    <Icon Name="Icons.User" IconSize="IconSize.Large"></Icon>
                }
            </Div>
        </LayoutSiderContent>
    </LayoutSider>
        @if(CurrentView == View.Home)
        {
            <CompMainView/>
        }
        else
        {
            <CompChatView ChatID="CurrentChatId"/>
        }
</Layout>

@code {
    [Inject] protected new IUserService UserService { get; set; } = default!;
    
    [CascadingParameter] public EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }
    
    private User? Self { get; set; }
    private List<DmChat> DmChats { get; set; } = [];
    private List<GroupChat> GroupChats { get; set; } = [];
    private View CurrentView { get; set; } = View.Home;
    private int CurrentChatId { get; set; } = -1;
    private int FriendCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        UserService.AddSubscriber(this);
        UserGroupService.AddSubscriber(this);
        UserInteractionService.AddSubscriber(this);
        await Refresh();
    }

    public async Task Refresh()
    {
        await GetDataAsync();
    }

    private async Task GetDataAsync()
    {
        await GetUserData();

        if (Self is null)
            return;

        GetGroupData();
        GetDmData();
        await GetFriendData();
    }

    private async Task GetUserData()
    {
        Self = await AuthService.GetUser(query =>
            query
                .Include(u => u.Chats)
                .ThenInclude(c => c.Users)
        );
    }

    private void GetGroupData()
    {
        if (Self?.Chats is null)
            throw new InvalidOperationException("User and/or chats were not found.");
        
        GroupChats = Self.Chats.OfType<GroupChat>().ToList();
        WatchedIDs = GroupChats.Select(s => (int?) s.ID).ToList();

        if (CurrentView != View.Group || GroupChats.FirstOrDefault(gc => gc.ID == CurrentChatId) is not null) return;
        CurrentChatId = -1;
        CurrentView = View.Home;
    }

    private void GetDmData()
    {
        if (Self is null)
            throw new InvalidOperationException("User and/or chats were not found.");
        
        DmChats = Self.Chats.Except(Self.Chats.OfType<GroupChat>())
            .Select(chat => new DmChat(
                chat.ID, 
                chat.Users.First(u => u.Id != Self.Id), 
                chat.Users.First(u => u.Id != Self.Id).Avatar)
            ).ToList();
        
        if (CurrentView != View.Dm || DmChats.FirstOrDefault(c => c.User.Id == CurrentChatId) is not null) return;
        CurrentChatId = -1;
        CurrentView = View.Home;
    }

    private async Task GetFriendData()
    {
        if (Self is null)
            throw new InvalidOperationException("User and/or chats were not found.");

        await using var db = await Db.CreateDbContextAsync();
        FriendCount = 0;
        var friendships = db.FriendShips.Include(f => f.User1).Include(f => f.User2);
        foreach (var friendship in friendships)
        {
            if (friendship.User1ID == Self.Id || friendship.User2ID == Self.Id)
            {
                FriendCount++;
            }
        }
    }
    
    public async Task OpenDm(int chatId = -1, int? otherId = null, bool reload = false)
    {
        if (reload)
        {
            await GetUserData();
            GetDmData();   
        }

        if (chatId == -1)
        {
            if (otherId is not null)
            {
                var dm = await UserInteractionService.FindDm(otherId);
                if (dm is null)
                {
                    dm = await UserInteractionService.CreateDm(otherId);
                    if (dm is null)
                        return;
                }
                chatId = dm.ID;
                await GetUserData();
                GetDmData();
            }
            else
            {
                return;
            }
        }
        
        CurrentView = View.Dm; 
        CurrentChatId = chatId; 
        await InvokeAsync(StateHasChanged);
    }

    public async Task OpenGroup(int chatId, bool reload = false)
    {
        if (reload)
        {
            await GetUserData();
            GetGroupData();
        }

        if (GroupChats.FirstOrDefault(g => g.ID == chatId) is null) return;

        CurrentView = View.Group; 
        CurrentChatId = chatId; 
        await InvokeAsync(StateHasChanged);
    }
    
    public List<int?> WatchedIDs { get; private set; } = [];

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } =
    [
        InteractionEvent.CreateDm,
        InteractionEvent.Block,
        InteractionEvent.Unblock,
        InteractionEvent.Unfriend,
        InteractionEvent.RequestAccepted
    ];

    public List<GroupEvent> WatchedGroupEvents { get; set; } = 
    [
        GroupEvent.CreateGroup,
        GroupEvent.ReceivedInviteAccepted,
        GroupEvent.SelfLeftGroup,
        GroupEvent.GroupDisplayChange,
        GroupEvent.DeleteGroup
    ];

    public async Task OnUpdate(GroupEvent evt, int? specifiedGroup = null)
    {
        await GetUserData();
        GetGroupData();
        await InvokeAsync(StateHasChanged);
    }
    
    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetUserData();
        GetDmData();
        await GetFriendData();
        await InvokeAsync(StateHasChanged);
    }
    
    public override async Task OnUpdate(UserRecord? data)
    {
        await GetDataAsync();
        await base.OnUpdate(data);
    }

    private enum View
    {
        Dm,
        Group,
        Home
    }

    private record DmChat(int ID, User User, byte[]? Avatar);

}