@page "/Account/ConfirmEmailChange"
@using Bamboozlers.Classes.AppDbContext
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityRedirectManagerWrapper RedirectManager

<PageTitle>Confirm email change</PageTitle>

<CompAccountContainer>
    <h1>Confirm email change</h1>
    <StatusMessage Message="@_message"/>    
</CompAccountContainer>

@code {
    private string? _message;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    // ReSharper disable UnusedAutoPropertyAccessor.Local - Used by SupplyParameterFromQuery
    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus(
                "Account/Login", "Error: Invalid email change confirmation link.", HttpContext);
        }

        var user = await UserManager.FindByIdAsync(UserId!);
        if (user is null)
        {
            _message = "Unable to find user with Id '{userId}'";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code!));
        var result = await UserManager.ChangeEmailAsync(user, Email!, code);
        if (!result.Succeeded)
        {
            _message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        _message = "Thank you for confirming your email change.";
    }

}