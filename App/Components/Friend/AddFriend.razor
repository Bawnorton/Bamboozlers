@inherits UserViewComponentBase

@using Blazorise.Extensions
@using Microsoft.AspNetCore.Identity
@using Bamboozlers.Classes.AppDbContext
@using Blazorise.Components

@inject IDbContextFactory<AppDbContext> Db
@inject UserManager<User> UserManager;

<br/>
<h4>You can add friends with their username</h4>
<h7 style="color:@_color;">@_errorMessage &zwnj;</h7>

<Autocomplete SearchClass="search" TItem="User" TValue="string" Data="@_users"
              TextField="@(user => user.UserName!)"
              ValueField="@(user => user.UserName!)"
              @bind-SelectedText="@SelectedText"
              Placeholder="Search..."
              Filter="AutocompleteFilter.StartsWith"
              FreeTyping
              CustomFilter="@((item, searchValue) => item.UserName!.IndexOf(searchValue, 0, StringComparison.CurrentCultureIgnoreCase) >= 0)">
    <NotFoundContent> Sorry... @context was not found! :( </NotFoundContent>
    <ItemContent>
        <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
            <Text Margin="Margin.Is2.FromBottom">@context.Value</Text>
        </Div>
    </ItemContent>
</Autocomplete>
<Button class="btn btn-success" @onmousedown="@(() => SendRequest(SelectedText))">Add Friend</Button>

@code
{
    private List<User> _users = [];
    private User? Self { get; set; }
    private string SelectedText { get; set; }
    private string? _errorMessage;
    string _color = "#ff5d5d";

    protected override async Task OnInitializedAsync()
    {
        await using var db = await Db.CreateDbContextAsync();
        Self = await AuthService.GetUser();
        var blocked = db.BlockList.Where(w => w.BlockerID == Self!.Id).Select(s => s.BlockedID).ToList();
        var friends1 = db.FriendShips.Where(w => w.User2ID == Self!.Id).Select(s => s.User1ID).ToList();
        var friends2 = db.FriendShips.Where(w => w.User1ID == Self!.Id).Select(s => s.User2ID).ToList();
        var outwardsPending = db.FriendRequests.Where(w => w.SenderID == Self!.Id && w.Status == 0).Select(s => s.ReceiverID).ToList();
        var inwardsPending = db.FriendRequests.Where(w => w.ReceiverID == Self!.Id && w.Status == 0).Select(s => s.SenderID).ToList();
        _users = db.Users
            .Where(user => !blocked.Contains(user.Id) && !friends1.Contains(user.Id) && !friends2.Contains(user.Id) && !outwardsPending.Contains(user.Id) && !inwardsPending.Contains(user.Id))
            .Where(user => user.UserName != Self!.UserName)
            .ToList();
    }

    private async Task SendRequest(string? username)
    {
        await using var db = await Db.CreateDbContextAsync();
        User? prospect = null;
        if (username != null)
        {
            prospect = await UserManager.FindByNameAsync(username);
        }

        if ((prospect == null) | _users.FindAll(w => w.UserName == prospect!.UserName).IsNullOrEmpty())
        {
            _color = "#ff5d5d";
            _errorMessage = "Invalid username";
            return;
        }

        var newRequest = new FriendRequest(Self!.Id, prospect!.Id)
        {
            Status = RequestStatus.Pending
        };

        db.FriendRequests.Add(newRequest);
        await db.SaveChangesAsync();

        _users.RemoveAll(user => user.UserName == username);
        SelectedText = "";
        _color = "#59ff54";
        _errorMessage = "Friend request sent to " + prospect.UserName;
    }

}