@inherits UserViewComponentBase

@using Bamboozlers.Classes.AppDbContext
@using Microsoft.AspNetCore.Identity

@inject IDbContextFactory<AppDbContext> Db
@inject UserManager<User> UserManager;
@inject NavigationManager NavigationManager

<br/>
<h4>Pending Friend Requests: @_total</h4>
<hr/>
<p>@_noRequests</p>

@foreach (var prospect in _incomingFriendReqs)
{
    <span id="incomingUser_@prospect.Id" style="font-size:1.4em;">Incoming request from @prospect.UserName</span>
    <button id="Accept" @onclick="() => ManageRequest(prospect, true)" class="btn btn-success btn-sm">Accept</button>
    <button id="Deny" @onclick="() => ManageRequest(prospect, false)" class="btn btn-danger btn-sm">Deny</button>
    <p></p>
}

@foreach (var prospect in _outgoingFriendReqs)
{
    <span id="outgoingUser_@prospect.Id" style="font-size:1.4em;">Outgoing request to @prospect.UserName</span>
    <button id="Cancel" @onclick="() => CancelRequest(prospect)" class="btn btn-danger btn-sm">Cancel</button>
    <p></p>
}

@foreach (var prospect in _deniedFriendReqs)
{
    <span id="deniedUser_@prospect.Id" style="font-size:1.4em;">Friend request to @prospect.UserName has been denied</span>
    <button id="Resend" @onclick="() => ResendRequest(prospect)" class="btn btn-success btn-sm">Resend</button>
    <p></p>
}

@code {
    private readonly List<User> _incomingFriendReqs = [];
    private readonly List<User> _outgoingFriendReqs = [];
    private readonly List<User> _deniedFriendReqs = [];
    private int _total;
    private string? _noRequests;
    private User? Self { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsAuthenticated().Result) return;

        Self = await AuthService.GetUser();
        await using var db = await Db.CreateDbContextAsync();
        foreach (var friendRequest in db.FriendRequests.Include(f => f.Sender).Include(f => f.Receiver))
        {
            if (friendRequest.SenderID == Self!.Id)
            {
                if (friendRequest.Status == RequestStatus.Denied)
                {
                    _deniedFriendReqs.Add(friendRequest.Receiver);
                }
                else
                {
                    _outgoingFriendReqs.Add(friendRequest.Receiver);
                }
            }
            else if (friendRequest.ReceiverID == Self.Id && friendRequest.Status == RequestStatus.Pending)
            {
                _incomingFriendReqs.Add(friendRequest.Sender);
            }
        }

        _total = _outgoingFriendReqs.Count + _incomingFriendReqs.Count;
        if (_total == 0)
            _noRequests = "You have no incoming or outgoing friend requests at this time";
    }

    private async Task ManageRequest(User prospect, bool accepted)
    {
        await using var db = await Db.CreateDbContextAsync();

        if (accepted)
        {
            var newFriend = new Friendship(Self!.Id, prospect.Id);

            var oldIncomingRequest = await db.FriendRequests.FindAsync(prospect.Id, Self.Id);
            var oldOutgoingRequest = await db.FriendRequests.FindAsync(Self.Id, prospect.Id);

            if (oldIncomingRequest != null)
            {
                db.FriendRequests.Remove(oldIncomingRequest);
            }

            if (oldOutgoingRequest != null)
            {
                db.FriendRequests.Remove(oldOutgoingRequest);
            }

            db.FriendShips.Add(newFriend);

            _outgoingFriendReqs.RemoveAll(user => user.Id == prospect.Id);
            _deniedFriendReqs.RemoveAll(user => user.Id == prospect.Id);
        }
        else
        {
            db.FriendRequests.First(f => f.SenderID == prospect.Id && f.ReceiverID == Self!.Id).Status = RequestStatus.Denied;
            await db.SaveChangesAsync();
        }

        await db.SaveChangesAsync();
        _incomingFriendReqs.RemoveAll(user => user.Id == prospect.Id);
        _total = _outgoingFriendReqs.Count + _incomingFriendReqs.Count;
        _noRequests = _total == 0 ? "You have no incoming or outgoing friend requests at this time" : null;
    }

    private async Task CancelRequest(User prospect)
    {
        await using var db = await Db.CreateDbContextAsync();

        var friendRequests = await db.FriendRequests.FindAsync(Self!.Id, prospect.Id);
        db.FriendRequests.Remove(friendRequests!);
        await db.SaveChangesAsync();
        _outgoingFriendReqs.RemoveAll(user => user.Id == prospect.Id);
        _total = _outgoingFriendReqs.Count + _incomingFriendReqs.Count;
        _noRequests = _total == 0 ? "You have no incoming or outgoing friend requests at this time" : null;
    }

    private async Task ResendRequest(User prospect)
    {
        await using var db = await Db.CreateDbContextAsync();

        db.FriendRequests.First(f => f.SenderID == Self!.Id && f.ReceiverID == prospect.Id).Status = RequestStatus.Pending;
        await db.SaveChangesAsync();
        _deniedFriendReqs.RemoveAll(user => user.Id == prospect.Id);
        _outgoingFriendReqs.Add(prospect);
        _total = _outgoingFriendReqs.Count + _incomingFriendReqs.Count;
        _noRequests = _total == 0 ? "You have no incoming or outgoing friend requests at this time" : null;
    }

}