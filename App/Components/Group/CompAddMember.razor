@inherits UserViewComponentBase
@implements IGroupSubscriber

@using Bamboozlers.Classes.AppDbContext
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.Utility
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Classes.Utility.Observer
@using Blazorise.Extensions
@inject IDbContextFactory<AppDbContext> Db

<ModalContent Centered>
    <ModalHeader>
        <ModalTitle>Invite Friends to @(Chat is null ? "Group" : Chat.Name)</ModalTitle>
    </ModalHeader>
    <ModalBody>
        <Div Style="display: block">
            @InviteList
        </Div>
    </ModalBody>
</ModalContent>

@code{
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;

    [Parameter] public int? ChatID { get; set; }
    public List<int?> WatchedIDs { get; set; } = [];
    
    private GroupChat? Chat { get; set; }
    public RenderFragment? InviteList { get; set; }
    
    private User? Self { get; set; }

    private List<User> FriendList { get; set; }
    private List<User> InvitedAlready { get; set; }
    private List<User> InGroupAlready { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserGroupService.AddSubscriber(this);
        WatchedIDs = [ChatID];
        await LoadGroupData();
    }
    
    public async Task LoadGroupData()
    {
        Self = await AuthService.GetUser();
        if (Self is null) 
            return;
        
        await using var db = await Db.CreateDbContextAsync();
        
        Chat = db.GroupChats.Where(c => c.ID == ChatID)
            .Include(c => c.Users)
            .Include(c => c.Moderators)
            .FirstOrDefault();
        
        if (Chat is null)
            return;
        
        FriendList = await UserInteractionService.GetAllFriends();
        
        InGroupAlready = FriendList.Where(
                f => Chat.Users.FirstOrDefault(u => u.UserName == f.UserName) is not null
            ).ToList();

        var allInvites = await UserGroupService.GetAllOutgoingInvites();
        var invitesForGroup = allInvites is not null 
            ? allInvites.Where(i => i.GroupID == ChatID) 
            : [];
        
        InvitedAlready = invitesForGroup
            .Select(i => FriendList.FirstOrDefault(u => u.Id == i.RecipientID))
            .Where(u => u != null)
            .Select(u => u!)
            .ToList();

        InviteList = GetInviteList();
    }

    private RenderFragment GetInviteList()
    {
        return @<text>
                    @foreach (var user in FriendList)
                    {
                        <div id="@($"{user.UserName}-display")" style="display: inline-block; width: max-content;">
                            <Image Class="_32x32 message-avatar"
                                   Source=@(user.Avatar is null ? "images/default_profile.png" : $"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}")
                                   alt=""/>
                            <CompInteractUsername User="@user"/>
                            @if (InGroupAlready.Contains(user))
                            {
                                @GetActionButton(user,
                                    Color.Dark,
                                    "Already in group",
                                    null,
                                    EventCallback.Empty,
                                    true
                                )
                            }
                            else
                            {
                                if (InvitedAlready.Contains(user))
                                {
                                    @GetActionButton(user,
                                        Color.Danger,
                                        "Revoke Invitation",
                                        IconName.Ban,
                                        new EventCallbackFactory().Create(this, async () => await UserGroupService.RevokeGroupInvite(ChatID, user.Id)))
                                }
                                else
                                {
                                    @GetActionButton(user,
                                        null,
                                        "Invite",
                                        IconName.UserPlus,
                                        new EventCallbackFactory().Create(this, async () => await UserGroupService.SendGroupInvite(ChatID, user.Id)))
                                }
                            }
                        </div>
                        <Divider/>
                    }
                </text>;
    }
    
    private RenderFragment GetActionButton(User user, Color? color, string? caption, IconName? iconName, EventCallback? actionCallback, bool disabled = false)
    {
        return @<div id="@($"{user.UserName}-action-button")" style="display: inline-block; float: right; margin-left: 5px; margin-right: 5px;">
                   <CompActionButton ButtonCaption="@caption"
                                     Color="@(color ?? Color.Success)"
                                     IconName="@(iconName ?? null)"
                                     ColumnWrapped="@false"
                                     ActionCallback="@(actionCallback ?? EventCallback.Empty)"
                                     Disabled="@disabled"/>
               </div>;
    }



    public List<GroupEvent> WatchedGroupEvents { get; set; } =
    [
        GroupEvent.General
    ];
    
    public async Task OnUpdate(GroupEvent evt, int? specifiedGroup = null)
    {
        await LoadGroupData();
        StateHasChanged();
    }
}


