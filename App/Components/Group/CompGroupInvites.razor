@inherits UserViewComponentBase
@implements IGroupSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.VisualUtility
@using Bamboozlers.Classes.Utility.Observer
@using Blazorise.Extensions

<div style="margin-top: 5px">
    <Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="SelectedTab">
        <Items>
            <Tab Name="Incoming">
                @if (IncomingGroupInvites.Count > 0)
                {
                    <Badge Color="Color.Dark">
                        @IncomingGroupInvites.Count
                    </Badge>  
                } 
                Received Group Invites
            </Tab>
            <Tab Name="Outgoing">
                @if (OutgoingGroupInvites.Count > 0)
                {
                    <Badge Color="Color.Dark">
                        @OutgoingGroupInvites.Count
                    </Badge>  
                } 
                Sent Group Invites
            </Tab>
        </Items>
        <Content>
            <TabPanel Name="Incoming">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px;">
                    @if (IncomingGroupInvites.Count > 0)
                    {
                        foreach (var invite in IncomingGroupInvites)
                        {
                            @GetIncomingGroupInviteFragment(invite);
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't received any group invites from your friends.</p>
                    }
                </div>
            </TabPanel>
            <TabPanel Name="Outgoing">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px;">
                    @if (OutgoingGroupInvites.Count > 0)
                    {
                        foreach (var invite in OutgoingGroupInvites)
                        {
                            @GetOutgoingGroupInviteFragment(invite)
                            ;
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't sent any group invites to your friends.</p>
                    }
                </div>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] private EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] private EventCallback ClosePopupCallback { get; set; }

    private string SelectedTab { get; set; } = "Incoming";
    
    private List<GroupInvite> IncomingGroupInvites { get; set; } = [];
    private List<GroupInvite> OutgoingGroupInvites { get; set; } = [];
    
    private User Self { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserGroupService.AddSubscriber(this);
        await GetGroupsData();
    }

    public RenderFragment GetOutgoingGroupInviteFragment(GroupInvite groupInvite)
    {
        return @<text>
                    <div id="group-invite" style="display: block; padding-top: 5px; padding-bottom: 5px;">
                        <div id="@($"for-group-{groupInvite.Group.Name}")" 
                             style="display: inline-flex">
                            Invite to 
                            @if (groupInvite.Group.Avatar is not null)
                            {
                                <img style="margin-left: 5px; margin-right: 5px;" class="_32x32 border-mask" src="@($"data:image/png;base64,{Convert.ToBase64String(groupInvite.Group.Avatar)}")" alt=""/>   
                            }
                            @groupInvite.Group.Name
                        </div>
                        <div id="@($"to-user-{groupInvite.Recipient.UserName}")" 
                             style="display: inline-flex">
                            for
                            <CompInlineUserWithAvatar User="@groupInvite.Recipient"/>
                        </div>
                        <CompGroupButton EventKind="GroupEvent.SentInviteRevoked"
                                         UserId="@groupInvite.RecipientID"
                                         GroupID="@groupInvite.GroupID"
                                         RightFloating="@true"
                                         ButtonId="revoke-button"/>
                    </div>
                </text>;
    }
    
    public RenderFragment GetIncomingGroupInviteFragment(GroupInvite groupInvite)
    {
        return @<text>
                    <div id="group-invite" style="display: block; margin-top: 5px; margin-bottom: 5px;">
                        <div id="@($"forgroup-{groupInvite.Group.Name}")" 
                             style="display:inline-flex;">
                            Invite to 
                            @if (groupInvite.Group.Avatar is not null)
                            {
                                <img style="margin-left: 5px; margin-right: 5px;" class="_32x32 border-mask" src="@($"data:image/png;base64,{Convert.ToBase64String(groupInvite.Group.Avatar)}")" alt=""/>   
                            }
                            @groupInvite.Group.Name
                        </div>
                        <div id="@($"fromuser-{groupInvite.Sender.UserName}")" 
                             style="display: inline-flex;">
                            from 
                            <CompInlineUserWithAvatar User="groupInvite.Sender"/>
                        </div>
                        <CompGroupButton EventKind="GroupEvent.ReceivedInviteAccepted"
                                         UserId="@groupInvite.SenderID" 
                                         GroupID="@groupInvite.GroupID" 
                                         RightFloating="@true"
                                         ButtonId="accept-button"/>
                        <CompGroupButton EventKind="GroupEvent.ReceivedInviteDeclined"
                                         UserId="@groupInvite.SenderID" 
                                         GroupID="@groupInvite.GroupID" 
                                         RightFloating="@true"
                                         ButtonId="decline-button"/>
                        <Divider/>
                    </div>
                </text>;
    }
    
    private async Task GetGroupsData()
    {
        IncomingGroupInvites = await UserGroupService.GetAllIncomingInvites();
        OutgoingGroupInvites = await UserGroupService.GetAllOutgoingInvites();
    }

    public List<GroupEvent> WatchedGroupEvents { get; set; } =
    [
        GroupEvent.SentInvite,
        GroupEvent.SentInviteRevoked,
        GroupEvent.ReceivedInviteAccepted,
        GroupEvent.ReceivedInviteDeclined
    ];
    
    public List<int?> WatchedIDs { get; set; } = [];
    
    public async Task OnUpdate(GroupEvent evt, int? specifiedGroup = null)
    {
        await GetGroupsData();
        StateHasChanged();
    }
}

