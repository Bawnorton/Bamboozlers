@inherits UserViewComponentBase

@using Bamboozlers.Components.VisualUtility
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices

<ModalContent Size="ModalSize.Large" Centered>
    <ModalHeader>
        <Heading>Create Group Chat</Heading>
    </ModalHeader>
    <ModalBody>
        <Div style="display: block">
            <Heading>Configure Group appearance</Heading>
            <Div style="display: inline-block">
                <Div style="margin-left: 20px; margin-right: 20px;">
                    <CompAvatarUploader DefaultSrc="images/default_group.png"
                                        Avatar="@Avatar"
                                        DisplayPx="128"
                                        OnDelete="DeleteAvatar"
                                        OnUpload="UploadAvatar"/>
                </Div>
                <TextEdit Class="w-25"
                          @bind-Text="@Name"
                          ElementId="chat-name"
                          Placeholder="Chat Name"/>
            </Div>
        </Div>
        <Divider/>
        <Div>
            <Alert ElementId="creation-alert" Color="@AlertArguments.AlertColor" Visible="@AlertArguments.AlertVisible">
                <AlertMessage>
                    @AlertArguments.AlertMessage
                    <CloseButton Clicked="@(() => AlertArguments = new AlertArguments())" 
                                 Style="--bs-btn-close-white-filter: black;" 
                                 VerticalAlignment="VerticalAlignment.Middle" 
                                 Float="Float.End" 
                                 TextColor="TextColor.Warning"/>
                </AlertMessage>
                <AlertDescription>@AlertArguments.AlertDescription</AlertDescription>
            </Alert>
            <Heading>Invite friends upon Group creation</Heading>
            @foreach (var inv in InviteList)
            {
                <Div>
                    <InputCheckbox @bind-Value="inv.Invite"/>
                    <CompInlineUserWithAvatar User="@inv.Friend"></CompInlineUserWithAvatar>
                </Div>
            }
        </Div>
    </ModalBody>
    <ModalFooter>
        <Button Clicked="ClosePopupCallback">
            <Icon Name="IconName.Ban"/>
            Cancel
        </Button>
        <Button Color="Color.Success" Clicked="CreateGroup">
            <Icon Name="IconName.Check"/>
            Confirm
        </Button>
    </ModalFooter>
</ModalContent>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] private EventCallback ClosePopupCallback { get; set; }
    [CascadingParameter] private EventCallback<OpenChatArgs> OpenChatCallback { get; set; }
    
    private AlertArguments AlertArguments { get; set; } = new();
    private byte[]? Avatar { get; set; }
    private string Name { get; set; } = "";

    private User Self { get; set; } = default!;
    private List<User> FriendList { get; set; } = [];
    private List<InviteFriend> InviteList { get; set; } = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Self = (await AuthService.GetUser())!;

        FriendList = await UserInteractionService.GetAllFriends();
        foreach (var friend in FriendList)
        {
            InviteList.Add(new InviteFriend(friend, false));
        }
    }

    private void DeleteAvatar()
    {
        Avatar = null;
    }
    
    private Task<bool> UploadAvatar(byte[] image)
    {
        if (image.IsNullOrEmpty()) 
            return Task.FromResult(false);

        Avatar = image;
        return Task.FromResult(true);
    }

    private async Task CreateGroup()
    {
        var toInvite = InviteList.Where(i => i.Invite).Select(i => i.Friend).ToList();
        var result = await UserGroupService.CreateGroup(Avatar, Name, toInvite);

        if (!result.Succeeded)
        {
            AlertArguments = new AlertArguments(
                 Color.Danger,
                true,
                "Could not create group at this time.",
                "An error occurred preventing the creation of the group."
            );
        }

        await ClosePopupCallback.InvokeAsync();
        var group = (await 
            AuthService.GetUser(query => query.Include(u => u.OwnedChats)))!
                .OwnedChats
                    .LastOrDefault();
        if (group is null)
            return;
        await OpenChatCallback.InvokeAsync(new OpenChatArgs(ChatType.Group, group.ID));
    }

    private sealed record InviteFriend(User Friend, bool Invite)
    {
        public bool Invite { get; set; } = Invite;
    }

}