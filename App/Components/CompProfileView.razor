@inherits UserViewComponentBase
@implements IAsyncInteractionSubscriber

@using Bamboozlers.Classes.Data
@using Bamboozlers.Components.VisualUtility
@using Blazorise.Extensions
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Services.Authentication
@using Microsoft.Playwright
@using Bamboozlers.Classes.Utility.Observer
@using System.Diagnostics

@inject IDbContextFactory<AppDbContext> DbContextFactory;
@inject IUserInteractionService UserInteractionService

<style>
    .dropdown {
        position:  relative;
        display: inline-block;
    }
    
    .dropdown-content {
        display: none;
        position: absolute;
        width: max-content;
        z-index: 1;
    }
    
    .dropdown-option {
        display: block;
        width: fit-content;
    }
    
    .dropdown:hover .dropdown-content {
        display: inline-block;
    }
   
   .opt-bar {
        position: relative;
        display: inline; 
        width: max-content;
   }
   
   .right {
        float: right
   }
   
   .left {
        float: left
   }
   
   .clip-to-bottom {
        position: absolute;
        bottom: 0;
   }
   
   .opt-bar .item {
        display: inline-block; 
        width: fit-content; 
        margin-left: 5px; 
        margin-right: 5px;
   }
</style>

<ModalContent Centered>
    <ModalBody>
        <div>
           <div class="opt-bar">
               <div class="opt-bar left">
                   <div class="item left" style="margin-right: 15px">
                       <Image ElementId="avatar-display"
                              Class="border-mask fit _128x128"
                              Source="@(IsBlocked || IsBlockedBy ? "images/default_profile.png" : FocusUser.Avatar)"/>
                   </div>
                   <div class="item left" style="vertical-align: middle;">
                       @StatusBadge
                       <div class="clip-to-bottom">
                           @if (!FocusUser.DisplayName.IsNullOrEmpty() && !IsBlocked && !IsBlockedBy)
                           {
                               <h4>@(FocusUser.DisplayName)</h4>
                               <p>@FocusUser.UserName</p>
                           }
                           else
                           {
                               <h4>@FocusUser.UserName</h4>
                           }
                       </div>
                   </div>
               </div>
               <div class="opt-bar right">
                   <CloseButton Class="item right"/>
                   <div class="item right">
                       @ActionOptions
                   </div>
                   <div class="item right">
                       @ActionButton
                   </div>
               </div>
           </div> 
           @if (!IsBlockedBy && !IsBlocked)
           {
               <div style="float: left; width: 100%; display: block">
                   <Divider/>
                   <h4>Description</h4>
                   <Divider/>
                   <textarea name="bio" 
                       type="text" 
                       style="resize: none; max-height: 400px; min-height: 100px;"
                       class="form-control"
                       disabled>
                         @FocusUser.Bio
               </textarea>  
               </div>
           }
        </div>        
    </ModalBody>
</ModalContent>

@code {
    [CascadingParameter] public EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }
    [CascadingParameter] public EventCallback<Classes.AppDbContext.Chat?> OpenChatCallback { get; set; }
    
    [Parameter] public UserRecord FocusUser { get; set; } = UserRecord.Default;
    private RenderFragment? ActionButton { get; set; }
    private RenderFragment? ActionOptions { get; set; }
    private RenderFragment? StatusBadge { get; set; }

    private bool IsSelf { get; set; }
    private bool IsFriend { get; set; }
    private bool IsBlocked { get; set; }
    private bool IsBlockedBy { get; set; }
    private bool HasIncomingRequest { get; set; }
    private bool HasOutgoingRequest { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await UpdateContext();
        UserInteractionService.AddSubscriber(this);
    }

    public async Task UpdateContext()
    {
        ActionButton = null;
        ActionOptions = null;
        StatusBadge = null;
        
        UserData ??= await UserService.GetUserDataAsync();
        
        IsSelf = FocusUser.Id == UserData.Id;
        IsFriend = await UserInteractionService.FindFriendship(FocusUser.Id) is not null;
        IsBlocked = await UserInteractionService.FindIfBlocked(FocusUser.Id) is not null;
        IsBlockedBy = await UserInteractionService.FindIfBlockedBy(FocusUser.Id) is not null;
        HasIncomingRequest = await UserInteractionService.FindIncomingRequest(FocusUser.Id) is not null;
        HasOutgoingRequest = await UserInteractionService.FindOutgoingRequest(FocusUser.Id) is not null;
        
        if (IsSelf)
        {
            ActionButton = GetActionButton(
                EventCallback.Factory.Create(
                    this,
                    async () =>
                    {
                        await ClosePopupCallback.InvokeAsync();
                        await Task.Delay(100);
                        await OpenPopupCallback.InvokeAsync(new PopupCallbackArgs { PopupType = RecognizedPopupType.Settings }); 
                    }),
                "Settings",
                IconName.Settings
            );
            StatusBadge = @<Badge Color="Color.Light">
                              YOU
                          </Badge>;
            return;
        }
        
        if (IsFriend)
        {
            ActionButton = GetActionButton(
                EventCallback.Factory.Create(
                    this,
                    async () =>
                    {
                        await ClosePopupCallback.InvokeAsync(); 
                        await OpenChatCallback.InvokeAsync(await UserInteractionService.FindDmIfExists(FocusUser.Id));
                    }),
                "Send Message",
                IconName.Mail
            );
            StatusBadge = @<Badge Color="Color.Success">
                              <Icon Name="IconName.UserFriends"/>
                              FRIEND
                          </Badge>;
        } 
        else if (!IsBlockedBy && !IsBlocked)
        {
            if (HasIncomingRequest)
            {
                ActionButton = GetActionButton(
                    EventCallback.Factory.Create(
                        this, 
                        async () => await UserInteractionService.AcceptFriendRequest(FocusUser.Id)
                    ),
                    "Accept Friend Request",
                    IconName.UserPlus
                );
            }
            else if (HasOutgoingRequest)
            {
                ActionButton = GetActionButton(
                    EventCallback.Empty,
                    "Pending",
                    IconName.Send,
                    Color.Light,
                    true
                );
            }
            else
            {
                ActionButton = GetActionButton(
                    EventCallback.Factory.Create(
                        this, 
                        async () => await UserInteractionService.SendFriendRequest(FocusUser.Id)
                    ),
                    "Send Friend Request", 
                    IconName.UserPlus
                );
            }
        }
        else if (IsBlocked)
        {
            StatusBadge = @<Badge Color="Color.Danger">
                              <Icon Name="IconName.ShieldAlt"/>
                              BLOCKED
                          </Badge>;
        }

        ActionOptions = GetProfileActions();
        
        StateHasChanged();
    }

    private RenderFragment GetActionButton(EventCallback callback, string buttonCaption, IconName iconName, Color? buttonColor = null, bool disabled = false)
    {
        return @<CompActionButton
                    ActionCallback="callback"
                    ButtonCaption="@buttonCaption"
                    ButtonId="profile-action-button"
                    Color="@(buttonColor ?? Color.Success)"
                    ColumnWrapped="@false"
                    IconName = "iconName"
                    Disabled="disabled"
                />;
    }

    private RenderFragment GetProfileActions()
    {
        return @<text>
                    <Div id="profile-actions" 
                         Class="dropdown">
                        <Icon Name="@("fa-ellipsis-v")"/>
                        <Div Background="Background.Dark"
                             Class="dropdown-content">
                            @if (HasIncomingRequest && !IsBlocked)
                            {
                                <Button Class="dropdown-option" TextColor="TextColor.Danger"
                                        Clicked="@(async () => await UserInteractionService.DeclineFriendRequest(FocusUser.Id))">
                                    Decline Friend Request
                                </Button>
                            }
                            @if (HasOutgoingRequest)
                            {
                                <Button Class="dropdown-option" TextColor="TextColor.Danger"
                                        Clicked="@(async () => await UserInteractionService.RevokeFriendRequest(FocusUser.Id))">
                                    Revoke Friend Request
                                </Button>
                            }
                            @if (IsFriend)
                            {
                                <Button Class="dropdown-option" Clicked="@(async () => 
                                                                         { 
                                                                             // TODO: Invite to Group
                                                                         })">
                                    Invite to group
                                </Button>
                                <Button Class="dropdown-option" TextColor="TextColor.Danger"
                                        Clicked="@(async () => await UserInteractionService.RemoveFriend(FocusUser.Id))">
                                    Remove friend
                                </Button>
                            }
                            @if (!IsBlocked)
                            {
                                <Button Class="dropdown-option" TextColor="TextColor.Danger"
                                        Clicked="@(async () => await UserInteractionService.BlockUser(FocusUser.Id))">
                                    Block user
                                </Button>
                            }
                            else
                            {
                                <Button Class="dropdown-option" TextColor="TextColor.Danger"
                                        Clicked="@(async () => await UserInteractionService.UnblockUser(FocusUser.Id))">
                                    Unblock user
                                </Button>
                            }
                        </Div>
                    </Div>
                </text>;
    }
    
    public async Task OnInteractionUpdate()
    {
        await UpdateContext();
    }
}
