@inherits UserViewComponentBase

@implements IInteractionSubscriber

@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Networking.Packets.Serverbound.Interaction
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.Utility
@using AngleSharp.Dom.Events
@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Networking.Packets

<div style="margin-top: 10px; width: 100%">
    <Heading>
        @if (Friends.Count > 0)
        {
            <Badge ElementId="BlockCountBadge"
                   Color="Color.Dark">
                @Friends.Count
            </Badge>
        }
        Friends
    </Heading>
    <Divider/>
    @if (Friends.Count > 0)
    {
        <div class="scrollbar-container" style="display: inline-block; width: 90%; max-height: 100%; margin: 10px;">
            @foreach (var user in Friends)
            {
                RenderFragment button = @<CompActionButton ButtonId="send-message"
                                                           ButtonCaption="Send Message" 
                                                           FaIconName="@Icons.CommentDots"
                                                           ActionCallback="@(async () => await CallOpenDm(user))"
                                                           ColumnWrapped="@false"/>;
                <CompUserTab @key=@user 
                             User="@user"
                             Button="@button"/>
                <Divider/>
            }
        </div>
    }
    else
    {
        <p>Nothing to see here...</p>
        <p>You haven't made any friends.</p>
    }
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    
    [CascadingParameter] public EventCallback<OpenChatArgs> OpenChatCallback { get; set; }
    [CascadingParameter] public EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }
    [CascadingParameter] public EventCallback ClosePopup { get; set; }
    [CascadingParameter] public EventCallback<IPacket> SendToServer { get; set; }
    
    [Parameter] public bool IsPopup { get; set; }
    
    private List<User> Friends { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserInteractionService.AddSubscriber(this);
        await GetFriendData();
    }

    private async Task CallOpenDm(User user)
    {
        await OpenChatCallback.InvokeAsync(new OpenChatArgs(ChatType.Dm, user.Id)); 
        if (IsPopup) await ClosePopup.InvokeAsync();

        var sync = new InteractionSyncC2SPacket
        {
            Event = InteractionEvent.CreateDm,
            ReceiverId = user.Id
        };
        await SendToServer.InvokeAsync(sync);
    }
    
    public async Task GetFriendData()
    {
        Friends = [];
        Friends = await UserInteractionService.GetAllFriends();
    }

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } = 
    [
        InteractionEvent.Unfriend,
        InteractionEvent.RequestAccepted,
        InteractionEvent.Block,
        InteractionEvent.UserUpdated
    ];
    

    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetFriendData();
        await InvokeAsync(StateHasChanged);
    }

}
