@inherits UserViewComponentBase
@implements IInteractionSubscriber

@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.VisualUtility

<div style="margin-top: 10px; width: 100%">
    <Heading>
        @if (Friends.Count > 0)
        {
            <Badge ElementId="BlockCountBadge"
                   Color="Color.Dark">
                @Friends.Count
            </Badge>
        }
        Friends
    </Heading>
    <Divider/>
    <div class="scrollbar-container" style="display: inline-block; position: relative; width: 50%; max-height: 50vh; margin-left: 10px; margin-right: 10px;">
        @if (Friends.Count > 0)
        {
            foreach (var user in Friends)
            {
                @GetFriendFragment(user);
            }
        }
        else
        {
            <p>Nothing to see here...</p>
            <p>You haven't made any friends.</p>
        }
    </div>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    
    [CascadingParameter] private EventCallback<int> OpenDmCallback { get; set; }
    
    private User Self { get; set; } = default!;
    private List<User> Friends { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Self = (await AuthService.GetUser())!;
        UserInteractionService.AddSubscriber(this);
        await GetFriendData();
    }

    public RenderFragment GetFriendFragment(User user)
    {
        return @<text>
                    <div style="display: block; padding-top: 5px; padding-bottom: 5px;" 
                         id="@($"user-{user.UserName}")">
                        <CompInlineUserWithAvatar User="@user"/>
                        <div style="display: inline-flex; float: right;">
                            <CompActionButton ButtonCaption="Send Message"
                                              IconName="@IconName.Mail"
                                              ActionCallback="@(async () => await OpenDmCallback.InvokeAsync(user.Id))"
                                              ColumnWrapped="@false"/>
                        </div>
                        <Divider/>
                    </div>
                </text>;
    }
    
    public async Task GetFriendData()
    {
        Friends = await UserInteractionService.GetAllFriends();
    }

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } = 
    [
        InteractionEvent.Unfriend,
        InteractionEvent.RequestAccepted
    ];

    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetFriendData();
        StateHasChanged();
    }
}
