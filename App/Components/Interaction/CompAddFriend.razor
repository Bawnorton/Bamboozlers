@inherits UserViewComponentBase
@implements IInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Components.Utility
@using Blazorise.Extensions

<ModalContent Centered Size="ModalSize.Large">
    <ModalHeader>
        <ModalTitle>Add Friends</ModalTitle>
    </ModalHeader>
    <ModalBody>
        <Heading>Find users by their username or display name.</Heading>
        <Divider/>
        <Div Style="display: block">
            <div style="display: block;">
                <TextEdit @bind-Text="SearchQuery"
                          Style="display: inline-flex; width: 75%"
                          ElementId="search-bar"
                          MaskType="MaskType.RegEx"
                          EditMask="^(?:_?[a-zA-Z0-9]+)*_?$"
                          Placeholder="Find users by their username or display name"/>
                <div style="display: inline-flex">
                    <CompActionButton ActionCallback="@(async () => await PerformSearch())"
                                      IconName="@IconName.Search"
                                      ColumnWrapped="@false"/>
                </div>
            </div>
            <div style="display: block; margin-left: 5px; margin-right: 5px;" class="settings-container scrollbar-container">
                <Divider/>
                @if (CurrentSearchResults.Count > 0)
                {
                    foreach (var user in CurrentSearchResults)
                    {
                        if (IncomingRequests.FirstOrDefault(u => u.SenderID == user.Id) is not null)
                        {
                            @GetUserFragment(user, true);
                        }
                        else if (OutgoingRequests.FirstOrDefault(u => u.ReceiverID == user.Id) is not null)
                        {
                            @GetUserFragment(user, receivedFr: true);
                        }
                        else
                        {
                            @GetUserFragment(user);
                        }
                    }
                }
            </div>
        </Div>
    </ModalBody>
</ModalContent>

@code {
    [Inject] private IDbContextFactory<AppDbContext> DbContextFactory { get; set; } = default!;
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;

    [CascadingParameter] public EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }

    private List<FriendRequest> IncomingRequests { get; set;} = [];
    private List<FriendRequest> OutgoingRequests { get; set;} = [];
    private List<User> CurrentSearchResults { get; set; } = [];

    private string SearchQuery { get; set; } = "";

    private User Self { get; set; } = default!;
    private List<User> Ignore { get; set;} = [];

    protected override async Task OnInitializedAsync()
    {
        Self = (await AuthService.GetUser())!;
        UserInteractionService.AddSubscriber(this);
        await GetInteractionData();
    }
    
    private async Task PerformSearch()
    {
        if (SearchQuery.Length == 0)
            return;
        
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var useQuery = SearchQuery.ToLower();
        var matches = dbContext.Users.Where(
                u => (u.UserName != null && u.UserName.ToLower().StartsWith(useQuery))
                     || (u.DisplayName != null && u.DisplayName.ToLower().StartsWith(useQuery)))
            .Where(u => !Ignore.Contains(u));
        
        var len = matches.Count();
        CurrentSearchResults = matches.Take(int.Max(len,100)).ToList();
    }

    private async Task GetInteractionData()
    {
        Ignore = [Self];
        Ignore.AddRange(await UserInteractionService.GetAllFriends());
        Ignore.AddRange(await UserInteractionService.GetAllBlocked());
        Ignore.AddRange(await UserInteractionService.GetAllBlockedBy());
        IncomingRequests = await UserInteractionService.GetAllIncomingRequests();
        OutgoingRequests = await UserInteractionService.GetAllOutgoingRequests();
    }
    
    private RenderFragment GetUserFragment(User user, bool sentFr = false, bool receivedFr = false)
    {
        var eventType = InteractionEvent.RequestSent;
        if (sentFr) eventType = InteractionEvent.RequestAccepted;
        else if (receivedFr) eventType = InteractionEvent.RequestPending;
        RenderFragment button = @<text>
                                     <CompInteractionButton EventKind="@eventType"
                                                            UserId="@user.Id"
                                                            ButtonId="interact-button"/>
                                 </text>;
        return @<text>
                    <CompUserTab User="@user" Button="@button"/>
                    <Divider/>
                </text>;
    }


    public List<InteractionEvent> WatchedInteractionEvents { get; set; } =
    [
        InteractionEvent.General,
        InteractionEvent.RequestSent,
        InteractionEvent.RequestAccepted
    ];

    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetInteractionData();
        await InvokeAsync(StateHasChanged);
    }
}


