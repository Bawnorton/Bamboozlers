@inherits UserViewComponentBase
@implements IInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.Utility
@using Bamboozlers.Classes.Utility.Observer
@using Blazorise.Extensions

<div style="margin-top: 5px">
    <Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="SelectedTab">
        <Items>
            <Tab Name="Incoming" ElementId="incoming-toggle">
                @if (IncomingFriendRequests.Count > 0)
                {
                    <Badge ElementId="incoming-badge" Color="Color.Danger">
                        @IncomingFriendRequests.Count
                    </Badge>  
                } 
                Received Friend Requests
            </Tab>
            <Tab Name="Outgoing" ElementId="outgoing-toggle">
                @if (OutgoingFriendRequests.Count > 0)
                {
                    <Badge ElementId="outgoing-badge" Color="Color.Dark">
                        @OutgoingFriendRequests.Count
                    </Badge>  
                } 
                Sent Friend Requests
            </Tab>
        </Items>
        <Content>
            <TabPanel Name="Incoming">
                <Divider/>
                <div id="incoming-requests" style="display: inline-block; margin: 10px; width: 90%;">
                    @if (IncomingFriendRequests.Count > 0)
                    {
                        foreach (var request in IncomingFriendRequests)
                        {
                            RenderFragment buttons = @<text>
                                                          <CompInteractionButton EventKind="InteractionEvent.RequestDeclined"
                                                                                 UserId="@request.SenderID"
                                                                                 ButtonId="decline-button"/>
                                                          <CompInteractionButton EventKind="InteractionEvent.RequestAccepted"
                                                                                 UserId="@request.SenderID"
                                                                                 ButtonId="accept-button"/>
                                                      </text>;
                            <CompUserTab @key=@request 
                                         User="@request.Sender" 
                                         Button="@buttons"/> 
                            <Divider/>
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't received any friend requests from other users.</p>
                    }
                </div>
            </TabPanel>
            <TabPanel Name="Outgoing">
                <Divider/>
                <div id="outgoing-requests" style="display: inline-block; margin: 10px; width: 90%;">
                    @if (OutgoingFriendRequests.Count > 0)
                    {
                        foreach (var request in OutgoingFriendRequests)
                        {
                            RenderFragment button = @<CompInteractionButton EventKind="InteractionEvent.RequestRevoked"
                                                                            UserId="@request.ReceiverID"
                                                                            ButtonId="revoke-button"/>;
                            <CompUserTab @key=@request 
                                         User="@request.Receiver" 
                                         Button="@button"/> 
                            <Divider/>
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't sent any friend requests to other users.</p>
                    }
                </div>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;

    private string SelectedTab { get; set; } = "Incoming";
    
    private List<FriendRequest> IncomingFriendRequests { get; set; } = [];
    private List<FriendRequest> OutgoingFriendRequests { get; set; } = [];

    public List<int?> WatchedIDs { get; } = [];
    
    private User Self { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserInteractionService.AddSubscriber(this);
        await GetFriendsData();
    }
    
    private async Task GetFriendsData()
    {
        IncomingFriendRequests = await UserInteractionService.GetAllIncomingRequests();
        OutgoingFriendRequests = await UserInteractionService.GetAllOutgoingRequests();
    }

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } = 
    [
        InteractionEvent.RequestAccepted,
        InteractionEvent.RequestDeclined,
        InteractionEvent.RequestRevoked,
        InteractionEvent.RequestSent
    ];

    public async Task OnUpdate(InteractionEvent evt)
    {
        await GetFriendsData();
        await InvokeAsync(StateHasChanged);
    }
}
