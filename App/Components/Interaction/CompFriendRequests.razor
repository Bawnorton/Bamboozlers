@inherits UserViewComponentBase
@implements IAsyncInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.VisualUtility
@using Bamboozlers.Classes.Utility.Observer
@using Blazorise.Extensions

<div style="margin-top: 5px">
    <Tabs @bind-SelectedTab="SelectedTab">
        <Items>
            <Tab Name="Incoming">
                @if (IncomingFriendRequests.Count > 0)
                {
                    <Badge Color="Color.Dark">
                        @IncomingFriendRequests.Count
                    </Badge>  
                } 
                Received Friend Requests
            </Tab>
            <Tab Name="Outgoing">
                @if (OutgoingFriendRequests.Count > 0)
                {
                    <Badge Color="Color.Dark">
                        @OutgoingFriendRequests.Count
                    </Badge>  
                } 
                Sent Friend Requests
            </Tab>
        </Items>
        <Content>
            <TabPanel Name="Incoming">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px;">
                    @if (OutgoingFriendRequests.Count > 0)
                    {
                        foreach (var request in IncomingFriendRequests)
                        {
                            @GetIncomingFriendRequestFragment(request);
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't received any friend requests from other users.</p>
                    }
                </div>
            </TabPanel>
            <TabPanel Name="Outgoing">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px;">
                    @if (OutgoingFriendRequests.Count > 0)
                    {
                        foreach (var request in IncomingFriendRequests)
                        {
                            @GetOutgoingFriendRequestFragment(request)
                            ;
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't sent any friend requests to other users.</p>
                    }
                </div>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] private EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] private EventCallback ClosePopupCallback { get; set; }

    private string SelectedTab { get; set; } = "Incoming";
    
    private List<FriendRequest> IncomingFriendRequests { get; set; } = [];
    private List<FriendRequest> OutgoingFriendRequests { get; set; } = [];

    public List<int?> WatchedIDs { get; }
    
    private User Self { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserInteractionService.AddSubscriber(this);
        await GetFriendsData();
    }

    public RenderFragment GetIncomingFriendRequestFragment(FriendRequest friendRequest)
    {
        var senderRecord = UserRecord.From(friendRequest.Sender);
        return @<text>
                    <div id="friend-request" style="display: inline">
                        <div id="@($"for-user-{senderRecord.UserName}")"
                             style="display:inline">
                            Friend request from
                            <img class="message-avatar" src="@senderRecord.Avatar" alt=""/>
                            <CompInteractUsername User="@friendRequest.Sender"/>
                        </div>
                        <div id="action-buttons"
                             style="display: inline; float: right;">
                            <CompActionButton ButtonId="accept-button"
                                              IconName="@IconName.UserPlus"
                                              ActionCallback="@(async () => await UserInteractionService.AcceptFriendRequest(friendRequest.SenderID))"
                                              ColumnWrapped="@false"/>
                            <CompActionButton ButtonId="decline-button"
                                              Color="@Color.Danger"
                                              IconName="@IconName.Ban"
                                              ActionCallback="@(async () => await UserInteractionService.DeclineFriendRequest(friendRequest.ReceiverID))"
                                              ColumnWrapped="@false"/>
                        </div>
                    </div>
                </text>;
    }
    
    public RenderFragment GetOutgoingFriendRequestFragment(FriendRequest friendRequest)
    {
        var receiverRecord = UserRecord.From(friendRequest.Sender);
        return @<text>
                    <div id="friend-request" style="display: inline">
                        <div id="@($"for-user-{receiverRecord.UserName}")" 
                             style="display:inline">
                             Friend request sent to
                             <img class="message-avatar" src="@receiverRecord.Avatar" alt=""/>   
                             <CompInteractUsername User="@friendRequest.Receiver"/>
                        </div>
                        <div id="action-buttons" 
                             style="display: inline; float: right;">
                            <CompActionButton ButtonId="revoke-button"
                                              IconName="@IconName.Ban"
                                              Color="@Color.Danger"
                                              ButtonCaption="Revoke Friend Request"
                                              ActionCallback="@(async () => await UserInteractionService.RevokeFriendRequest(friendRequest.ReceiverID))"
                                              ColumnWrapped="@false"/>
                        </div>
                    </div>
                </text>;
    }
    
    private async Task GetFriendsData()
    {
        IncomingFriendRequests = await UserInteractionService.GetAllIncomingRequests();
        OutgoingFriendRequests = await UserInteractionService.GetAllOutgoingRequests();
    }
    
    public async Task OnInteractionUpdate()
    {
        await GetFriendsData();
        StateHasChanged();
    }
}