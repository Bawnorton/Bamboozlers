@inherits UserViewComponentBase
@implements IInteractionSubscriber

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.Utility
@using Bamboozlers.Classes.Utility.Observer
@using Blazorise.Extensions

<div style="margin-top: 5px">
    <Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="SelectedTab">
        <Items>
            <Tab Name="Incoming">
                @if (IncomingFriendRequests.Count > 0)
                {
                    <Badge Color="Color.Danger">
                        @IncomingFriendRequests.Count
                    </Badge>  
                } 
                Received Friend Requests
            </Tab>
            <Tab Name="Outgoing">
                @if (OutgoingFriendRequests.Count > 0)
                {
                    <Badge Color="Color.Dark">
                        @OutgoingFriendRequests.Count
                    </Badge>  
                } 
                Sent Friend Requests
            </Tab>
        </Items>
        <Content>
            <TabPanel Name="Incoming">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px; width: 50%;">
                    @if (IncomingFriendRequests.Count > 0)
                    {
                        foreach (var request in IncomingFriendRequests)
                        {
                            @GetIncomingFriendRequestFragment(request)
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't received any friend requests from other users.</p>
                    }
                </div>
            </TabPanel>
            <TabPanel Name="Outgoing">
                <Divider/>
                <div style="display: inline-block; margin-left: 10px; margin-right: 10px; width: 50%;">
                    @if (OutgoingFriendRequests.Count > 0)
                    {
                        foreach (var request in OutgoingFriendRequests)
                        {
                            @GetOutgoingFriendRequestFragment(request)
                        }
                    }
                    else
                    {
                        <p>Nothing to see here...</p>
                        <p>You haven't sent any friend requests to other users.</p>
                    }
                </div>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;

    private string SelectedTab { get; set; } = "Incoming";
    
    private List<FriendRequest> IncomingFriendRequests { get; set; } = [];
    private List<FriendRequest> OutgoingFriendRequests { get; set; } = [];

    private List<RenderFragment> IncomingFragments { get; set; } = [];
    private List<RenderFragment> OutgoingFragments { get; set; } = [];

    public List<int?> WatchedIDs { get; } = [];
    
    private User Self { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserInteractionService.AddSubscriber(this);
        await GetFriendsData();
    }

    public RenderFragment GetIncomingFriendRequestFragment(FriendRequest friendRequest)
    {
        return @<text>
                    <div id="friend-request" style="display: block; padding-top: 5px; padding-bottom: 5px;">
                        <div id="@($"from-user-{friendRequest.Sender.UserName}")" 
                             style="display:inline-flex">
                            Friend request sent by
                            <CompInlineUserWithAvatar User="@friendRequest.Sender"/>
                        </div>
                        <CompInteractionButton EventKind="InteractionEvent.RequestDeclined"
                                               UserId="@friendRequest.SenderID"
                                               RightFloating="@true"
                                               ButtonId="decline-button"/>
                        <CompInteractionButton EventKind="InteractionEvent.RequestAccepted"
                                               UserId="@friendRequest.SenderID"
                                               RightFloating="@true"
                                               ButtonId="accept-button"/>
                        <Divider/>
                    </div>
                </text>;
    }
    
    public RenderFragment GetOutgoingFriendRequestFragment(FriendRequest friendRequest)
    {
        return @<text>
                    <div id="friend-request" style="display: block">
                        <div id="@($"for-user-{friendRequest.Sender.UserName}")" 
                             style="display:inline-flex">
                            Friend request sent to
                            <CompInlineUserWithAvatar User="@friendRequest.Receiver"/>
                        </div>
                        <CompInteractionButton EventKind="InteractionEvent.RequestRevoked" 
                                               UserId="@friendRequest.ReceiverID"
                                               RightFloating="@true"
                                               ButtonId="revoke-button"/>
                        <Divider/>
                    </div>
                </text>;
    }
    
    private async Task GetFriendsData()
    {
        IncomingFriendRequests = await UserInteractionService.GetAllIncomingRequests();
        OutgoingFriendRequests = await UserInteractionService.GetAllOutgoingRequests();
        IncomingFragments = IncomingFriendRequests.Select(GetIncomingFriendRequestFragment).ToList(); 
        OutgoingFragments = OutgoingFriendRequests.Select(GetOutgoingFriendRequestFragment).ToList();
    }

    public List<InteractionEvent> WatchedInteractionEvents { get; set; } = 
    [
        InteractionEvent.RequestAccepted,
        InteractionEvent.RequestDeclined,
        InteractionEvent.RequestRevoked,
        InteractionEvent.RequestSent
    ];

    public async Task OnUpdate(InteractionEvent evt)
    {
        switch (evt)
        {
            case InteractionEvent.RequestAccepted: case InteractionEvent.RequestDeclined:
                IncomingFriendRequests = await UserInteractionService.GetAllIncomingRequests();
                IncomingFragments = IncomingFriendRequests.Select(GetIncomingFriendRequestFragment).ToList(); 
                break;
            case InteractionEvent.RequestRevoked: case InteractionEvent.RequestSent:
                OutgoingFriendRequests = await UserInteractionService.GetAllOutgoingRequests();
                OutgoingFragments = OutgoingFriendRequests.Select(GetOutgoingFriendRequestFragment).ToList();
                break;
            default:
                await GetFriendsData();
                break;
        }
        await InvokeAsync(StateHasChanged);
    }
}
