@inherits UserViewComponentBase
@implements IInteractionSubscriber

@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Components.VisualUtility

<div style="margin-top: 10px">
    <Heading>
        @if (Blocked.Count > 0)
        {
            <Badge ElementId="BlockCountBadge"
                   Color="Color.Dark">
                @Blocked.Count
            </Badge>
        }
        Blocked Users
    </Heading>
    <Divider/>
    <div style="display: inline-block; margin-left: 10px; margin-right: 10px;">
        @if (Blocked.Count > 0)
        {
            foreach (var user in Blocked)
            {
                @GetBlockedUserFragment(user);
            }
        }
        else
        {
            <p>Nothing to see here...</p>
            <p>You haven't blocked any users.</p>
        }
    </div>
</div>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;

    private User Self { get; set; } = default!;
    private List<User> Blocked { get; set; } = [];
    private List<User> BlockedBy { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Self = (await AuthService.GetUser())!;
        UserInteractionService.AddSubscriber(this);
        await GetBlockedData();
    }

    public RenderFragment GetBlockedUserFragment(User user)
    {
        var blockedRecord = UserRecord.From(user);
        var isAlsoBlocker = BlockedBy.FirstOrDefault(u => u.Id == user.Id) is not null;
        var imgSrc = isAlsoBlocker ? "images/default_profile.png" : blockedRecord.Avatar; 
        return @<text>
                    <div style="display: block; padding-top: 5px; padding-bottom: 5px;" 
                         id="@($"blocked-user-{user.UserName}")">
                        <div style="display: inline-flex; margin-right: 20px">
                            <img style="margin-left: 5px; margin-right: 5px;" class="_32x32 border-mask" src="@imgSrc" alt=""/>
                            <CompInteractUsername User="@user"/>                            
                        </div>
                        <div style="display: inline-flex;">
                            <CompActionButton Color="Color.Danger" 
                                              ButtonCaption="Unblock User"
                                              IconName="@IconName.Shield"
                                              ActionCallback="@(async () => await UserInteractionService.UnblockUser(user.Id))"
                                              ColumnWrapped="@false"/>
                        </div>
                    </div>
                </text>;
    }
    
    public async Task GetBlockedData()
    {
        Blocked = await UserInteractionService.GetAllBlocked();
        BlockedBy = await UserInteractionService.GetAllBlockedBy();
    }
    
    public async Task OnInteractionUpdate()
    {
        await GetBlockedData();
        StateHasChanged();
    }
}