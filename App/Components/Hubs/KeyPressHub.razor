@implements IAsyncDisposable
@implements IAsyncSimplePublisher<IAsyncKeySubscriber>

@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Func

@inject IKeyPressService KeyPressService

<CascadingValue Value="_addKeySubscriber">
    <CascadingValue Value="_removeKeySubscribers" Name="URKeyPressSubscribers">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private Register<IAsyncKeySubscriber> _addKeySubscriber = default!;
    private Unregister<Type[]> _removeKeySubscribers = default!;

    public List<IAsyncKeySubscriber> Subscribers { get; } = [];

    protected override void OnInitialized()
    {
        _addKeySubscriber = AddSubscriber;
        _removeKeySubscribers = RemoveSubscribers;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await KeyPressService.StartListeningAsync();
        KeyPressService.KeyPressed += OnKeyPressed;
        KeyPressService.KeyReleased += OnKeyReleased;
    }
    
    public bool AddSubscriber(IAsyncKeySubscriber subscriber)
    {
        if (Subscribers.Contains(subscriber)) return false;
        Subscribers.Add(subscriber);
        return true;
    }

    private int RemoveSubscribers(Type[] types)
    {
        var runningCount = 0;
        foreach (var type in types)
        {
            if (type.IsAssignableFrom(typeof(IAsyncPacketSubscriber)))
            {
                throw new ArgumentException($"Type {type.Name} is not of type {nameof(IAsyncKeySubscriber)}");
            }
            runningCount += Subscribers.RemoveAll(subscriber => subscriber.GetType() == type);
        }
        return runningCount;
    }

    private async void OnKeyPressed(object? sender, KeyEventArgs e)
    {
        foreach (var subscriber in Subscribers)
        {
            await subscriber.OnKeyPressed(e);
        }
    }
    
    private async void OnKeyReleased(object? sender, KeyEventArgs e)
    {
        foreach (var subscriber in Subscribers)
        {
            await subscriber.OnKeyReleased(e);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            KeyPressService.KeyPressed -= OnKeyPressed;
            KeyPressService.KeyReleased -= OnKeyReleased;
            await KeyPressService.StopListeningAsync();
        }
        catch (JSDisconnectedException)
        {
            // Ignored
        }
    }
}