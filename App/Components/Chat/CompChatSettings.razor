@inherits UserViewComponentBase
@implements ICompImageUploader
@implements IAsyncGroupSubscriber

@using Bamboozlers.Classes.AppDbContext
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Services
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Components.VisualUtility
@using System.Xml.Schema
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Utility.Observer

@inject IDbContextFactory<AppDbContext> Db

<ModalContent Centered>
    <ModalHeader>
        <ModalTitle>Chat Settings</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <Alert ElementId="settings-alert" Color="@AlertArguments.AlertColor" @Visible="@AlertArguments.AlertVisible">
            <AlertMessage>
                @AlertArguments.AlertMessage
                <CloseButton Clicked="@(() => AlertArguments = new AlertArguments())" 
                             Style="--bs-btn-close-white-filter: black;" 
                             VerticalAlignment="VerticalAlignment.Middle" 
                             Float="Float.End" 
                             TextColor="TextColor.Warning"/>
            </AlertMessage>
            <AlertDescription>@AlertArguments.AlertDescription</AlertDescription>
        </Alert>
        <Div Display="Display.InlineFlex" Class="justify-content-between align-items-center w-100 mb-2">
            <Div>
                <Row>
                    <Label Width="@Width.Px(128)" Height="@Height.Px(128)" Class="overlay-wrapper" for="input-file">
                        @if (Chat.Avatar is not null)
                        {
                            <Image ElementId="avatar-display"
                                   Class="border-mask overlay-base fit"
                                   Source="@($"data:image/png;base64,{Convert.ToBase64String(Chat.Avatar)}")"/>
                        }
                        else
                        {
                            <Image ElementId="avatar-display"
                                   Class="border-mask overlay-base fit"
                                   Source="images/default_profile.png"/>
                        }
                        <Image ElementId="hover-effect"
                               Class="border-mask overlay fit"
                               Source="images/edit_overlay.png"/>
                    </Label>
                    <InputFile id="input-file" OnChange="@OnFileUpload" hidden/>
                </Row>
                <Row>
                    @if (Chat.Avatar is not null)
                    {
                        <Paragraph TextSize="TextSize.Small" Display="Display.Inline" 
                                   role="button" Class="text-decoration-underline mb-0 text-danger-emphasis" 
                                   ElementId="removeMember" @onclick="@DeleteAvatar">Delete Avatar</Paragraph>
                    }
                </Row>
            </Div>
            
            <TextEdit Class="w-50" @bind-Text="@Chat.Name" ElementId="chat-name" Placeholder="Chat Name"></TextEdit>
        </Div>
        @if (Self.Id == Chat.OwnerID)
        {
            <CompSimpleDivider/>
            <Div>
                <Heading ElementId="mod-heading" Size="HeadingSize.Is4">Moderators</Heading>
                <Paragraph TextSize="TextSize.Small" TextColor="TextColor.Warning">These users can add and remove members and change the chat settings.</Paragraph>
                @foreach (var user in Members)
                {
                    <Check TValue="bool" Checked="@IsChecked(user)" CheckedChanged="@(value => Change(value, user))">
                        @if (user.Avatar != null)
                        {
                            <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}") Class="message-avatar" alt=""/>
                        }
                        @(user.DisplayName ?? user.UserName)
                    </Check>
                }
            </Div>
        }

    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Danger" Clicked="ClosePopupCallback">Cancel</Button>
        <Button ElementId="settings-save" Color="Color.Success" Clicked="@SaveChanges">Save Changes</Button>
    </ModalFooter>
</ModalContent>

@code{
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }
    [CascadingParameter] public int? ChatID { get; set; }

    private GroupChat? Chat { get; set; }

    public AlertArguments AlertArguments { get; set; } = new();

    private List<UserVisualRecord> Moderators { get; set; } = [];
    private List<UserVisualRecord> Members { get; set; } = [];
    
    private User? Self { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGroupData();
    }
    
    private void DeleteAvatar()
    {
        if (Chat is null)
            return;
        
        AlertArguments = new AlertArguments();
        Chat.Avatar = null;
    }
    
    public async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        if (Chat is null)
            return;
        
        AlertArguments = await ((ICompImageUploader)this).OnFileUpload(args, async bytes =>
        {
            return await Task.Run(() =>
                {
                    Chat.Avatar = bytes;
                    return true;
                }
            );
        });
    }

    private void Change(bool isChecked, UserVisualRecord user)
    {
        if (isChecked)
        {
            Moderators.Add(user);
        }
        else
        {
            Moderators.Remove(user);
        }
    }

    private bool IsChecked(UserVisualRecord user)
    {
        return Moderators.Any(a => a.UserName == user.UserName);
    }
    
    private async Task LoadGroupData()
    {
        Self = await AuthService.GetUser();
        if (Self is null) 
            return;
        
        await using var db = await Db.CreateDbContextAsync();

        Chat = db.GroupChats.Where(c => c.ID == ChatID)
            .Include(c => c.Users).ThenInclude(u => u.ModeratedChats)
            .Include(c => c.Moderators)
            .First();
        
        Members = Chat.Users.Where(w => w.Id != Self.Id && w.Id != Chat.OwnerID).Select(s => new UserVisualRecord(
                s.UserName!,
                s.DisplayName,
                s.Avatar
            )
        ).ToList();
        
        var mods =
        Moderators = Chat.Moderators.Select(s => new UserVisualRecord(
                s.UserName!,
                s.DisplayName,
                s.Avatar
            )
        ).ToList();
    }
    
    private async Task SaveChanges()
    {
        if (Chat is null)
            return;
        
        if (Chat.Name.IsNullOrEmpty())
        {
            AlertArguments = new AlertArguments(
                Color.Danger,
                true,
                "Chat name cannot be empty."
            );
            return;
        }
        
        try
        {
            await using var dbContext = await Db.CreateDbContextAsync();
            
            var editedMods = Chat.Moderators.Where(m => Moderators.Exists(m0 => m0.UserName == m.UserName)).ToList();
            var addedMods = editedMods.Except(Chat.Moderators).ToList();
            var removedMods = Chat.Moderators.Except(editedMods).ToList();

            Chat.Moderators = editedMods;
            foreach (var user in Chat.Users.Where(addedMods.Contains))
            {
                user.ModeratedChats.Add(Chat);
            }

            foreach (var user in Chat.Moderators.Where(removedMods.Contains))
            {
                user.ModeratedChats.Remove(Chat);
            }
            
            dbContext.Update(Chat);
            await dbContext.SaveChangesAsync();
            await ClosePopupCallback.InvokeAsync();
        }
        catch (Exception ex)
        {
            AlertArguments = new AlertArguments(
                Color.Danger,
                true,
                "An error occurred while saving changes.",
                $"{ex.Message} {ex.StackTrace}"
            );
        }
    }

    public async Task OnGroupUpdate()
    {
        await LoadGroupData();
        StateHasChanged();
    }
}
