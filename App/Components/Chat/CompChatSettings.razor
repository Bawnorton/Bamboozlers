@inherits UserViewComponentBase

@implements ICompImageUploader
@implements Bamboozlers.Classes.Utility.Observer.IAsyncGroupSubscriber

@using Bamboozlers.Classes.Services.UserServices
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Components.VisualUtility

@inject IDbContextFactory<AppDbContext> Db

<ModalContent Centered Size="ModalSize.Large">
    <ModalHeader>
        <ModalTitle>@(Chat is null ? "Group Chat" : Chat.Name) Settings</ModalTitle>
        <CloseButton/>
    </ModalHeader>
    <ModalBody>
        <Alert ElementId="settings-alert" Color="@AlertArguments.AlertColor" Visible="@AlertArguments.AlertVisible">
            <AlertMessage>
                @AlertArguments.AlertMessage
                <CloseButton Clicked="@(() => AlertArguments = new AlertArguments())"
                             Style="--bs-btn-close-white-filter: black;"
                             VerticalAlignment="VerticalAlignment.Middle"
                             Float="Float.End"
                             TextColor="TextColor.Warning"/>
            </AlertMessage>
            <AlertDescription>@AlertArguments.AlertDescription</AlertDescription>
        </Alert>
        <Div Display="Display.InlineFlex" Class="justify-content-between align-items-center w-100 mb-2">
            @GroupDisplay
        </Div>
        <CompSimpleDivider/>
        <Div style="margin-left: 5dvw; margin-right: 5dvw;">
            <Div ElementId="mod-heading" Size="HeadingSize.Is4">Group Moderators</Div>
            @ModList
            <CompSimpleDivider/>
            <Heading ElementId="member-heading" Size="HeadingSize.Is4">Group Members</Heading>
            @MemberList
        </Div>
    </ModalBody>
    <ModalFooter>
        @if (Chat?.OwnerID != Self?.Id)
        {
            <CompActionButton ButtonId="leaveGroup"
                              ButtonCaption="Leave Group"
                              Color="Color.Danger"
                              IconName="IconName.Running"
                              ColumnWrapped="@false"
                              ActionCallback="@(async () => { await UserGroupService.LeaveGroup(ChatID); await ClosePopupCallback.InvokeAsync(); })"/>
        }
    </ModalFooter>
</ModalContent>

@code{
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;

    [CascadingParameter] public EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }

    [Parameter] public int? ChatID { get; set; }

    public List<int?> WatchedIDs { get; set; } = [];

    private GroupChat? Chat { get; set; }
    private User? Self { get; set; }

    public AlertArguments AlertArguments { get; set; } = new();

    private RenderFragment? GroupDisplay { get; set; }
    private RenderFragment? ModList { get; set; }
    private RenderFragment? MemberList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserGroupService.AddSubscriber(this);
        await LoadGroupData();
    }

    protected override async Task OnParametersSetAsync()
    {
        WatchedIDs = [ChatID];
        await LoadGroupData();
    }

    public void DeleteAvatar()
    {
        AlertArguments = new AlertArguments();
        Chat!.Avatar = null;
    }

    public async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        AlertArguments = await ((ICompImageUploader)this).OnFileUpload(args, async bytes =>
        {
            return await Task.Run(() =>
                {
                    Chat!.Avatar = bytes;
                    return true;
                }
            );
        });
    }

    private async Task LoadGroupData()
    {
        Self = await AuthService.GetUser();
        if (Self is null)
            return;

        await using var db = await Db.CreateDbContextAsync();

        Chat = db.GroupChats.Where(c => c.ID == ChatID)
            .Include(c => c.Users).ThenInclude(u => u.ModeratedChats)
            .Include(c => c.Moderators)
            .First();

        var owner = await db.Users.Where(u => u.Id == Chat.OwnerID).FirstOrDefaultAsync();
        MemberList = @<div id="memberList">
                         @foreach (var user in Chat.Users)
                         {
                             <div id="@($"{Chat.Name}_memberDisplay")">
                                 @GetUserFragment(user)
                                 <Divider/>
                             </div>
                         }
                     </div>;

        ModList = @<text>
                       @if (Chat.Moderators.FirstOrDefault(u => u.Id == Self.Id) is not null || Self.Id == owner.Id)
                       {
                           <Paragraph TextSize="TextSize.Small" TextColor="TextColor.Warning">
                               These users can add and remove members and change the chat settings.
                           </Paragraph>
                       }
                       <div id="modList">
                           @if (owner is not null)
                           {
                               <div id="@($"{Chat.Name}_memberDisplay")">
                                   @GetUserFragment(owner)
                                   <Divider/>
                               </div>
                           }
                           @foreach (var user in Chat.Moderators)
                           {
                               <div id="@($"{Chat.Name}_memberDisplay")">
                                   @GetUserFragment(user)
                                   <Divider/>
                               </div>
                           }
                       </div>
                   </text>;

        if (Self.Id == Chat.OwnerID || Chat.Moderators.FirstOrDefault(m => m.Id == Self.Id) is not null)
        {
            GroupDisplay = @<text>
                                <Div id="@($"{Chat.Name}_displayDiv")">
                                    <Row ElementId="@($"{Chat.Name}_avatarEdit")">
                                        <Label Width="@Width.Px(128)" Height="@Height.Px(128)" Class="overlay-wrapper" Style="margin-left: 20px" for="input-file">
                                            <Image ElementId="avatar-display"
                                                   Class="border-mask overlay-base fit"
                                                   Source="@(Chat?.Avatar is null ? "images/default_profile.png" : $"data:image/png;base64,{Convert.ToBase64String(Chat.Avatar)}")"/>
                                            <Image ElementId="hover-effect"
                                                   Class="border-mask overlay fit"
                                                   Source="images/edit_overlay.png"/>
                                        </Label>
                                        <InputFile id="input-file" OnChange="@OnFileUpload" hidden/>
                                    </Row>
                                    <Row>
                                        @if (Chat?.Avatar is not null)
                                        {
                                            <Paragraph ElementId="@($"{Chat.Name}_avatarDelete")"
                                                       TextSize="TextSize.Small" Display="Display.Inline"
                                                       role="button"
                                                       Class="text-decoration-underline mb-0 text-danger-emphasis"
                                                       @onclick="@DeleteAvatar">
                                                Delete Avatar
                                            </Paragraph>
                                        }
                                    </Row>
                                </Div>
                                <TextEdit Class="w-50"
                                          @bind-Text="Chat.Name"
                                          ElementId="chat-name"
                                          Placeholder="Chat Name">
                                </TextEdit>
                                <Button Style="float: right; margin-left: 2dvw; margin-right: 2dvh;"
                                        ElementId="settings-save" Color="Color.Success"
                                        Clicked="@SaveChanges">
                                    Save Changes
                                </Button>
                            </text>;
        }
        else
        {
            GroupDisplay = @<text>
                                <Div ElementId=@($"{Chat.Name}_displayDiv")>
                                    <Row>
                                        <Div Style="margin-left: 20px">
                                            <Image Width="@Width.Px(128)" Height="@Height.Px(128)" ElementId="avatar-display"
                                                   Class="border-mask"
                                                   Source="@(Chat?.Avatar is null ? "images/default_profile.png" : $"data:image/png;base64,{Convert.ToBase64String(Chat.Avatar)}")"/>
                                        </Div>
                                    </Row>
                                </Div>
                                <TextEdit Class="w-50"
                                          Text="@(Chat is null ? "Chat" : Chat.Name)"
                                          ElementId="chat-name"
                                          Placeholder="Chat Name"
                                          Disabled/>

                            </text>;
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            if (Chat is null)
            {
                AlertArguments = new AlertArguments(
                    Color.Success,
                    true,
                    "An error occurred while saving changes.",
                    "An unknown error occurred. Please try again."
                );
                return;
            }

            var result = await UserGroupService.UpdateGroupDisplay(ChatID, Chat.Avatar, Chat.Name);
            if (!result.Succeeded)
            {
                AlertArguments = new AlertArguments(
                    Color.Danger,
                    true,
                    "Unsuccessful attempt to make changes.",
                    $"{string.Join(",", result.Errors.Select(s => s.Description))}"
                );
                return;
            }

            await LoadGroupData();
        }
        catch (Exception ex)
        {
            // TODO: Don't tell the user the stack trace?
            AlertArguments = new AlertArguments(
                Color.Danger,
                true,
                "An error occurred while saving changes.",
                $"{ex.Message} {ex.StackTrace}"
            );
        }
    }

    private RenderFragment? GetUserFragment(User user)
    {
        if (Self is null)
            return null;

        var isOwner = Chat!.OwnerID == user.Id;
        var isMod = Chat.Moderators.Contains(user);

        return @<div style="display: block" id="@($"{user.UserName}_section")">
            <div style="display: inline-block">
                <Image ElementId="@($"{user.UserName}_avatar")"
                       Class="_32x32 message-avatar"
                       Source=@(user.Avatar is null ? "images/default_profile.png" : $"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}")
                       alt=""/>
                <CompInteractUsername User="@user"/>
                @if (isOwner)
                {
                    <Badge ElementId="@($"{user.UserName}_badge")"
                           Style="margin-left: 5px; margin-right: 5px;"
                           Color="Color.Success">
                        OWNER
                    </Badge>
                }
                else if (isMod)
                {
                    <Badge ElementId="@($"{user.UserName}_badge")"
                           Style="margin-left: 5px; margin-right: 5px;"
                           Color="Color.Light">
                        MODERATOR
                    </Badge>
                }
            </div>
            @if (!isOwner)
            {
                @if ((Chat.Moderators.FirstOrDefault(u => u.Id == Self.Id) is not null && !isMod) || Chat.OwnerID == Self.Id)
                {
                    @GetKickButton(user)
                }

                @if (Chat.OwnerID == Self.Id)
                {
                    @GetPermsButton(user)
                }
            }
        </div>;
    }

    private RenderFragment? GetPermsButton(User user)
    {
        if (Chat is null)
            return null;

        var isMod = Chat.Moderators.Contains(user);
        return @<div style="display: inline-block; float: right; margin-left: 5px; margin-right: 5px;">
            <CompActionButton ButtonId="@($"{user.UserName}_permsButton")"
                              ButtonCaption="@(isMod ? "Revoke permissions" : "Assign permissions")"
                              Color="@(isMod ? Color.Warning : Color.Success)"
                              IconName="@(isMod ? IconName.Ban : IconName.ShieldAlt)"
                              ColumnWrapped="@false"
                              ActionCallback="@(isMod ? async () => await UserGroupService.RevokePermissions(ChatID, user.Id) : async () => await UserGroupService.AssignPermissions(ChatID, user.Id))"/>
        </div>;
    }

    private RenderFragment GetKickButton(User user)
    {
        return @<div style="display: inline-block; float: right; margin-left: 5px; margin-right: 5px;">
            <CompActionButton ButtonId="@($"{user.UserName}_kickButton")"
                              ButtonCaption="Kick user"
                              Color="Color.Danger"
                              IconName="IconName.Ban"
                              ColumnWrapped="@false"
                              ActionCallback="@(async () => await UserGroupService.RemoveGroupMember(ChatID, user.Id))"/>
        </div>;
    }

    public async Task OnGroupUpdate()
    {
        await LoadGroupData();
        StateHasChanged();
    }

}