@inherits UserViewComponentBase

@implements IAsyncPacketSubscriber
@implements IAsyncKeySubscriber
@implements IAsyncDisposable

@using System.Timers
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Func
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Clientbound.Chat
@using Bamboozlers.Classes.Networking.Packets.Serverbound.Chat
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Utility.Observer

@inject IDbContextFactory<AppDbContext> Db
@inject IJSRuntime JsRuntime

<Div TextColor="TextColor.Light" Position="Position.Absolute" Style="bottom: -25px">
    @TypingString
</Div>

<script>
    function isInputEmpty() {
        let textarea = document.getElementById("message-input");
        if (textarea === null) return true;
        
        return textarea.value.trim() === "";
    }
</script>

@code {

    [Parameter] public int? ChatID { get; set; }
    
    [CascadingParameter] public EventCallback<IPacket> SendToServer { get; set; }
    [CascadingParameter] public Register<IAsyncPacketSubscriber> AddPacketSubscriber { get; set; } = default!;
    [CascadingParameter] public Register<IAsyncKeySubscriber> AddKeySubscriber { get; set; } = default!;
    
    private Timer _typingTimer = new()
    {
        AutoReset = true,
        Enabled = true,
        Interval = 5000
    };
    private long? _lastTypingTime;
    private Dictionary<int, string> _typingUsers = [];
    private string TypingString => _typingUsers.Count switch
    {
        0 => "",
        1 => $"{_typingUsers.First().Value} is typing...",
        _ => $"{string.Join(", ", _typingUsers.Values)} are typing..."
    };
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _typingTimer.Elapsed += async (_, _) =>
        {
            if (_lastTypingTime == null) return;
            if (!(DateTime.Now.Ticks - _lastTypingTime > 7500)) return;
            
            var typingState = new TypingStateC2SPacket
            {
                SenderId = Self!.Id,
                ChatId = (int)ChatID!,
                Typing = false
            };
            await InvokeAsync(() => SendToServer.InvokeAsync(typingState));
            _lastTypingTime = null;
        };
        
        AddPacketSubscriber.Invoke(this);
        AddKeySubscriber.Invoke(this);
    }
    
    public async Task OnPacket(IPacket packet)
    {
        switch (packet)
        {
            case TypingStateS2CPacket typingState:
            {
                if (typingState.UserId == Self!.Id)
                {
                    if (!typingState.Typing)
                    {
                        _lastTypingTime = null;
                    }
                    return;
                }
                
                var typing = typingState.Typing;
                await using var db = await Db.CreateDbContextAsync();
                var user = await db.Users.FirstAsync(u => u.Id == typingState.UserId);
                if (typing)
                {
                    _typingUsers.Add(typingState.UserId, user.GetName());
                }
                else
                {
                    _typingUsers.Remove(typingState.UserId);
                }
                await InvokeAsync(StateHasChanged);
                break;
            }
        }
    }

    public async Task OnKeyPressed(KeyEventArgs keyEventArgs)
    {
        if (_lastTypingTime == null)
        {
            var inputEmpty = await JsRuntime.InvokeAsync<bool>("isInputEmpty");
            if (inputEmpty) return;
            
            var typingState = new TypingStateC2SPacket
            {
                SenderId = Self!.Id,
                ChatId = (int)ChatID!,
                Typing = true
            };
            await SendToServer.InvokeAsync(typingState);
        }
        _lastTypingTime = DateTime.Now.Ticks;
    }

    public Task OnKeyReleased(KeyEventArgs keyEventArgs)
    {
        return Task.CompletedTask;
    }

    public ValueTask DisposeAsync()
    {
        _typingTimer.Dispose();
        return ValueTask.CompletedTask;
    }
}