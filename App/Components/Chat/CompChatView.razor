@inherits UserViewComponentBase;

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes.Interop
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Networking
@using Bamboozlers.Classes.Networking.Packets.Serverbound

@inject IDbContextFactory<AppDbContext> Db

<Layout>
    <LayoutHeader Fixed
                  Padding="Padding.Is3"
                  TextSize="TextSize.Heading5"
                  TextColor="TextColor.Primary"
                  Background="Background.Dark">
        <Text ElementId="header-text">@ChatName</Text>
    </LayoutHeader>
    <LayoutContent Padding="Padding.Is3" ElementId="message-container" Class="scrollbar-container h-100">
        <Layout>
            <LayoutContent>
                <Div>
                    @foreach (var message in Messages)
                    {
                        <CompMessageView Message="message.Message" MessageState="@message.GetMessageState()" EchoRecieved="@message.OthersCanSee"/>
                    }
                </Div>
            </LayoutContent>
        </Layout>
    </LayoutContent>
    <LayoutFooter>
        <Div Position="Position.Sticky" Background="Background.Secondary" TextColor="TextColor.Light" Class="m-4" Style="bottom: 0">
            <Div Display="Display.Flex" Overflow="Overflow.Hidden" >
                <Div contenteditable="true" Width="Width.Is100" Height="Height.Is100" Padding="Padding.Is3"
                     id="message-input" class="@($"message-input word-break {InputEvents.EventCssClass} {ClipboardEvents.EventCssClass}")" data-placeholder="@($"Message {ChatName}")">
                </Div>
            </Div>
        </Div>
    </LayoutFooter>
</Layout>


@code {
    [Parameter] public int ChatID { get; set; }
    private Chat? Chat { get; set; }

    private User? Self { get; set; }

    private string ChatName { get; set; }

    private string TypedMessage { get; set; }

    private List<LinkedMessage> Messages { get; } = [];

    private DateTime? _lastMessageSentAt;

    protected override async Task OnInitializedAsync()
    {
        Self = await AuthService.GetUser();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await using var db = await Db.CreateDbContextAsync();
        Chat = await db.Chats
            .Include(c => c.Users)
            .FirstOrDefaultAsync(c => c.ID == ChatID);
        switch (Chat)
        {
            case null:
                throw new InvalidOperationException($"Chat from ID {ChatID} not found"); 
            case GroupChat groupChat:
                ChatName = groupChat.Name;
                break;
            default:
            {
                var other = Chat.Users.FirstOrDefault(u => u.Id != Self!.Id) ?? Self;
                ChatName = (other!.DisplayName ?? other.UserName)!;
                break;
            }
        }

        await UpdateMessages();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JsInteropHelper.Register();

        const string chatEventViewId = "chat-view";
        InputEvents.DisallowedInputs.Register(chatEventViewId, DisallowedInputsCallback);
        InputEvents.InputKeydown.Register(chatEventViewId, KeydownListener);
        InputEvents.InputKeyup.Register(chatEventViewId, KeyupListener);
        ClipboardEvents.OnPaste.Register(chatEventViewId, PasteListener);
        NetworkEvents.ReadDatabaseRequest.Register(chatEventViewId, DatabaseRequestListener);
        
        StateHasChanged();
    }
    
    private Task<List<KeyData>> DisallowedInputsCallback()
    {
        return Task.FromResult(new List<KeyData> { KeyData.Normal("Enter", "Enter") });
    }

    private async Task DatabaseRequestListener(DbEntry entry)
    {
        if (entry != DbEntry.ChatMessage) return;

        await UpdateMessages();
        Console.WriteLine("Updated messages");
    }

    private async Task<string> PasteListener(string elementId, string content)
    {
        if (elementId != "message-input") return content;

        TypedMessage = content;
        await InvokeAsync(StateHasChanged);
        return content;
    }

    private async Task KeyupListener(string elementId, string key, string s, bool b, bool shift, bool b1, bool b2, string content, bool b3)
    {
        if (elementId != "message-input") return;

        TypedMessage = content;
        switch (key)
        {
            case "Backspace" when TypedMessage.Equals("\n"):
                await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.clear", "message-input");
                break;
            case "Enter" when !shift:
                await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.scrollToBottom", "message-container");
                break;
        }
    }

    private async Task KeydownListener(string elementId, string key, string s, bool b, bool shift, bool b1, bool b2, string s1, bool b3)
    {
        if (elementId != "message-input") return;
        if (key != "Enter" || shift) return;

        await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.clear", "message-input");
        await SendMessage();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateMessages()
    {
        var newMessages = await (await Db.CreateDbContextAsync()).Messages
            .Where(m => m.ChatID == Chat!.ID && (_lastMessageSentAt == null || m.SentAt > _lastMessageSentAt))
            .ToListAsync();
        if (newMessages.Count == 0) return;
            
        newMessages.Sort((a, b) => a.SentAt.CompareTo(b.SentAt));
        Dictionary<int, int> clientOnlyMessages = new();
        for (var index = 0; index < Messages.Count; index++)
        {
            var message = Messages[index];
            if (message.OthersCanSee) continue;
            
            clientOnlyMessages[message.Message.ID] = index;
        }

        var previousLastMessage = Messages.Count == 0 ? null : Messages[^1].Message;
        for (var i = 0; i < newMessages.Count; i++)
        {
            var previous = i == 0 ? previousLastMessage : newMessages[i - 1];
            var newMessage = newMessages[i];
            if (clientOnlyMessages.TryGetValue(newMessage.ID, value: out var existingMessageIndex))
            {
                var clientMessage = Messages[existingMessageIndex];
                clientMessage.OthersCanSee = true;
                clientMessage.Previous = previous;
                continue;
            }
            Messages.Add(new LinkedMessage(newMessage, previous));
        }
        _lastMessageSentAt = newMessages[^1].SentAt;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(TypedMessage)) return;

        while (TypedMessage.EndsWith("\n")) TypedMessage = TypedMessage[..^1];
        while (TypedMessage.StartsWith("\n")) TypedMessage = TypedMessage[1..];

        var message = new Message
        {
            ChatID = Chat!.ID,
            SenderID = Self!.Id,
            Content = TypedMessage,
            SentAt = DateTime.Now,
            IsPinned = false
        };
        await using var db = await Db.CreateDbContextAsync();
            
        db.Messages.Add(message);
        await db.SaveChangesAsync();
        await MessageEvents.MessageCreated.Invoker().Invoke(message);

        var recipientIds = Chat.Users.Select(u => u.Id).ToList();
        recipientIds.Remove(Self.Id);
        var readDatabaseRequest = TellOthersToReadDatabaseC2SPacket.Create(Self.Id, recipientIds, DbEntry.ChatMessage);
        WebSocketHandler.SendPacket(readDatabaseRequest);
        
        Messages.Add(new LinkedMessage(message, Messages.LastOrDefault()?.Message, othersCanSee: false));
    }

    public class LinkedMessage(Message message, Message? previous, bool othersCanSee = true)
    {
        public MessageState GetMessageState()
        {
            if (Previous is null)
            {
                return MessageState.First;
            }

            return Previous.SenderID == Message.SenderID ? MessageState.SameUser : MessageState.NewUser;
        }

        public Message Message { get; } = message;
        
        public Message? Previous { get; set;  } = previous;
        
        public bool OthersCanSee { get; set; } = othersCanSee;
    }

}
