@inherits UserViewComponentBase;
@implements IAsyncDisposable

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Networking
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Serverbound
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Nodes
@using Bamboozlers.Classes.Networking.Packets.Clientbound
@using Bamboozlers.Classes.Networking.SignalR
@using System.Security.Principal
@using System.Security.Claims

@inject IDbContextFactory<AppDbContext> Db
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKeyPressService KeyPressService
@inject AuthenticationStateProvider AuthenticationStateProvider

<Layout>
    <LayoutHeader Fixed
                  Padding="Padding.Is3"
                  TextSize="TextSize.Heading5"
                  TextColor="TextColor.Primary"
                  Background="Background.Dark">
        <Text ElementId="header-text">@ChatName</Text>
    </LayoutHeader>
    <LayoutContent Padding="Padding.Is3" ElementId="message-container" Class="scrollbar-container h-100">
        <Layout>
            <LayoutContent>
                <Div>
                    <CascadingValue Value="IsShiftHeld">
                        @foreach (var message in Messages)
                        {
                            <CompMessageView Message="message.Message" MessageState="@message.GetMessageState()" EchoRecieved="@message.OthersCanSee"/>
                        }
                    </CascadingValue>
                </Div>
            </LayoutContent>
        </Layout>
    </LayoutContent>
    <LayoutFooter>
        <Div Position="Position.Sticky" Background="Background.Secondary" TextColor="TextColor.Light" Class="m-4" Style="bottom: 0; border-radius: 5px;">
            <Div Display="Display.Flex" Overflow="Overflow.Hidden">
                <textarea id="message-input" placeholder="@($"Message {ChatName}")" class="message-input p-3" @onkeyup="OnInput" @bind="MessageInput" @bind:event="oninput">
                </textarea>
            </Div>
        </Div>
    </LayoutFooter>
</Layout>
<script>
    function waitForElm(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }
    
            const observer = new MutationObserver(_ => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });
    
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }
    
    function resizeTextarea(textarea) {
        textarea.style.height = '1px';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }
    
    waitForElm("#message-input").then(textarea => {
        textarea.addEventListener('input', () => resizeTextarea(textarea));
        textarea.addEventListener('keydown', e => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
        resizeTextarea(textarea);
        textarea.focus();
    });
</script>


@code {
    [Parameter] public int ChatID { get; set; }

    private Chat? Chat { get; set; }
    
    private string ChatName { get; set; }

    private List<LinkedMessage> Messages { get; } = [];

    private DateTime? _lastMessageSentAt;

    private string MessageInput { get; set; }

    private string _hubUrl;

    private HubConnection? _hubConnection;

    private bool IsShiftHeld { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await KeyPressService.StartListeningAsync();
        KeyPressService.KeyPressed += OnKeyPressed;
        KeyPressService.KeyReleased += OnKeyReleased;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await Connect();
    }

    private async Task Connect()
    {
        var baseUrl = NavigationManager.BaseUri;
        _hubUrl = baseUrl.TrimEnd('/') + BamboozlersHub.HubUrl;
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl, options =>
            {
                options.UseDefaultCredentials = true;
                options.HttpMessageHandlerFactory = innerHandler => new IncludeRequestCredentialsMessageHandler { InnerHandler = innerHandler };
            })
            .WithAutomaticReconnect([TimeSpan.Zero, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10)])
            .Build();
        

        var self = await AuthService.GetUser();
        _hubConnection.On("RecievePacketOnClient", async (string packet) =>
        {
            await ClientNetworkHandler.Instance.Handle(packet, async handled =>
            {
                switch (handled)
                {
                    case ReadDatabaseS2CPacket readDatabaseS2CPacket:
                        if (readDatabaseS2CPacket.DbEntry == DbEntry.ChatMessage)
                        {
                            await UpdateMessages();
                        }
                        break;
                }
            });
        });

        await _hubConnection.StartAsync();
        
        await _hubConnection.SendAsync("JoinChat", self!.Id, ChatID);
    }

    private async Task SendToServer<T>(T packet) where T : IPacket
    {
        if (_hubConnection is null) throw new InvalidOperationException("Hub connection is not initialized");
        if(_hubConnection.State != HubConnectionState.Connected) throw new InvalidOperationException("Hub connection is not connected");
        await _hubConnection.SendAsync("RecievePacketOnServer", packet.Serialize());
    }

    private async Task OnInput(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key != "Enter" || eventArgs.ShiftKey) return;

        await SendMessage(MessageInput);
        MessageInput = "";
    }

    protected override async Task OnParametersSetAsync()
    {
        await using var db = await Db.CreateDbContextAsync();
        Chat = await db.Chats
            .Include(c => c.Users)
            .FirstOrDefaultAsync(c => c.ID == ChatID);
        switch (Chat)
        {
            case null:
                throw new InvalidOperationException($"Chat from ID {ChatID} not found");
            case GroupChat groupChat:
                ChatName = groupChat.Name;
                break;
            default:
            {
                var self = await AuthService.GetUser();
                var other = Chat.Users.FirstOrDefault(u => u.Id != self!.Id) ?? self!;
                ChatName = (other.DisplayName ?? other.UserName)!;
                break;
            }
        }

        await UpdateMessages();
    }

    private async Task UpdateMessages()
    {
        var newMessages = await (await Db.CreateDbContextAsync()).Messages
            .Where(m => m.ChatID == Chat!.ID && (_lastMessageSentAt == null || m.SentAt > _lastMessageSentAt))
            .ToListAsync();
        if (newMessages.Count == 0) return;

        newMessages.Sort((a, b) => a.SentAt.CompareTo(b.SentAt));
        Dictionary<int, int> clientOnlyMessages = new();
        for (var index = 0; index < Messages.Count; index++)
        {
            var message = Messages[index];
            if (message.OthersCanSee) continue;

            clientOnlyMessages[message.Message.ID] = index;
        }

        var previousLastMessage = Messages.Count == 0 ? null : Messages[^1].Message;
        for (var i = 0; i < newMessages.Count; i++)
        {
            var previous = i == 0 ? previousLastMessage : newMessages[i - 1];
            var newMessage = newMessages[i];
            if (clientOnlyMessages.TryGetValue(newMessage.ID, value: out var existingMessageIndex))
            {
                var clientMessage = Messages[existingMessageIndex];
                clientMessage.OthersCanSee = true;
                clientMessage.Previous = previous;
                continue;
            }

            Messages.Add(new LinkedMessage(newMessage, previous));
        }

        _lastMessageSentAt = newMessages[^1].SentAt;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(string messageText)
    {
        if (string.IsNullOrWhiteSpace(messageText)) return;

        while (messageText.EndsWith("\n")) messageText = messageText[..^1];
        while (messageText.StartsWith("\n")) messageText = messageText[1..];

        var self = await AuthService.GetUser();
        var message = new Message
        {
            ChatID = Chat!.ID,
            SenderID = self!.Id,
            Content = messageText,
            SentAt = DateTime.Now,
            IsPinned = false
        };
        await using var db = await Db.CreateDbContextAsync();

        db.Messages.Add(message);
        await db.SaveChangesAsync();

        var recipientIdentiyNames = Chat.Users.Select(u => u.UserName!).ToArray();
        var readDatabaseRequest = new TellOthersToReadDatabaseC2SPacket
        {
            SenderId = self.Id,
            RecipientIdentityNames = recipientIdentiyNames,
            DbEntry = DbEntry.ChatMessage
        };
        await SendToServer(readDatabaseRequest);

        Messages.Add(new LinkedMessage(message, Messages.LastOrDefault()?.Message, othersCanSee: false));
    }

    private void OnKeyPressed(object? sender, KeyEventArgs e)
    {
        if (!e.ShiftKey) return;
        
        IsShiftHeld = true;
        StateHasChanged();
    }
    
    private void OnKeyReleased(object? sender, KeyEventArgs e)
    {
        if (e.ShiftKey || !IsShiftHeld) return;
        
        IsShiftHeld = false;
        StateHasChanged();
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            KeyPressService.KeyPressed -= OnKeyPressed;
            KeyPressService.KeyReleased -= OnKeyReleased;
            await KeyPressService.StopListeningAsync();
        } catch (JSDisconnectedException ex) { /* Ignore */ }

        if (_hubConnection is null) return;

        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;
        
        GC.SuppressFinalize(this);
    }
    
    public class LinkedMessage(Message message, Message? previous, bool othersCanSee = true)
    {
        public MessageState GetMessageState()
        {
            // if (Previous is null)
            // {
            //     return MessageState.First;
            // }
            //
            // return Previous.SenderID == Message.SenderID ? MessageState.SameUser : MessageState.NewUser;
            return MessageState.NewUser;
        }

        public Message Message { get; } = message;

        public Message? Previous { get; set; } = previous;

        public bool OthersCanSee { get; set; } = othersCanSee;
    }
}   