@inherits UserViewComponentBase
@implements IGroupSubscriber
@implements IAsyncDisposable

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Networking
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Clientbound
@using Bamboozlers.Classes.Networking.Packets.Serverbound
@using Bamboozlers.Classes.Networking.SignalR
@using Bamboozlers.Classes.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Bamboozlers.Classes
@using Blazorise.Extensions
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Services.UserServices
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Components.Utility

@inject IDbContextFactory<AppDbContext> Db
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IKeyPressService KeyPressService
@inject AuthenticationStateProvider AuthenticationStateProvider

<!--suppress JSVoidFunctionReturnValueUsed, JSUnresolvedReference -->
<script> 
    function waitForElm(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }
    
            const observer = new MutationObserver(_ => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });
    
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }
    
    function resizeTextarea(textarea) {
        textarea.style.height = '1px';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }
    
    waitForElm("#message-input").then(textarea => {
        textarea.addEventListener('input', () => resizeTextarea(textarea));
        textarea.addEventListener('keydown', e => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
        resizeTextarea(textarea);
        textarea.focus();
    });
</script>

<Layout>
    <LayoutHeader Fixed
                  Padding="Padding.Is3"
                  TextSize="TextSize.Heading5"
                  TextColor="TextColor.Primary"
                  Background="Background.Dark"
                  Display="Display.InlineFlex"
                  Class="justify-content-between align-items-center">
        <Div>
            @if (Chat is GroupChat { Avatar: not null } groupChat)
            {
                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(groupChat.Avatar)}") Class="message-avatar" alt=""/>
            }
            else if (Chat is not null && Chat is not GroupChat && Chat.Users.First(f => f.Id != Self.Id).Avatar != null)
            {
                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(Chat.Users.First(f => f.Id != Self.Id).Avatar!)}") Class="message-avatar" alt=""/>
            }
            <Text ElementId="header-text">@ChatName</Text>
        </Div>
        @if (Chat is GroupChat)
        {
            <Icon ElementId="settingsbtn" Name="IconName.Settings" role="button" @onclick="async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.GroupChatSettings, null, ChatID))"/>
        }
    </LayoutHeader>
    <LayoutContent Padding="Padding.Is3" ElementId="message-container" Class="scrollbar-container h-100">
        <Alert Color="@AlertArguments.AlertColor" Visible="@AlertArguments.AlertVisible">
            <AlertMessage>
                @AlertArguments.AlertMessage
                <CloseButton Style="--bs-btn-close-white-filter: black;" VerticalAlignment="VerticalAlignment.Middle" Float="Float.End" TextColor="TextColor.Warning"/>
            </AlertMessage>
            <AlertDescription>@AlertArguments.AlertDescription</AlertDescription>
        </Alert>
        <Layout>
            <LayoutContent>
                <Div>
                    <CascadingValue Value="IsShiftHeld">
                        @foreach (var message in Messages)
                        {
                            <CompMessageView Message="message.Message" MessageState="@message.GetMessageState()" EchoRecieved="@message.OthersCanSee"/>
                        }
                    </CascadingValue>
                </Div>
            </LayoutContent>
        </Layout>
    </LayoutContent>
    <LayoutFooter>
        <Div Position="Position.Sticky" Background="Background.Secondary" TextColor="TextColor.Light" Class="m-4" Style="bottom: 0; border-radius: 5px;">
            <Div Display="Display.Flex" Overflow="Overflow.Hidden">
                <textarea id="message-input" placeholder="@($"Message {ChatName}")" class="message-input p-3" @onkeyup="OnInput" @bind="MessageInput" @bind:event="oninput">
                </textarea>
            </Div>
        </Div>
    </LayoutFooter>
</Layout>
<LayoutSider>
    <LayoutSiderContent>
        <Bar Mode="BarMode.VerticalInline"
             CollapseMode="BarCollapseMode.Hide"
             ThemeContrast="ThemeContrast.Dark"
             Class="h-100">
            <BarMenu>
                <BarItem Class="mb-2">
                    <Div TextColor="TextColor.Primary"
                         Background="Background.Dark"
                         Padding="Padding.Is3"
                         TextSize="TextSize.Large">
                        @if (Chat is GroupChat)
                        {
                            <span class="me-4">Members - @Chat.Users.Count</span>
                            @if (IsMod)
                            {
                                <Icon ElementId="addMembers"
                                      role="button"
                                      Name="IconName.Add"
                                      @onclick="async () => await OpenKnownPopup.InvokeAsync(new KnownPopupArgs(PopupType.InviteGroupMembers, null, ChatID))"/>
                            }
                        }
                        else
                        {
                            <span class="me-4">Direct Message</span>
                        }
                    </Div>
                </BarItem>
                @if (Chat is not null)
                {
                    @foreach (var user in Chat.Users)
                    {
                        <BarItem>
                            <BarLink Flex="Flex.JustifyContent.Between" class="align-items-center rounded" Display="Display.Flex">
                                <Div>
                                    @if (user.Avatar != null)
                                    {
                                        <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}") Class="message-avatar" alt=""/>
                                    }
                                    <CompInteractUsername User="@user"/>
                                </Div>
                            </BarLink>
                        </BarItem>
                    }
                }
            </BarMenu>
        </Bar>
    </LayoutSiderContent>
</LayoutSider>

@code {
    [Inject] IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] public EventCallback<KnownPopupArgs> OpenKnownPopup { get; set; }
    
    [Parameter] public int? ChatID { get; set; }
    public List<int?> WatchedIDs { get; set; } = [];
    private Chat? Chat { get; set; }
    private User? Self { get; set; }
    private string ChatName { get; set; }
    private bool IsMod { get; set; }
    private List<LinkedMessage> Messages { get; set; } = [];

    public AlertArguments AlertArguments { get; set; } = new();
    
    private DateTime? _lastMessageSentAt;
    
    private string MessageInput { get; set; }
    
    private string _hubUrl;
    private HubConnection? _hubConnection;

    private bool IsShiftHeld { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserGroupService.AddSubscriber(this);
        Self = (await AuthService.GetUser())!;
        
        await KeyPressService.StartListeningAsync();
        KeyPressService.KeyPressed += OnKeyPressed;
        KeyPressService.KeyReleased += OnKeyReleased;
    }

    protected override async Task OnParametersSetAsync()
    {
        WatchedIDs = [ChatID];
        await GetChatData();   
        IsMod = IsModerator();
        await UpdateMessages();
    }
    
    private bool IsModerator()
    {
        if (Chat is not GroupChat)
            return false;
        
        using var db = Db.CreateDbContext();
        var gc = db.GroupChats.Include(i => i.Moderators)
            .AsNoTracking()
                .First(f => f.ID == ChatID);
        return gc.OwnerID == Self.Id || gc.Moderators.Any(m => m.Id == Self.Id);
    }

    private async Task GetChatData()
    {
        await using var db = await Db.CreateDbContextAsync();
        Chat = await db.Chats.Include(i => i.Users)
            .Include(i => i.Messages)
                .FirstOrDefaultAsync(c => c.ID == ChatID);

        if (Chat is GroupChat)
        {
            Chat = await db.GroupChats.Include(i => i.Users)
                .Include(i => i.Messages)
                    .Include(i => i.Owner)
                        .FirstOrDefaultAsync(c => c.ID == ChatID);
        }

        if (Self is null || Chat is null)
            return;
        
        switch (Chat)
        {
            case null:
                throw new InvalidOperationException($"Chat from ID {ChatID} not found");
            case GroupChat gc:
                ChatName = gc.GetGroupName();
                break;
            default:
            {
                var self = await AuthService.GetUser();
                var other = Chat.Users.FirstOrDefault(u => u.Id != self!.Id) ?? self!;
                ChatName = other.GetName();
                break;
            }
        }

        var messages = new List<Message>(Chat?.Messages ?? []);
        messages.Sort((a, b) => a.SentAt.CompareTo(b.SentAt));
        var linkedMessages = messages.Select((t, i) => new LinkedMessage(t, i > 0 ? messages[i - 1] : null)).ToList();
        Messages = linkedMessages;
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        await Connect();
    }

    private async Task Connect()
    {
        var baseUrl = NavigationManager.BaseUri;
        _hubUrl = baseUrl.TrimEnd('/') + BamboozlersHub.HubUrl;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl, options =>
            {
                options.UseDefaultCredentials = true;
                options.HttpMessageHandlerFactory = innerHandler => new IncludeRequestCredentialsMessageHandler { InnerHandler = innerHandler };
            })
            .WithAutomaticReconnect([TimeSpan.Zero, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10)])
            .Build();
        
        _hubConnection.On("RecievePacketOnClient", async (string packetJson) =>
        {
            await ClientNetworkHandler.Instance.Handle(packetJson, async packet =>
            {
                switch (packet)
                {
                    case ReadDatabaseS2CPacket readDatabaseS2CPacket:
                        if (readDatabaseS2CPacket.DbEntry == DbEntry.ChatMessage)
                        {
                            await UpdateMessages();
                        }
                        break;
                }
            });
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("JoinChat", ChatID);
    }

    private async Task SendToServer<T>(T packet) where T : IPacket
    {
        if (_hubConnection is null) throw new InvalidOperationException("Hub connection is not initialized");
        if (_hubConnection.State != HubConnectionState.Connected) throw new InvalidOperationException("Hub connection is not connected");
        await _hubConnection.SendAsync("ReceivePacketOnServer", packet.Serialize());
    }

    private async Task OnInput(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key != "Enter" || eventArgs.ShiftKey) return;

        await SendMessage(MessageInput);
        MessageInput = "";
    }

    private async Task UpdateMessages()
    {
        var newMessages = await (await Db.CreateDbContextAsync()).Messages
            .Where(m => m.ChatID == Chat!.ID && (_lastMessageSentAt == null || m.SentAt > _lastMessageSentAt))
            .ToListAsync();
        if (newMessages.Count == 0) return;

        newMessages.Sort((a, b) => a.SentAt.CompareTo(b.SentAt));
        Dictionary<int, int> clientOnlyMessages = new();
        for (var index = 0; index < Messages.Count; index++)
        {
            var message = Messages[index];
            if (message.OthersCanSee) continue;

            clientOnlyMessages[message.Message.ID] = index;
        }

        var previousLastMessage = Messages.Count == 0 ? null : Messages[^1].Message;
        for (var i = 0; i < newMessages.Count; i++)
        {
            var previous = i == 0 ? previousLastMessage : newMessages[i - 1];
            var newMessage = newMessages[i];
            if (clientOnlyMessages.TryGetValue(newMessage.ID, value: out var existingMessageIndex))
            {
                var clientMessage = Messages[existingMessageIndex];
                clientMessage.OthersCanSee = true;
                clientMessage.Previous = previous;
                continue;
            }

            Messages.Add(new LinkedMessage(newMessage, previous));
        }

        _lastMessageSentAt = newMessages[^1].SentAt;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(string messageText)
    {
        if (string.IsNullOrWhiteSpace(messageText)) return;

        while (messageText.EndsWith("\n")) messageText = messageText[..^1];
        while (messageText.StartsWith("\n")) messageText = messageText[1..];

        var self = await AuthService.GetUser();
        var message = new Message
        {
            ChatID = (int) ChatID!,
            SenderID = self!.Id,
            Content = messageText,
            SentAt = DateTime.Now,
            IsPinned = false
        };
        await using var db = await Db.CreateDbContextAsync();

        db.Messages.Add(message);
        await db.SaveChangesAsync();

        var readDatabaseRequest = new TellOthersToReadDatabaseC2SPacket
        {
            SenderId = self.Id,
            ChatId = (int) ChatID!,
            DbEntry = DbEntry.ChatMessage
        };
        await SendToServer(readDatabaseRequest);

        Messages.Add(new LinkedMessage(message, Messages.LastOrDefault()?.Message, othersCanSee: false));
    }

    private void OnKeyPressed(object? sender, KeyEventArgs e)
    {
        if (!e.ShiftKey) return;

        IsShiftHeld = true;
        StateHasChanged();
    }

    private void OnKeyReleased(object? sender, KeyEventArgs e)
    {
        if (e.ShiftKey || !IsShiftHeld) return;

        IsShiftHeld = false;
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            KeyPressService.KeyPressed -= OnKeyPressed;
            KeyPressService.KeyReleased -= OnKeyReleased;
            await KeyPressService.StopListeningAsync();
        }
        catch (JSDisconnectedException) { /* Ignore */ }

        if (_hubConnection is null) return;

        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;

        GC.SuppressFinalize(this);
    }
    
    public class LinkedMessage(Message message, Message? previous, bool othersCanSee = true)
    {
        public MessageState GetMessageState()
        {
            // if (Previous is null)
            // {
            //     return MessageState.First;
            // }
            //
            // return Previous.SenderID == Message.SenderID ? MessageState.SameUser : MessageState.NewUser;
            return MessageState.NewUser;
        }

        public Message Message { get; } = message;
        
        public Message? Previous { get; set; } = previous;

        public bool OthersCanSee { get; set; } = othersCanSee;
    }

    public List<GroupEvent> WatchedGroupEvents { get; } = 
    [
        GroupEvent.GroupDisplayChange,
        GroupEvent.RemoveMember
    ];
    
    public async Task OnUpdate(GroupEvent evt, int? specifiedGroup = null)
    {
        await GetChatData();
    }
}