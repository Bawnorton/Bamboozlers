@inherits UserViewComponentBase
@implements IAsyncGroupSubscriber;

@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes.Interop
@using Bamboozlers.Classes
@using Bamboozlers.Classes.Services
@using System.Runtime.CompilerServices
@using System.Diagnostics
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services.UserServices
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Components.VisualUtility
@using IMessageService = Bamboozlers.Classes.Services.IMessageService

@inject IWebSocketService WebSocketService
@inject IDbContextFactory<AppDbContext> Db
@inject IJSRuntime JsRuntime

<script>
    function showConfirmDialog(message) {
        return Swal.fire({
            title: 'Are you sure?',
            text: message,
            color: '#d33',
            icon: 'warning',
            iconColor:'#d33',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#247352',
            confirmButtonText: 'Yes',
            background: '#343a40',
        }).then((result) => {
            return result.isConfirmed;
        });
    }
</script>

<Layout>
    <LayoutHeader Fixed
                  Padding="Padding.Is3"
                  TextSize="TextSize.Heading5"
                  TextColor="TextColor.Primary"
                  Background="Background.Dark"
                  Display="Display.InlineFlex"
                  Class="justify-content-between align-items-center">
        <Div>
            @if (Chat is GroupChat groupChat && groupChat.Avatar != null)
            {
                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(groupChat.Avatar)}") Class="message-avatar" alt=""/>
            }else if (Chat is not null && Chat is not GroupChat && Chat.Users.FirstOrDefault(f => f.Id != Self.Id).Avatar != null)
            {
                <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(Chat.Users.FirstOrDefault(f => f.Id != Self.Id).Avatar)}") Class="message-avatar" alt=""/>
            }
            <Text ElementId="header-text">@ChatName</Text>
        </Div>
        @if (Chat is GroupChat)
        {
            <Icon ElementId="settingsbtn" Name="IconName.Settings" role="button" @onclick="() => OpenPopupCallback.InvokeAsync(new PopupCallbackArgs{ PopupType = RecognizedPopupType.GroupChatSettings, ChatId = ChatID })"/>
        }
    </LayoutHeader>
    <LayoutContent Padding="Padding.Is3" ElementId="message-container" Class="scrollbar-container h-100">
        <Alert Color="@AlertArguments.AlertColor" Visible="@AlertArguments.AlertVisible">
            <AlertMessage>
                @AlertArguments.AlertMessage
                <CloseButton Style="--bs-btn-close-white-filter: black;" VerticalAlignment="VerticalAlignment.Middle" Float="Float.End" TextColor="TextColor.Warning"/>
            </AlertMessage>
            <AlertDescription>@AlertArguments.AlertDescription</AlertDescription>
        </Alert>
        <Layout>
            <LayoutContent>
                <Div>
                    @foreach (var message in Messages)
                    {
                        <CompMessageView Message="message.Message" MessageState="@message.GetMessageState()"></CompMessageView>
                    }
                </Div>
            </LayoutContent>
        </Layout>
    </LayoutContent>
    <LayoutFooter>
        <Div Position="Position.Sticky" Background="Background.Secondary" TextColor="TextColor.Light" Class="rounded-pill m-4" Style="bottom: 0">
            <Div Display="Display.Flex" Overflow="Overflow.Hidden" >
                <Div contenteditable="true" 
                     Width="Width.Is100" Height="Height.Is100" 
                     Padding="Padding.Is3"
                     id="message-input" 
                     class="@($"message-input word-break {InputEvents.EventCssClass} {ClipboardEvents.EventCssClass}")" data-placeholder="@($"Message {ChatName}")">
                </Div>
            </Div>
        </Div>
    </LayoutFooter>
</Layout>
@if (Chat is GroupChat)
{
    <LayoutSider>
        <LayoutSiderContent>
            <Bar Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Hide"
                 ThemeContrast="ThemeContrast.Dark"
                 Class="h-100">
                <BarMenu>
                    <BarItem Class="mb-2">
                        <Div TextColor="TextColor.Primary"
                             Background="Background.Dark"
                             Padding="Padding.Is3"
                             TextSize="TextSize.Heading5">
                            <Text Class="me-4">Members - @Chat.Users.Count</Text>
                            @if (IsMod)
                            {
                                <Icon ElementId="addMembers" 
                                      role="button" 
                                      Name="IconName.Add" 
                                      onclick="@(() => OpenPopupCallback.InvokeAsync(new PopupCallbackArgs{ PopupType = RecognizedPopupType.ChatAddMember, ChatId = ChatID }))"/>
                            }
                        </Div>
                    </BarItem>
                    @foreach (var user in Chat.Users)
                    {
                        <BarItem>
                            <BarLink Flex="Flex.JustifyContent.Between" class="align-items-center rounded" Display="Display.Flex">
                                <Div>
                                    @if (user.Avatar != null)
                                    {
                                        <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}") Class="message-avatar" alt=""/>
                                    }
                                    <CompInteractUsername User="@user"/>
                                </Div>
                                
                                @if (IsMod && user.Id != Self.Id && user.Id != ((Chat as GroupChat)!).OwnerID)
                                {
                                    <Paragraph TextSize="TextSize.Small" Display="Display.Inline" 
                                               role="button" Class="text-decoration-underline mb-0 text-danger-emphasis" 
                                               ElementId="removeMember"
                                               @onclick="@(() => RemoveMember(user.Id))">
                                        Remove
                                    </Paragraph>
                                }
                            </BarLink>
                        </BarItem>
                    }
                </BarMenu>
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>
}


@code {
    [Inject] IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] public EventCallback<PopupCallbackArgs> OpenPopupCallback { get; set; }
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }

    [Parameter] public int? ChatID { get; set; }
    public List<int?> WatchedIDs { get; set; } = [];
    
    private Chat? Chat { get; set; }
    private User? Self { get; set; }
    private string ChatName { get; set; }
    private string TypedMessage { get; set; }
    private List<LinkedMessage> Messages { get; set; } = [];

    public AlertArguments AlertArguments { get; set; } = new();

    private bool IsMod { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        UserGroupService.AddSubscriber(this);
        Self = await AuthService.GetUser();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Self is null)
            return;
        
        WatchedIDs = [ChatID];
        await GetChatData();   
        IsMod = IsModerator();
        await WebSocketService.ConnectAsync(Self.Id);
    }

    private async Task GetChatData()
    {
        await using var db = await Db.CreateDbContextAsync();
        Chat = await db.Chats.Include(i => i.Users)
            .Include(i => i.Messages)
            .FirstOrDefaultAsync(c => c.ID == ChatID);
        
        if (Self is null || Chat is null)
            return;
        
        if (Chat is GroupChat groupChat)
        {
            ChatName = groupChat.Name;
        }
        else if (Chat is not null)
        {
            var other = Chat.Users.FirstOrDefault(u => u.Id != Self.Id) ?? Self;
            ChatName = (other.DisplayName ?? other.UserName)!;
        }
        else
        {
            throw new InvalidOperationException("Chat is null");
        }

        var messages = new List<Message>(Chat?.Messages ?? []);
        messages.Sort((a, b) => a.SentAt.CompareTo(b.SentAt));
        var linkedMessages = messages.Select((t, i) => new LinkedMessage(t, i > 0 ? messages[i - 1] : null)).ToList();
        Messages = linkedMessages;
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await JsInteropHelper.Register();

        InputEvents.DisallowedInputs.Register(() => Task.FromResult(new List<KeyData>
        {
            KeyData.Normal("Enter", "Enter")
        }));
        InputEvents.InputKeydown.Register(async (elementId, key, _, _, shift, _, _, _, _) =>
        {
            if (elementId != "message-input") return;
            if (key != "Enter" || shift) return;

            await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.clear", "message-input");
            await SendMessage();
            await InvokeAsync(StateHasChanged);
        });
        InputEvents.InputKeyup.Register(async (elementId, key, _, _, shift, _, _, content, _) =>
        {
            if (elementId != "message-input") return;

            TypedMessage = content;
            switch (key)
            {
                case "Backspace" when TypedMessage.Equals("\n"):
                    await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.clear", "message-input");
                    break;
                case "Enter" when !shift:
                    await JsInteropHelper.GetJsRuntime().InvokeVoidAsync("inputInterop.scrollToBottom", "message-container");
                    break;
            }
        });
        ClipboardEvents.OnPaste.Register(async (elementId, content) =>
        {
            if (elementId != "message-input") return content;

            TypedMessage = content;
            await InvokeAsync(StateHasChanged);
            return content;
        });
        
        StateHasChanged();
    }

    private bool IsModerator()
    {
        if (Chat is not GroupChat)
        {
            return false;
        }
        
        using var db = Db.CreateDbContext();
        var gc = db.GroupChats.Include(i => i.Moderators).FirstOrDefault(f => f.ID == ChatID);
        return gc.OwnerID == Self.Id ||  gc.Moderators.Any(m => m.Id == Self.Id);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(TypedMessage)) return;

        while (TypedMessage.EndsWith("\n")) TypedMessage = TypedMessage[..^1];
        while (TypedMessage.StartsWith("\n")) TypedMessage = TypedMessage[1..];
        
        var message = new Message
        {
            ChatID = Chat!.ID,
            SenderID = Self!.Id,
            Content = TypedMessage,
            SentAt = DateTime.Now,
            IsPinned = false
        };
        await MessageEvents.MessageCreated.Invoker().Invoke(message);
        WebSocketService.SendMessage(message);

        Messages.Add(new LinkedMessage(message, Messages.LastOrDefault()?.Message));
    }
    
    private async Task RemoveMember(int userID)
    {
        try
        {
            using var db = Db.CreateDbContext();
            var user = db.Users.Include(i => i.Chats).FirstOrDefault(f => f.Id == userID);
            var confirmed = await JsRuntime.InvokeAsync<bool>("showConfirmDialog", $"Are you sure you want to remove {user.DisplayName ?? user.UserName}?");
            
            if (confirmed)
            {
                await UserGroupService.RemoveGroupMember(ChatID, userID);
                AlertArguments = new AlertArguments(
                    Color.Success, 
                    true, 
                    "Member removed successfully."
                );
            }
        }
        catch (Exception ex)
        {
            AlertArguments = new AlertArguments(
                Color.Warning, 
                true, 
                "Error occurred while removing member.",
                "Unknown error occurred that prevented the member from being removed."
            );
        }
    }
    
    public class LinkedMessage(Message message, Message? previous)
    {
        public MessageState GetMessageState()
        {
            if (previous is null)
            {
                return MessageState.First;
            }

            return previous.SenderID == Message.SenderID ? MessageState.SameUser : MessageState.NewUser;
        }

        public Message Message { get; } = message;
    }

    public async Task OnGroupUpdate()
    {
        await GetChatData();
    }
}
