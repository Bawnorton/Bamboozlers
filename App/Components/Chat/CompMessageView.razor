@inherits UserViewComponentBase;

@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.AppDbContext

@inject IDbContextFactory<AppDbContext> Db

@if (Loaded)
{
    <Div ElementId="@("message_" + Message.ID)" Class=@MessageClass>
        @if (Message.SenderID != PreviousMessage?.SenderID)
        {
            <CompMessageHeaderView Message="Message"/>
        }
        <Div Class="message-content">
            <Div Style="@(!EchoRecieved ? "color: #A0A3A7" : "")">
                <CompMessageContentView Content=@Message.Content/>
            </Div>
            <Div Class="message-actions">
                @switch (ShowEdit)
                {
                    case true:
                        <Button Clicked="@(async () => await ChatContext.OnEdit(Message, Message.Content + " (edited)"))" class=@TooltipClassDir data-tooltip="Edit">
                            <Icon Class="fa-pencil-alt"></Icon>
                        </Button>
                        break;
                    case false:
                        <Button onclick="alert('Not Implemented')" class=@TooltipClassDir data-tooltip="Reply">
                            <Icon Name="Icons.Reply"></Icon>
                        </Button>
                        break;
                }
                <Button Clicked="async () => await ChatContext.OnPin(Message)" class=@TooltipClassDir data-tooltip=@(Message.IsPinned ? "Unpin" : "Pin")>
                    <Icon Name="Icons.MapPin"></Icon>
                </Button>
                @if (ShowDelete)
                {
                    <Button Clicked="@(async () => await ChatContext.OnDelete(Message))" class=@TooltipClassDir data-tooltip="Delete">
                        <Icon Name="Icons.Trash"></Icon>
                    </Button>
                }
                else
                {
                    <Button Outline=false class=@TooltipClassDir data-tooltip="More">
                        <Icon Name="Icons.Ellipsis"></Icon>
                    </Button>
                }
            </Div>
        </Div>
    </Div>
}

@code {
    [Parameter] public Message Message { get; set; }

    [Parameter] public Message? PreviousMessage { get; set; }

    [Parameter] public bool EchoRecieved { get; set; }

    [CascadingParameter] private ChatContextData ChatContext { get; set; }

    private bool Loaded { get; set; }

    private User? Self { get; set; }

    private bool IsSelfMessage => Message.Sender!.Id == Self!.Id;

    private bool ShowEdit => IsSelfMessage && ChatContext.IsShiftHelf;

    private bool ShowDelete => ChatContext.IsShiftHelf && (IsSelfMessage || ChatContext.IsMod);
    
    private string TooltipClassDir => "button-tooltip " + (PreviousMessage == null ? "tooltip-down" : "tooltip-up");
    
    private string MessageClass => "message " + (Message.SenderID != PreviousMessage?.SenderID ? "mt-2" : "");

    protected override async Task OnInitializedAsync()
    {
        Self = await AuthService.GetUser();

        if (Message.Sender == null)
        {
            await using var db = await Db.CreateDbContextAsync();
            var sender = await db.Users.FindAsync(Message.SenderID);
            Message.Sender = sender ?? throw new NullReferenceException("Sender not found"); // TOOD: Replace with "Deleted User" entry
        }

        Loaded = true;
    }

}