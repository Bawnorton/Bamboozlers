@inherits UserViewComponentBase;

@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Events
@using Bamboozlers.Classes
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Func
@using Bamboozlers.Classes.Services

@inject IDbContextFactory<AppDbContext> Db

@if(Loaded)
{
    <Div ElementId="@("message_" + Message.ID)">
        @if (PreviousMessage == null || PreviousMessage.SenderID != Message.SenderID)
        {
            <Div Class="message-header" Style="@(PreviousMessage == null ? "" : "margin-top: 15px;")">
                <Div Class="message-info">
                    @if (Message.Sender!.Avatar != null)
                    {
                        <Image Source=@($"data:image/png;base64,{Convert.ToBase64String(Message.Sender.Avatar)}") Class="message-avatar" alt=""/>
                    }
                    <Div Class="message-username" onclick="alert('Not Implemented')">
                        @(Message.Sender.DisplayName ?? Message.Sender.UserName)
                    </Div>
                    <Div Class="message-timestamp">
                        @Message.SentAt.ToString("dd/MM/yyyy HH:mm:ss tt")
                    </Div>
                </Div>
            </Div>
        }
        <Div Class="message-content">
            <Div Style="@(!EchoRecieved ? "color: #A0A3A7" : "")">
                <CompMessageContentView Content=@Message.Content/>
            </Div>
            <Div Class="message-actions">
                @switch (ShowEdit)
                {
                    case true:
                        <Button Clicked="@(async () => await ChatContext.OnEdit(Message, Message.Content + " (edited)"))">
                            <Icon Class="fa-pencil-alt"></Icon>
                        </Button>
                        break;
                    case false:
                        <Button onclick="alert('Not Implemented')">
                            <Icon Name="Icons.Reply"></Icon>
                        </Button>
                        break;
                }
                <Button onclick="alert('Not Implemented')">
                    <Icon Name="Icons.MapPin"></Icon>
                </Button>
                @if (ShowDelete)
                {
                    <Button Clicked="@(async () => await ChatContext.OnDelete(Message))">
                        <Icon Name="Icons.Trash"></Icon>
                    </Button>
                }
                else
                {
                    <Button Outline=false>
                        <Icon Name="Icons.Ellipsis"></Icon>
                    </Button>
                }
            </Div>
        </Div>
    </Div>
}

@code {
    [Parameter] public Message Message { get; set; }

    [Parameter] public Message? PreviousMessage { get; set; }
    
    [Parameter] public bool EchoRecieved { get; set; }
    
    [CascadingParameter] private ChatContextData ChatContext { get; set; }
    
    private bool Loaded { get; set; }

    private User? Self { get; set; }

    private bool IsSelfMessage => Message.Sender!.Id == Self!.Id;

    private bool ShowEdit => IsSelfMessage && ChatContext.IsShiftHelf;

    private bool ShowDelete => ChatContext.IsShiftHelf && (IsSelfMessage || ChatContext.IsMod);

    protected override async Task OnInitializedAsync()
    {
        Self = await AuthService.GetUser();

        if (Message.Sender == null)
        {
            await using var db = await Db.CreateDbContextAsync();
            var sender = await db.Users.FindAsync(Message.SenderID);
            Message.Sender = sender ?? throw new NullReferenceException("Sender not found"); // TOOD: Replace with "Deleted User" entry
        }

        Loaded = true;
        
    }

}
