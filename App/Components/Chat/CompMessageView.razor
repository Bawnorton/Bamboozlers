@inherits UserViewComponentBase;

@implements IAsyncKeySubscriber

@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Utility.Observer
@using Microsoft.IdentityModel.Tokens

@inject IDbContextFactory<AppDbContext> Db
@inject IJSRuntime JsRuntime

@if (Loaded)
{
    <style>
        .edit-link {
            color: #366cec;
            cursor: pointer;
        }
    </style>
    <Div ElementId="@("message_" + Message.ID)" Class=@MessageClass>
        @if (Message.ReplyToID != null)
        {
            <CompMessageReplyView MessageId="@((int)Message.ReplyToID!)" />
        }
        @if (Message.SenderID != PreviousMessage?.SenderID)
        {
            <CompMessageHeaderView Message="Message"/>
        }
        <Div Class="message-content">
            @if (Editing)
            {
                <Div Width="Width.Is100">
                    <Div Display="Display.Flex" Overflow="Overflow.Hidden" Background="Background.Secondary" Style="border-radius: 5px" class="p-2 m-1">
                        <textarea id="message-edit" class="message-input" @bind="MessageEditInput" @bind:event="oninput">
                        </textarea>
                    </Div>
                    <Div Style="font-size: 14px; color: #acacac">
                        Enter: <a class="edit-link" @onclick="async () => await OnEditEnd(MessageEditInput)">Save</a> | Escape: <a class="edit-link" @onclick="async () => await OnEditEnd(null)">Cancel</a>
                    </Div>
                </Div>
            }
            else
            {
                <Div Style="display: flex; flex-direction: column; gap: 10px">
                    @if (!string.IsNullOrWhiteSpace(Message.Content))
                    {
                        <Div Style="@(!EchoRecieved ? "color: #A0A3A7" : "")">
                            <CompMessageContentView Content=@Message.Content EditDate="@Message.EditedAt"/>
                        </Div>
                    }
                    @if (!MessageAttachments.IsNullOrEmpty())
                    {

                        @foreach (var attachment in MessageAttachments!)
                        {
                            <CompMessageAttachmentView FileName="@attachment.FileName" FileData=@attachment.Data/>
                        }
                    }
                </Div>
                <Div Class="message-actions">
                    @switch (ShowReply)
                    {
                        case true:
                            <Button Clicked="async () => await ChatContext.SetReplying(Message)" class=@TooltipClassDir data-tooltip="Reply">
                                <Icon Name="Icons.Reply"></Icon>
                            </Button>
                            break;
                        case false:
                            <Button Clicked="@(async () => await OnEditStart())" class=@TooltipClassDir data-tooltip="Edit">
                                <Icon Class="fa-pencil-alt"></Icon>
                            </Button>
                            break;
                    }
                    @if (ShowDelete)
                    {
                        <Button Clicked="@(async () => await ChatContext.OnDelete(Message))" class=@TooltipClassDir data-tooltip="Delete">
                            <Icon Name="Icons.Trash"></Icon>
                        </Button>
                    }
                    <Button Clicked="async () => await ChatContext.OnPin(Message)" class=@TooltipClassDir data-tooltip=@(Message.IsPinned ? "Unpin" : "Pin")>
                        <Icon Name="Icons.MapPin"></Icon>
                    </Button>
                </Div>
            }
        </Div>
    </Div>
    <!--suppress JSUnresolvedReference -->
    <script>        
        function startEdit() {
            waitForElm("#message-edit").then(textarea => {
                textarea.addEventListener('input', () => resizeTextarea('message-edit'));
                textarea.addEventListener('keydown', e => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
                resizeTextarea('message-edit');
                textarea.focus();
            });
        }
        
        function ensureInView(messageId) {
            waitForElm(`#message_${messageId}`).then(elm => {
                elm.scrollIntoView({behavior: "smooth", block: "center", inline: "nearest"});
            });
        }
    </script>
}

@code {
    [Parameter] public Message Message { get; set; }
    [Parameter] public Message? PreviousMessage { get; set; }
    [Parameter] public bool EchoRecieved { get; set; }
    [Parameter] public bool Editing { get; set; }

    [CascadingParameter] private ChatContext ChatContext { get; set; }
    [CascadingParameter] private EventCallback<IPacket> SendToServer { get; set; }
    [CascadingParameter] private Predicate<IAsyncKeySubscriber> AddKeySubscriber { get; set; }

    private bool Loaded { get; set; }
    private User? Self { get; set; }

    private List<MessageAttachment>? MessageAttachments { get; set; }
    
    private string? _messageEditInput;
    private string? MessageEditInput
    {
        get => _messageEditInput;
        set
        {
            _messageEditInput = value;
            InvokeAsync(() => ChatContext.SetLastEdit.Invoke(value));
        }
    }

    private bool IsShiftHeld { get; set; }
    
    private bool IsSelfMessage => Message.Sender!.Id == Self!.Id;
    private bool ShowReply => IsShiftHeld || !IsSelfMessage;
    private bool ShowDelete => IsShiftHeld && (IsSelfMessage || ChatContext.IsMod);
    
    private string TooltipClassDir => "button-tooltip " + (PreviousMessage == null ? "tooltip-down" : "tooltip-up");
    private string MessageClass => "message " + (Message.SenderID != PreviousMessage?.SenderID ? "mt-2" : "");

    protected override async Task OnInitializedAsync()
    {
        Self = await AuthService.GetUser();

        if (Message.Sender == null)
        {
            await using var db = await Db.CreateDbContextAsync();
            var sender = await db.Users.FindAsync(Message.SenderID);
            Message.Sender = sender ?? throw new NullReferenceException("Sender not found"); // TOOD: Replace with "Deleted User" entry
        }

        Loaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        AddKeySubscriber(this);
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Editing && MessageEditInput == null)
        {
            MessageEditInput = Message.Content;
            await JsRuntime.InvokeVoidAsync("resizeTextarea", "message-edit");
        }

        MessageAttachments = Message.Attachments;
    }

    private async Task OnEditStart()
    {
        await ChatContext.OnEditStart(Message);
        await JsRuntime.InvokeVoidAsync("startEdit");
        await JsRuntime.InvokeVoidAsync("ensureInView", Message.ID);
    }

    private async Task OnEditEnd(string? newContent)
    {
        if (newContent == null || string.Equals(newContent, Message.Content))
        {
            await ChatContext.OnEditEnd(true);
            return;
        }

        await ChatContext.OnEditEnd(false);
    }

    public async Task OnKeyPressed(KeyEventArgs keyEventArgs)
    {
        if(keyEventArgs.ShiftKey && !IsShiftHeld)
        {
            IsShiftHeld = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task OnKeyReleased(KeyEventArgs keyEventArgs)
    {
        if (!keyEventArgs.ShiftKey && IsShiftHeld)
        {
            IsShiftHeld = false;
            await InvokeAsync(StateHasChanged);
        }
    }

}