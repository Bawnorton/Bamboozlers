@using Bamboozlers.Classes.AppDbContext
@using System.Text.Json
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Func
@using Blazorise.Extensions
@using Icons = Blazorise.Icons.FontAwesome.FontAwesomeIcons

<Div Style="margin-top: 5px; margin-bottom: 5px; position: relative;" class="message">
    <CompMessageHeaderView Message="Message" MaxWidth="250px"/>
    <Div Class="message-content">
        <Div Style="display: flex; flex-direction: column; gap: 10px">
            @if (!string.IsNullOrWhiteSpace(Message.Content))
            {
                <CompMessageContentView Content=@Message.Content EditDate="@Message.EditedAt"/>
            }
            @if (!MessageAttachments.IsNullOrEmpty())
            {

                @foreach (var attachment in MessageAttachments!)
                {
                    <CompMessageAttachmentView FileName="@attachment.FileName" FileData=@attachment.Data MaxWidth="400px"/>
                }
            }
        </Div>
        <Div Class="message-actions">
            <Button Clicked="@(async () => await OnJump.Invoke(Message))" class="button-tooltip tooltip-up" data-tooltip="Jump">
                <Icon Class="@(Icons.ArrowUp)"></Icon>
            </Button>
            @if (CanUnpin)
            {
                <Button Clicked="@(async () => await OnUnpin.Invoke(Message))" class="button-tooltip tooltip-up" data-tooltip="Unpin">
                    <Icon Class="@(Icons.Times)"></Icon>
                </Button>
            }
        </Div>
    </Div>
</Div>

@code {

    [Parameter] public Message Message { get; set; } = default!;
    
    [Parameter] public bool CanUnpin { get; set; }
    
    [Parameter] public AsyncConsumer<Message> OnJump { get; set; } = default!;
    
    [Parameter] public AsyncConsumer<Message> OnUnpin { get; set; } = default!;
    
    private List<MessageAttachment>? MessageAttachments => Message.Attachments;
}