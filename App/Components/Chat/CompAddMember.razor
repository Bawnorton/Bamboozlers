@inherits UserViewComponentBase
@implements IAsyncGroupSubscriber

@using Bamboozlers.Classes.AppDbContext
@using AngleSharp.Diffing.Extensions
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Components.VisualUtility
@using Microsoft.IdentityModel.Tokens
@using Bamboozlers.Classes.Utility.Observer
@inject IDbContextFactory<AppDbContext> Db

<ModalContent Centered>
    <ModalHeader>
        <ModalTitle>Invite Friends to @(Chat is null ? "Group" : Chat.Name)</ModalTitle>
        <CloseButton/>
    </ModalHeader>
    <ModalBody>
        @InviteList
    </ModalBody>
</ModalContent>

@code{
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    
    [CascadingParameter] public EventCallback ClosePopupCallback { get; set; }
    [CascadingParameter] public int? ChatID { get; set; }
    
    [Parameter] public EventCallback<List<User>> OnAdd { get; set; }
    
    private GroupChat? Chat { get; set; }
    private RenderFragment? InviteList { get; set; }
    
    private User? Self { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGroupData();
    }
    
    private async Task LoadGroupData()
    {
        Self = await AuthService.GetUser();
        if (Self is null) 
            return;
        
        await using var db = await Db.CreateDbContextAsync();
        
        Chat = db.GroupChats.Where(c => c.ID == ChatID)
            .Include(c => c.Users)
            .Include(c => c.Moderators)
            .First();

        var friendList = (await Self.GetFriends(db)).ToList();
        var inGroup = friendList.Where(
                f => Chat.Users.FirstOrDefault(u => u.UserName == f.UserName) is not null
            ).ToList();
        var notInGroup = friendList.Except(inGroup).ToList();

        var allInvites = await UserGroupService.GetAllOutgoingInvites();
        var invitesForGroup = allInvites is not null 
            ? allInvites.Where(i => i.GroupID == ChatID) 
            : [];
        
        var invitedFriends = invitesForGroup
            .Select(i => friendList.FirstOrDefault(u => u.Id == i.RecipientID))
            .Where(u => u != null)
            .ToList();
        
        InviteList = @<text>
                          @foreach (var user in friendList)
                          {
                              <div style="display: inline-block">
                                  <Image Class="_32x32 message-avatar" 
                                         Source=@(user.Avatar is null ? "images/default_profile.png" : $"data:image/png;base64,{Convert.ToBase64String(user.Avatar)}") 
                                         alt=""/>
                                  @(user.DisplayName ?? user.UserName)
                                  @if (inGroup.Contains(user))
                                  {
                                      <CompActionButton ButtonCaption="Already in group"
                                                        Color="Color.Dark"
                                                        ColumnWrapped="@false"
                                                        ActionCallback="EventCallback.Empty"
                                                        Disabled="true"/>
                                  }
                                  else if (notInGroup.Contains(user))
                                  {
                                      if (invitedFriends.Contains(user))
                                      {
                                          <CompActionButton ButtonCaption="Revoke Invitation" 
                                                            ColumnWrapped="@false"
                                                            ActionCallback="@(async () => await UserGroupService.RevokeGroupInvite(ChatID,user.Id))"
                                                            IconName="IconName.Ban"/>
                                      }
                                      else
                                      {
                                          <CompActionButton ButtonCaption="Invite"
                                                            ColumnWrapped="@false"
                                                            ActionCallback="@(async () => await UserGroupService.SendGroupInvite(ChatID, user.Id))"
                                                            IconName="IconName.UserPlus"/>
                                      }
                                  }
                              </div>
                          }
                      </text>;
    }
    
    public async Task OnGroupUpdate()
    {
        await LoadGroupData();
        StateHasChanged();
    }
}

