@implements IAvatarViewer

@using Bamboozlers.Classes.Data
@using Blazorise.Extensions

<Container style="position: relative; display: inline-block; width: max-content; height: max-content;">
    <Row>
        <Label Width="@Width.Px(DisplayPx)" Height="@Height.Px(DisplayPx)" Class="overlay-wrapper" for="input-file">
            <Image ElementId="avatar-display"
                   Class="border-mask overlay-base fit"
                   Source="@(((IAvatarViewer) this).GetDisplayString())"/>
            <Image ElementId="hover-effect"
                   Class="border-mask overlay fit"
                   Source="images/edit_overlay.png"/>
        </Label>
        <InputFile id="input-file" OnChange="OnFileUpload" hidden/>
    </Row>
    <Row>
        @if (Avatar is not null)
        {
            <CompActionButton Color="Color.Danger"
                              IconName="IconName.Delete"
                              ActionCallback="SignalDeleteAvatar"/>
        }
    </Row>
</Container>

@code {
    private static readonly string[] AllowedFormats = ["png", "jpeg", "jpeg"];
    
    [Parameter] public byte[]? Avatar { get; set; }
    [Parameter] public string DefaultSrc { get; set; } = "images/default_profile.png";
    [Parameter] public int DisplayPx { get; set; } = 256;
    
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback<AlertArguments> AlertCallback { get; set; }
    [Parameter] public Func<byte[], Task<bool>> OnUpload { get; set; } = async _ => false;

    public async Task SignalDeleteAvatar()
    {
        if (Avatar is null) return;
        await OnDelete.InvokeAsync();
    }

    public async Task OnFileUpload(InputFileChangeEventArgs args)
    {
        await AlertCallback.InvokeAsync(await ProcessFileUpload(args));
    }
    
    public async Task<AlertArguments> ProcessFileUpload(InputFileChangeEventArgs args)
    {
        IBrowserFile? upload;
        try
        {
            upload = args.File;
        }
        catch (InvalidOperationException)
        {
            return new AlertArguments(
                Color.Danger,
                true,
                "Error occured while uploading image.",
                "No file was uploaded."
            );
        }
        
        if (!upload.ContentType.Contains("image/"))
            return new AlertArguments(
                Color.Danger,
                true,
                "Error occured while uploading image.",
                "Uploaded file was not an image."
            );
        
        var imageType = upload.ContentType[6..];
        if (!AllowedFormats.Contains(imageType))
            return new AlertArguments(
                Color.Danger,
                true,
                "Error occured while uploading image.",
                "Image must be a PNG or JPG (JPEG) file."
            );

        ArraySegment<byte> bytes; 
        var success = false;
        using (var stream = new MemoryStream())
        {
            try
            {
                await upload.OpenReadStream().CopyToAsync(stream);
                success = stream.TryGetBuffer(out bytes);
            }
            catch (Exception)
            {
                return new AlertArguments(
                    Color.Danger,
                    true,
                    "Error occured while uploading image.",
                    "Unknown error occurred. Please try again."
                );
            }
        }

        var image = bytes.ToArray();
        if (!success || image.IsNullOrEmpty())
            return new AlertArguments(
                Color.Danger,
                true,
                "Error occured while uploading image.",
                "Unknown error occurred. Please try again."
            );
        try
        {
            var result = await OnUpload.Invoke(image.ToArray());
            if (!result) throw new Exception();
            Avatar = image;
            await InvokeAsync(StateHasChanged);
            return new AlertArguments(
                Color.Success,
                true,
                "Success!",
                "Image was successfully uploaded."
            );
        }
        catch (Exception)
        {
            return new AlertArguments(
                Color.Danger,
                true,
                "Error occured while uploading image.",
                "Unknown error occurred. Please try again."
            );
        }
    }
}