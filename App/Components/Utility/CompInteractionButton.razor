@inherits UserViewComponentBase

@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.Services.UserServices
@using Blazorise.Utilities
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Serverbound.Relations

<CompActionButton ButtonId="@ButtonId"
                  Color="@Color"
                  ButtonCaption="@ButtonCaption"
                  IconName="@IconName"
                  ActionCallback="@InteractionCallback"
                  ColumnWrapped="@false"
                  Disabled="@Disabled"/>

@code {
    [Inject] private IUserInteractionService UserInteractionService { get; set; } = default!;
    
    [Parameter] public InteractionEvent EventKind { get; set; }
    [Parameter] public int? UserId { get; set; }
    [Parameter] public string? ButtonId { get; set; }
    [Parameter] public bool FullText { get; set; }

    [CascadingParameter] public EventCallback<IPacket> SendToServer { get; set; }

    public EventCallback InteractionCallback { get; set; } = EventCallback.Empty;
    public IconName IconName { get; set; }
    public string? ButtonCaption { get; set; } = "";
    private Color? Color { get; set; } = Color.Success;
    public bool Disabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var eventCallbackFactory = new EventCallbackFactory();
        switch (EventKind)
        {
            case InteractionEvent.Unblock:
                Color = Color.Danger;
                IconName = IconName.Shield;
                ButtonCaption = "Unblock User";
                InteractionCallback = eventCallbackFactory.Create(this, UnblockUser);
                break;
            case InteractionEvent.RequestRevoked:
                Color = Color.Danger;
                IconName = IconName.Ban;
                ButtonCaption = "Revoke Friend Request";
                InteractionCallback = eventCallbackFactory.Create(this, RevokeFriendRequest);
                break;
            case InteractionEvent.RequestDeclined:
                Color = Color.Danger;
                IconName = IconName.Ban;
                ButtonCaption = FullText ? "Decline Friend Request" : "";
                InteractionCallback = eventCallbackFactory.Create(this, DeclineFriendRequest);
                break;
            case InteractionEvent.RequestAccepted:
                IconName = IconName.Check;
                ButtonCaption = FullText ? "Accept Friend Request" : "";
                InteractionCallback = eventCallbackFactory.Create(this, AcceptFriendRequest);
                break;
            case InteractionEvent.RequestSent:
                IconName = IconName.UserPlus;
                ButtonCaption = "Send Friend Request";
                InteractionCallback = eventCallbackFactory.Create(this, SendFriendRequest);
                break;
            case InteractionEvent.RequestPending:
                IconName = IconName.Send;
                ButtonCaption = "Pending";
                Disabled = true;
                Color = Color.Light;
                break;
        }
    }

    private async Task SendFriendRequest()
    {
        await UserInteractionService.SendFriendRequest(UserId);
        var sendFriendRequest = new UserRelationC2SPacket
        {
            Action = UserRelationC2SPacket.RelationAction.SendRequest,
            SenderId = UserData!.Id!.Value,
            ReceiverId = UserId!.Value
        };
        await SendToServer.InvokeAsync(sendFriendRequest);
    }

    private async Task AcceptFriendRequest()
    {
        await UserInteractionService.AcceptFriendRequest(UserId);
        var acceptFriendRequest = new UserRelationC2SPacket
        {
            Action = UserRelationC2SPacket.RelationAction.AcceptRequest,
            SenderId = UserData!.Id!.Value,
            ReceiverId = UserId!.Value
        };
        await SendToServer.InvokeAsync(acceptFriendRequest);
    }

    private async Task DeclineFriendRequest()
    {
        await UserInteractionService.DeclineFriendRequest(UserId);
        var declineFriendRequest = new UserRelationC2SPacket
        {
            Action = UserRelationC2SPacket.RelationAction.DeclineRequest,
            SenderId = UserData!.Id!.Value,
            ReceiverId = UserId!.Value
        };
        await SendToServer.InvokeAsync(declineFriendRequest);
    }

    private async Task RevokeFriendRequest()
    {
        await UserInteractionService.RevokeFriendRequest(UserId);
        var revokeFriendRequest = new UserRelationC2SPacket
        {
            Action = UserRelationC2SPacket.RelationAction.RevokeRequest,
            SenderId = UserData!.Id!.Value,
            ReceiverId = UserId!.Value
        };
        await SendToServer.InvokeAsync(revokeFriendRequest);
    }

    private async Task UnblockUser()
    {
        await UserInteractionService.UnblockUser(UserId);
        var unblockUser = new UserRelationC2SPacket
        {
            Action = UserRelationC2SPacket.RelationAction.Unblock,
            SenderId = UserData!.Id!.Value,
            ReceiverId = UserId!.Value
        };
        await SendToServer.InvokeAsync(unblockUser);
    }
    

}