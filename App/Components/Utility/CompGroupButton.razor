@using Bamboozlers.Components.Utility
@using Bamboozlers.Classes.Utility.Observer
@using Bamboozlers.Classes.Services.UserServices
@using Blazorise.Utilities
@using Bamboozlers.Classes.Func
@using Bamboozlers.Classes.Networking.Packets
@using Bamboozlers.Classes.Networking.Packets.Serverbound.Interaction

<CompActionButton ButtonId="@ButtonId"
                  Color="@Color"
                  ButtonCaption="@ButtonCaption"
                  IconName="@IconName"
                  ActionCallback="@GroupCallback"
                  ColumnWrapped="@false"
                  Disabled="@Disabled"/>
@code {
    [Inject] private IUserGroupService UserGroupService { get; set; } = default!;
    
    [Parameter] public GroupEvent EventKind { get; set; }
    [Parameter] public int? UserId { get; set; }
    [Parameter] public int? GroupID { get; set; }
    [Parameter] public string? ButtonId { get; set; }
    
    [CascadingParameter] public EventCallback<IPacket> SendToServer { get; set; }

    public EventCallback GroupCallback { get; set; } = EventCallback.Empty;
    public IconName IconName { get; set; }
    public string? ButtonCaption { get; set; } = "";
    public Color? Color { get; set; } = Color.Success;
    public bool Disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var eventCallbackFactory = new EventCallbackFactory();
        switch (EventKind)
        {
            case GroupEvent.SentInvite:
                IconName = IconName.UserPlus;
                ButtonCaption = "Send Invite";
                GroupCallback = eventCallbackFactory.Create(this, SendInvite);
                break;
            case GroupEvent.SentInviteRevoked:
                IconName = IconName.Ban;
                Color = Color.Danger;
                ButtonCaption = "Revoke Invite";
                GroupCallback = eventCallbackFactory.Create(this, RevokeInvite);
                break;
            case GroupEvent.SentInvitePending:
                IconName = IconName.Send;
                Color = Color.Light;
                ButtonCaption = "Pending";
                Disabled = true;
                break;
            case GroupEvent.ReceivedInviteAccepted:
                IconName = IconName.Check;
                Color = Color.Success;
                GroupCallback = eventCallbackFactory.Create(this, AcceptInvite);
                break;    
            case GroupEvent.ReceivedInviteDeclined:
                IconName = IconName.Ban;
                Color = Color.Danger;
                GroupCallback = eventCallbackFactory.Create(this, DeclineInvite);
                break;    
            case GroupEvent.RemoveMember:
                IconName = IconName.Ban;
                Color = Color.Danger;
                ButtonCaption = "Kick User";
                GroupCallback = eventCallbackFactory.Create(this, RemoveMember);
                break;    
        }
    }

    private async Task RemoveMember()
    {
        await SyncedInteraction(GroupEvent.RemoveMember, UserGroupService.RemoveGroupMember);
    }

    private async Task DeclineInvite()
    {
        await SyncedInteraction(GroupEvent.ReceivedInviteDeclined, UserGroupService.DeclineGroupInvite);
    }

    private async Task AcceptInvite()
    {
        await SyncedInteraction(GroupEvent.ReceivedInviteAccepted, UserGroupService.AcceptGroupInvite);
    }

    private async Task RevokeInvite()
    {
        await SyncedInteraction(GroupEvent.SentInviteRevoked, UserGroupService.RevokeGroupInvite);
    }

    private async Task SendInvite()
    {
        await SyncedInteraction(GroupEvent.SentInvite, UserGroupService.SendGroupInvite);
    }

    private async Task SyncedInteraction(GroupEvent eventKind, AsyncBiConsumer<int?, int?> action)
    {
        await action.Invoke(GroupID, UserId);
        if(GroupID == null) return;
        
        var interactionSync = new GroupInteractionSyncC2SPacket
        {
            Event = eventKind,
            GroupId = GroupID!.Value
        };
        await SendToServer.InvokeAsync(interactionSync);
    }
}