@using Bamboozlers.Components.Settings
@using Bamboozlers.Components.Group
@using Bamboozlers.Components.Group.Settings
@using Bamboozlers.Components.Interaction
@using Bamboozlers.Components.MainVisual
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes.Data
@using Bamboozlers.Classes.Services
@using Bamboozlers.Classes.Utility.Mediator;
@using Xunit

@implements IPopupColleague

@if (ToDisplay.TryPop(out var record))
{
    <Modal @ref="CurrentPopup" Closed="OnClosed">
        @record.ModalContent
    </Modal>
    CurrentPopupRecord = record;
}

@code {
    [Inject] public IPopupService PopupService { get; set; } = default!;

    private Modal? CurrentPopup { get; set; }
    private PopupRecord? CurrentPopupRecord { get; set; }
    
    private Stack<PopupRecord> ToDisplay { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PopupService.RegisterColleague(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (CurrentPopup is not null)
            await CurrentPopup.Show();
    }

    public async Task OpenKnownPopup(PopupType type, User? focusUser = null, int? chatId = null)
    {
        if (CurrentPopupRecord is not null) 
            ToDisplay.Push(CurrentPopupRecord);
        
        var popupRecord = type switch
        {
            PopupType.Settings => CreateRecognizedPopup(content: @<text><CompSettings/></text>),
            PopupType.UserProfile => CreateRecognizedPopup(content: @<text><CompProfileView FocusUser="@UserRecord.From(focusUser!)"/></text>), 
            PopupType.GroupChatSettings => CreateRecognizedPopup(content: @<text><CompGroupSettings ChatID="@chatId"/></text>),
            PopupType.InviteGroupMembers => CreateRecognizedPopup(content: @<text><CompAddMember ChatID="@chatId"/></text>),
            PopupType.CreateGroup => CreateRecognizedPopup(content: @<text><CompCreateGroup/></text>),
            PopupType.FriendList => CreateRecognizedPopup(content: @<text><ModalContent Centered><CompFriendList IsPopup="@true"/></ModalContent></text>),
            PopupType.FindFriends => CreateRecognizedPopup(content: @<text><CompAddFriend/></text>),
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, $"Cannot create popup of type {type}")
        };
        ToDisplay.Push(popupRecord);

        await InvokeAsync(StateHasChanged);
    }

    public async Task OpenNewPopup(RenderFragment bodyContent, RenderFragment? headerContent = null, RenderFragment? footerContent = null)
    {
        if (CurrentPopupRecord is not null) 
            ToDisplay.Push(CurrentPopupRecord);
        
        var record = new PopupRecord();
        record.ModalContent = @<text>
                                   <ModalContent>
                                       @if (headerContent is not null) {
                                           <ModalHeader>
                                               @headerContent
                                           </ModalHeader>
                                       }
                                       <ModalBody>
                                           @bodyContent
                                       </ModalBody>
                                       @if (footerContent is not null)
                                       {
                                           <ModalFooter TextAlignment="TextAlignment.Center">
                                               @footerContent
                                           </ModalFooter>
                                       }
                                   </ModalContent>
                               </text>;
        ToDisplay.Push(record);
        
        await InvokeAsync(StateHasChanged);
    }

    public async Task OpenAlertPopup(RenderFragment bodyAlert, Task<bool> confirmationTask)
    {
        if (CurrentPopupRecord is not null) 
            ToDisplay.Push(CurrentPopupRecord);
        
        var record = new PopupRecord();
        record.ModalContent = @<text>
                               <ModalContent>
                                   <ModalHeader>
                                       <Heading>Are you sure?</Heading>
                                   </ModalHeader>
                                   <ModalBody>
                                       @bodyAlert
                                   </ModalBody>
                                   <ModalFooter TextAlignment="TextAlignment.Center">
                                       <Button Color="Color.Danger" Clicked="@(async () => { await confirmationTask; await DismissPopup(); })">
                                           <Icon Name="IconName.Ban"/>
                                           Cancel
                                       </Button>
                                       <Button Color="Color.Success" Clicked="@(async () => { await confirmationTask; await DismissPopup(); })">
                                           <Icon Name="IconName.Check"/>
                                           Confirm
                                       </Button>
                                   </ModalFooter>
                               </ModalContent>
                           </text>;
        ToDisplay.Push(record);
        await InvokeAsync(StateHasChanged);
    }

    public async Task DismissPopup()
    {
        CurrentPopupRecord = null;
        if (CurrentPopup is not null)
            await CurrentPopup.Hide();
    }

    public PopupRecord CreateRecognizedPopup(RenderFragment content)
    {
        var record = new PopupRecord
        {
            ModalContent = content
        };
        return record;
    }

    private async Task OnClosed()
    {
        CurrentPopupRecord = null;
        await InvokeAsync(StateHasChanged);
    }
    
    public sealed record PopupRecord
    {
        public RenderFragment ModalContent { get; set; }
        public Modal Ref { get; set; }
    }
}
