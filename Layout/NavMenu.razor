@implements IDisposable
@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes
@inject IJSRuntime JsRuntime

<div>
    <Button Color="Color.Primary" Clicked="@_windowManager.OpenFriendsWindow" Class="group-dm-button">
        <Icon Name="@("fa-people-arrows")"></Icon> @* placeholder icon *@
        <Text>Friends</Text>
        <Badge Color="Color.Warning">3</Badge> @* placeholder (num friends?) *@
    </Button>

    <Button Color="Color.Primary" Clicked="@Toggle" Class="group-dm-button">
        <Icon Name="@(_viewDms ? "fa-user" : "fa-users")"></Icon>
        <Text>@(_viewDms ? "Direct Messages" : "Groups")</Text>
    </Button>

    <ListGroup Mode="ListGroupMode.Selectable" @bind-SelectedItem="_selectedItem" Class="group-dm-list scrollbar-container">
        @foreach (var chat in _client.Chats.Where(chat => IsValidChat(chat)))
        {
            <ListGroupItem Name="@Convert.ToString(chat.ID)" Color="Color.Secondary">
                <CompChatEntry Name="@chat.Name" Avatar="@chat.Avatar"></CompChatEntry> @*"@user.Avatar"*@
            </ListGroupItem>
        }
    </ListGroup>
    <Button Color="Color.Success" Clicked="@(_viewDms ? _windowManager.OpenNewDmWindow : _windowManager.OpenNewGroupWindow)" Class="group-dm-button">
        <Icon Name="@("fa-plus")"></Icon>
        <Text>@(_viewDms ? "New DM" : "New Group")</Text>
    </Button>

    <Button Color="Color.Info" Class="profile-button" Clicked="@NextUser">
        <Image Source="https://via.placeholder.com/24"></Image>
        <Text>@_client.Username</Text>
        <Icon Name="@("fa-warehouse")"></Icon> @* placeholder icon *@
    </Button>

    @code{
        private readonly BamboozlersClient _client = BamboozlersClient.Instance;
        
        private readonly WindowManager _windowManager;
        
        private bool _viewDms = false;

        private string _selectedItem;

        private Predicate<ClientChat?> IsValidChat => chat => chat != null && chat.IsGroupChat == !_viewDms;
        
        public NavMenu()
        {
            _windowManager = _client.WindowManager;
            _selectedItem = Convert.ToString(_viewDms ? _client.DirectChats.First().ID : _client.GroupChats.First().ID);
        }

        private Task Toggle()
        {
            _viewDms = !_viewDms;
            return Task.CompletedTask;
        }

        protected override void OnInitialized()
        {
            _client.OnChange += StateHasChanged;
        }
        
        void IDisposable.Dispose()
        {
            _client.OnChange -= StateHasChanged;
        }
        
        // placeholder
        private async Task NextUser()
        {
            var users = _client.Db.Users.ToList();
            var index = users.FindIndex(user => user.ID == _client.UserId);
            index = (index + 1) % users.Count;
            await InvokeAsync(() => _client.UserId = users[index].ID);
        }
    }

</div>