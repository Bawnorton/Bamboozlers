@using Bamboozlers.Classes.AppDbContext
@using Bamboozlers.Classes

@rendermode InteractiveServer

@inject IDbContextFactory<AppDbContext> Db
@inject AuthenticationStateProvider AuthStateProvider;

@if (Self is null)
{
    <p>Loading...</p>
    return;
}
<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <Div Background="Background.Secondary"
                 Padding="Padding.Is3"
                 TextSize="TextSize.Heading5">
                <Icon Name="IconName.Hospital"></Icon>
                <Text>Bamboozlers</Text>
            </Div>
            <Bar Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Hide"
                 ThemeContrast="ThemeContrast.Dark"
                 Class="scrollbar-container">
                <BarMenu>
                    <BarItem>
                        <BarLink ElementId="friends" @onclick="() => ChangeView(View.Friends)">
                            <BarIcon IconName="IconName.Check"></BarIcon>
                            Friends
                        </BarLink>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="IconName.User"></BarIcon>
                                Direct Messages
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="dms_dropdown">
                                @foreach (var chat in DmChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("user_" + chat.User.Id)" @onclick="() => ChangeView(View.Dm, chat.DbReference)">
                                            <BarIcon IconName="IconName.User"></BarIcon>
                                            @chat.User.DisplayName
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>
                                <BarIcon IconName="IconName.Users"></BarIcon>
                                Group Chats
                            </BarDropdownToggle>
                            <BarDropdownMenu ElementId="groups_dropdown">
                                @foreach (var chat in GroupChats)
                                {
                                    <BarItem>
                                        <BarLink ElementId="@("group_" + chat.ID)" @onclick="() => ChangeView(View.Group, chat)">
                                            <BarIcon IconName="IconName.Users"></BarIcon>
                                            @chat.Name
                                        </BarLink>
                                    </BarItem>
                                }
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </BarMenu>
            </Bar>
            <Div Padding="Padding.Is3"
                 TextSize="TextSize.Heading5"
                 Class="sidebar-footer"
                 id="profile"
                 @onclick="OpenProfilePopup">
                <Text>
                    @(Self.DisplayName ?? Self.UserName) 
                </Text>
                <Icon Name="IconName.UserTie" IconSize="IconSize.Large"></Icon>
            </Div>
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutHeader Fixed
                      Padding="Padding.Is3"
                      TextSize="TextSize.Heading5"
                      TextColor="TextColor.Primary"
                      Background="Background.Dark">
            <Text ElementId="header-text">@Views[CurrentView].Name</Text>
        </LayoutHeader>
        <LayoutContent Padding="Padding.Is3"
                       Background="Background.Primary"
                       TextColor="TextColor.Primary">
            <DynamicComponent Type="@Views[CurrentView].HeldType" Parameters="@Views[CurrentView].Parameters"/>
        </LayoutContent>
    </Layout>
</Layout>

@code {

    private User? Self { get; set; }

    private List<DmChat> DmChats { get; set; }

    private List<GroupChat> GroupChats { get; set; }

    private View CurrentView { get; set; } = View.Friends;

    private int FriendCount { get; set; } = 0;

    private Dictionary<View, ViewHolder> Views { get; } = new()
    {
        {View.Friends, ViewHolder.Of(new CompFriendsView())},
        {View.Dm, ViewHolder.Of(new CompChatView())},
        {View.Group, ViewHolder.Of(new CompChatView())}
    };

    protected override async Task OnInitializedAsync()
    {
        Self = await AuthHelper.GetSelf(query => query.Include(u => u.Chats).ThenInclude(c => c.Users));
        GroupChats = Self.Chats.OfType<GroupChat>().ToList();
        DmChats = Self.Chats.Except(GroupChats).Select(chat => new DmChat(chat, chat.Users.First(u => u.Id != Self.Id))).ToList();
        
        await using var db = await Db.CreateDbContextAsync();
        var friendships = db.FriendShips.Include(f => f.User1).Include(f => f.User2);
        foreach (var friendship in friendships)
        {
            if (friendship.User1ID == Self.Id || friendship.User2ID == Self.Id)
            {
                FriendCount++;
            }
        }

        var other = new User
        {
            Id = 3421,
            UserName = "TestUser1",
            Email = "test@gmail.com",
            EmailConfirmed = true,
            AccessFailedCount = 0,
            DisplayName = "Test User 1",
            Chats = [],
            ModeratedChats = [],
            OwnedChats = []
        };
        var chat = new Chat
        {
            ID = 1342,
            Users = [Self, other],
            Messages = []
        };
        other.Chats.Add(chat);
        DmChats.Add(new DmChat(chat, other));
        
        ChangeView(CurrentView);       
    }

    private void ChangeView(View view, Chat? chat = null)
    {
        CurrentView = view;
        switch (CurrentView)
        {
            case View.Group:
                Views[CurrentView].Name = (chat as GroupChat)!.Name;
                Views[CurrentView].Parameters = new Dictionary<string, object>
                {
                    {"Chat", chat}
                };
                break;
            case View.Dm:
            {
                var other = chat!.Users.First(u => u.Id != Self!.Id);
                Views[CurrentView].Name = other.DisplayName ?? other.UserName;
                Views[CurrentView].Parameters = new Dictionary<string, object>
                {
                    {"Chat", chat}
                };
                break;
            }
            case View.Friends:
                Views[CurrentView].Name = $"Friends ({FriendCount})"; 
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    
    
    private Task OpenProfilePopup()
    {
        // TODO: Impl;
        return Task.CompletedTask;
    }

    private enum View
    {
        Dm,
        Group,
        Friends
    }

    private record DmChat(Chat DbReference, User User);

    private class ViewHolder(ComponentBase component)
    {
        public ComponentBase Held { get; } = component;

        public string? Name { get; set; }
        
        public IDictionary<string, object> Parameters { get; set; } = new Dictionary<string, object>();
        
        public Type HeldType => Held.GetType();
        
        public static ViewHolder Of(ComponentBase component) => new(component);
    }
}