@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Bamboozlers.Classes.AppDbContext
@using Blazorise.Extensions

@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager
@if (Code is null || invalidCode)
{
    <PageTitle>Invalid password reset</PageTitle>

    <h1>Invalid password reset</h1>
    <p>
        The password reset link is invalid.
    </p>
}
else
{
    <PageTitle>Reset password</PageTitle>
    <h1>Reset password</h1>
    <h2>Reset your password.</h2>
    <hr/>
    <div class="row">
        <div class="col-md-4">
            <StatusMessage Message="@Message" Link="@link" LinkText="@linkText"/>
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <input type="hidden" name="Input.Code" value="@Input.Code"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }
    private ValidationMessageStore? validationMessageStore;
    private bool invalidCode { get; set; }

    private string link { get; set; }
    private string linkText { get; set; }

    private string? Message { get; set; }

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            invalidCode = true;
            return;
        }

        try
        {
            Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        }
        catch (Exception ex)
        {
            invalidCode = true;
        }
    }

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            SetSuccessStatusMessage();
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            SetSuccessStatusMessage();
            return;
        }
        validationMessageStore = new ValidationMessageStore(editContext);
        foreach (var error in result.Errors)
        {
            if (error.Code.Contains("Password"))
            {
                validationMessageStore?.Add(new FieldIdentifier(Input, nameof(Input.Password)), error.Description);
            }
            else if (error.Code.Contains("Email"))
            {
                validationMessageStore?.Add(new FieldIdentifier(Input, nameof(Input.Email)), error.Description);
            }
        }

        IEnumerable<IdentityError>? remainingErrors = result.Errors.Where(w => !w.Code.Contains("Email") && !w.Code.Contains("Password"));
        editContext.NotifyValidationStateChanged();
        if (!remainingErrors.IsNullOrEmpty())
        {
            Message = $"Error: {string.Join(", ", remainingErrors.Select(error => error.Description))}";
        }
        
    }
    
    private void SetSuccessStatusMessage()
    {
        Message = "Your password has been reset. Please ";
        link = "Account/Login";
        linkText = "click here to login.";
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}